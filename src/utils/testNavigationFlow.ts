// Script de teste para verificar o fluxo de navega√ß√£o e persist√™ncia de dados

import { getUser, saveOrUpdateUser } from '../services/dbService';
import { UserProfile } from '../context/AuthContext';

// Fun√ß√£o para testar o fluxo completo de dados
export const testNavigationFlow = async (): Promise<{
    databaseConnection: boolean;
    userProfileSave: boolean;
    medicationRemindersSave: boolean;
    glycemicGoalsSave: boolean;
    errors: string[];
}> => {
    const results = {
        databaseConnection: false,
        userProfileSave: false,
        medicationRemindersSave: false,
        glycemicGoalsSave: false,
        errors: [] as string[]
    };

    try {
        // 1. Teste de conex√£o com o banco
        console.log('üß™ Testando conex√£o com banco de dados...');
        const user = await getUser();
        results.databaseConnection = true;
        console.log('‚úÖ Conex√£o com banco OK');

        // 2. Teste de salvamento de perfil com novos campos
        if (user) {
            console.log('üß™ Testando salvamento de perfil com novos campos...');
            
            const testProfile: UserProfile = {
                ...user,
                glycemicGoals: JSON.stringify({
                    preMeal: { min: 80, ideal: 120, max: 180 },
                    postMeal: { min: 100, ideal: 160, max: 250 },
                    night: { min: 80, ideal: 120, max: 180 }
                }),
                medicationReminders: JSON.stringify({
                    type1: [
                        { id: '1', enabled: true, time: '08:00', medicationType: 'insulin', notificationEnabled: true }
                    ],
                    type2: {
                        medication: [
                            { id: '2', enabled: true, time: '08:00', medicationType: 'medication', notificationEnabled: true }
                        ],
                        insulin: []
                    }
                }),
                updated_at: new Date().toISOString(),
                pending_sync: true
            };

            await saveOrUpdateUser(testProfile);
            results.userProfileSave = true;
            console.log('‚úÖ Salvamento de perfil OK');

            // 3. Teste de recupera√ß√£o dos dados
            console.log('üß™ Testando recupera√ß√£o de dados...');
            const savedUser = await getUser();
            
            if (savedUser?.glycemicGoals) {
                results.glycemicGoalsSave = true;
                console.log('‚úÖ Objetivos glic√™micos salvos e recuperados OK');
            } else {
                results.errors.push('Objetivos glic√™micos n√£o foram salvos corretamente');
            }

            if (savedUser?.medicationReminders) {
                results.medicationRemindersSave = true;
                console.log('‚úÖ Alarmes de medicamento salvos e recuperados OK');
            } else {
                results.errors.push('Alarmes de medicamento n√£o foram salvos corretamente');
            }

        } else {
            results.errors.push('Nenhum usu√°rio encontrado para teste');
        }

    } catch (error) {
        results.errors.push(`Erro durante teste: ${error}`);
        console.error('‚ùå Erro durante teste:', error);
    }

    return results;
};

// Fun√ß√£o para testar o fluxo de navega√ß√£o
export const testNavigationSequence = (): {
    expectedFlow: string[];
    currentFlow: string[];
    isValid: boolean;
} => {
    const expectedFlow = [
        'Auth (Login/Register)',
        'Onboarding (ProfileSetup)',
        'Onboarding (GlycemicGoal)',
        'Onboarding (BiometricSetup)',
        'App (Drawer - Dashboard)'
    ];

    // Esta fun√ß√£o seria chamada durante o fluxo real para validar
    const currentFlow: string[] = [];
    
    return {
        expectedFlow,
        currentFlow,
        isValid: true // Seria validado durante execu√ß√£o real
    };
};

// Fun√ß√£o para verificar integridade dos dados
export const validateDataIntegrity = async (): Promise<{
    userProfileValid: boolean;
    glycemicGoalsValid: boolean;
    medicationRemindersValid: boolean;
    issues: string[];
}> => {
    const results = {
        userProfileValid: false,
        glycemicGoalsValid: false,
        medicationRemindersValid: false,
        issues: [] as string[]
    };

    try {
        const user = await getUser();
        
        if (!user) {
            results.issues.push('Nenhum usu√°rio encontrado');
            return results;
        }

        // Validar perfil b√°sico
        if (user.id && user.name && user.email) {
            results.userProfileValid = true;
        } else {
            results.issues.push('Perfil b√°sico incompleto');
        }

        // Validar objetivos glic√™micos
        if (user.glycemicGoals) {
            try {
                const goals = JSON.parse(user.glycemicGoals);
                if (goals.preMeal && goals.postMeal && goals.night) {
                    results.glycemicGoalsValid = true;
                } else {
                    results.issues.push('Objetivos glic√™micos com estrutura inv√°lida');
                }
            } catch {
                results.issues.push('Objetivos glic√™micos com JSON inv√°lido');
            }
        }

        // Validar alarmes de medicamento
        if (user.medicationReminders) {
            try {
                const reminders = JSON.parse(user.medicationReminders);
                if (reminders.type1 && reminders.type2) {
                    results.medicationRemindersValid = true;
                } else {
                    results.issues.push('Alarmes de medicamento com estrutura inv√°lida');
                }
            } catch {
                results.issues.push('Alarmes de medicamento com JSON inv√°lido');
            }
        }

    } catch (error) {
        results.issues.push(`Erro durante valida√ß√£o: ${error}`);
    }

    return results;
};

// Fun√ß√£o para gerar relat√≥rio de status
export const generateStatusReport = async (): Promise<string> => {
    const navigationTest = testNavigationSequence();
    const dataTest = await testNavigationFlow();
    const integrityTest = await validateDataIntegrity();

    const report = `
üìä RELAT√ìRIO DE STATUS DO GLUCOCARE

üîÑ FLUXO DE NAVEGA√á√ÉO:
‚úÖ Fluxo esperado: ${navigationTest.expectedFlow.join(' ‚Üí ')}
${navigationTest.isValid ? '‚úÖ' : '‚ùå'} Status: ${navigationTest.isValid ? 'V√ÅLIDO' : 'INV√ÅLIDO'}

üíæ PERSIST√äNCIA DE DADOS:
${dataTest.databaseConnection ? '‚úÖ' : '‚ùå'} Conex√£o com banco: ${dataTest.databaseConnection ? 'OK' : 'FALHA'}
${dataTest.userProfileSave ? '‚úÖ' : '‚ùå'} Salvamento de perfil: ${dataTest.userProfileSave ? 'OK' : 'FALHA'}
${dataTest.glycemicGoalsSave ? '‚úÖ' : '‚ùå'} Objetivos glic√™micos: ${dataTest.glycemicGoalsSave ? 'OK' : 'FALHA'}
${dataTest.medicationRemindersSave ? '‚úÖ' : '‚ùå'} Alarmes medicamento: ${dataTest.medicationRemindersSave ? 'OK' : 'FALHA'}

üîç INTEGRIDADE DOS DADOS:
${integrityTest.userProfileValid ? '‚úÖ' : '‚ùå'} Perfil do usu√°rio: ${integrityTest.userProfileValid ? 'V√ÅLIDO' : 'INV√ÅLIDO'}
${integrityTest.glycemicGoalsValid ? '‚úÖ' : '‚ùå'} Objetivos glic√™micos: ${integrityTest.glycemicGoalsValid ? 'V√ÅLIDO' : 'INV√ÅLIDO'}
${integrityTest.medicationRemindersValid ? '‚úÖ' : '‚ùå'} Alarmes medicamento: ${integrityTest.medicationRemindersValid ? 'V√ÅLIDO' : 'INV√ÅLIDO'}

‚ùå PROBLEMAS ENCONTRADOS:
${dataTest.errors.length > 0 ? dataTest.errors.map(e => `‚Ä¢ ${e}`).join('\n') : 'Nenhum problema encontrado'}
${integrityTest.issues.length > 0 ? integrityTest.issues.map(i => `‚Ä¢ ${i}`).join('\n') : ''}

üìÖ Data do teste: ${new Date().toLocaleString('pt-BR')}
    `;

    return report;
};
