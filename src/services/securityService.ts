// ‚úÖ SERVI√áO DE SEGURAN√áA - IMPLEMENTANDO PR√ÅTICAS RECOMENDADAS GOOGLE OAUTH 2.0

import { getFirebaseAuth } from '../config/firebase-config';
import AsyncStorage from '@react-native-async-storage/async-storage';

interface SecurityEvent {
  type: 'account_compromise' | 'data_breach' | 'suspicious_activity';
  userId: string;
  timestamp: string;
  action: 'disable_login' | 'require_reauth' | 'notify_user';
}

interface TokenInfo {
  accessToken: string;
  refreshToken: string;
  expiresAt: number;
  userId: string;
}

export class SecurityService {
  private static instance: SecurityService;
  private readonly TOKEN_STORAGE_KEY = 'secure_tokens';
  private readonly SECURITY_EVENTS_KEY = 'security_events';

  static getInstance(): SecurityService {
    if (!SecurityService.instance) {
      SecurityService.instance = new SecurityService();
    }
    return SecurityService.instance;
  }

  // ‚úÖ PR√ÅTICA 1: ARMAZENAMENTO SEGURO DE TOKENS
  async storeTokensSecurely(tokens: TokenInfo): Promise<void> {
    try {
      // Criptografar tokens antes de armazenar
      const encryptedTokens = await this.encryptTokens(tokens);
      
      // Armazenar usando AsyncStorage (que √© seguro no React Native)
      await AsyncStorage.setItem(this.TOKEN_STORAGE_KEY, encryptedTokens);
      
      console.log('‚úÖ Tokens armazenados com seguran√ßa');
    } catch (error) {
      console.error('‚ùå Erro ao armazenar tokens:', error);
      throw new Error('Falha ao armazenar tokens com seguran√ßa');
    }
  }

  // ‚úÖ PR√ÅTICA 2: RECUPERAR TOKENS COM SEGURAN√áA
  async getStoredTokens(): Promise<TokenInfo | null> {
    try {
      const encryptedTokens = await AsyncStorage.getItem(this.TOKEN_STORAGE_KEY);
      
      if (!encryptedTokens) {
        return null;
      }

      // Descriptografar tokens
      const tokens = await this.decryptTokens(encryptedTokens);
      
      // Verificar se tokens n√£o expiraram
      if (this.isTokenExpired(tokens.expiresAt)) {
        await this.revokeTokens();
        return null;
      }

      return tokens;
    } catch (error) {
      console.error('‚ùå Erro ao recuperar tokens:', error);
      return null;
    }
  }

  // ‚úÖ PR√ÅTICA 3: REVOGAR TOKENS QUANDO NECESS√ÅRIO
  async revokeTokens(): Promise<void> {
    try {
      const tokens = await this.getStoredTokens();
      
      if (tokens) {
        // Revogar token de acesso no Google
        await this.revokeAccessToken(tokens.accessToken);
        
        // Limpar tokens do armazenamento local
        await AsyncStorage.removeItem(this.TOKEN_STORAGE_KEY);
        
        console.log('‚úÖ Tokens revogados com sucesso');
      }
    } catch (error) {
      console.error('‚ùå Erro ao revogar tokens:', error);
    }
  }

  // ‚úÖ PR√ÅTICA 4: IMPLEMENTAR PROTE√á√ÉO ENTRE CONTAS (RISC)
  async handleSecurityEvent(event: SecurityEvent): Promise<void> {
    try {
      console.log(`üö® Evento de seguran√ßa detectado: ${event.type} para usu√°rio ${event.userId}`);
      
      // Armazenar evento de seguran√ßa
      await this.storeSecurityEvent(event);
      
      // Executar a√ß√£o baseada no tipo de evento
      switch (event.type) {
        case 'account_compromise':
          await this.handleAccountCompromise(event.userId);
          break;
        case 'data_breach':
          await this.handleDataBreach(event.userId);
          break;
        case 'suspicious_activity':
          await this.handleSuspiciousActivity(event.userId);
          break;
      }
      
      // Notificar usu√°rio se necess√°rio
      if (event.action === 'notify_user') {
        await this.notifyUser(event);
      }
      
    } catch (error) {
      console.error('‚ùå Erro ao processar evento de seguran√ßa:', error);
    }
  }

  // ‚úÖ PR√ÅTICA 5: AUTORIZA√á√ÉO INCREMENTAL
  async requestIncrementalScope(scope: string, context: string): Promise<boolean> {
    try {
      console.log(`üîê Solicitando escopo: ${scope} para contexto: ${context}`);
      
      // Verificar se j√° temos o escopo
      const hasScope = await this.hasScope(scope);
      if (hasScope) {
        return true;
      }

      // Solicitar novo escopo com contexto claro
      const granted = await this.requestScopeWithContext(scope, context);
      
      if (!granted) {
        console.log(`‚ö†Ô∏è Escopo ${scope} negado pelo usu√°rio`);
        // Desabilitar funcionalidade que requer o escopo
        await this.disableFeatureRequiringScope(scope);
      }
      
      return granted;
    } catch (error) {
      console.error('‚ùå Erro ao solicitar escopo incremental:', error);
      return false;
    }
  }

  // ‚úÖ PR√ÅTICA 6: AUDITORIA DE CLIENTES OAUTH
  async auditOAuthClients(): Promise<void> {
    try {
      console.log('üîç Iniciando auditoria de clientes OAuth...');
      
      // Verificar clientes n√£o utilizados
      const unusedClients = await this.findUnusedClients();
      
      if (unusedClients.length > 0) {
        console.log(`‚ö†Ô∏è Encontrados ${unusedClients.length} clientes n√£o utilizados`);
        
        // Remover clientes n√£o utilizados (implementar conforme necess√°rio)
        for (const clientId of unusedClients) {
          await this.removeUnusedClient(clientId);
        }
      }
      
      console.log('‚úÖ Auditoria de clientes OAuth conclu√≠da');
    } catch (error) {
      console.error('‚ùå Erro na auditoria de clientes OAuth:', error);
    }
  }

  // ‚úÖ M√âTODOS PRIVADOS DE SEGURAN√áA

  private async encryptTokens(tokens: TokenInfo): Promise<string> {
    // Implementa√ß√£o simplificada de criptografia
    // Em produ√ß√£o, use bibliotecas de criptografia robustas
    const tokenString = JSON.stringify(tokens);
    return btoa(tokenString); // Base64 encoding (substitua por criptografia real)
  }

  private async decryptTokens(encryptedTokens: string): Promise<TokenInfo> {
    // Implementa√ß√£o simplificada de descriptografia
    const tokenString = atob(encryptedTokens); // Base64 decoding
    return JSON.parse(tokenString);
  }

  private isTokenExpired(expiresAt: number): boolean {
    return Date.now() >= expiresAt;
  }

  private async revokeAccessToken(accessToken: string): Promise<void> {
    try {
      // Implementar revoga√ß√£o real do token no Google
      // const response = await fetch(`https://oauth2.googleapis.com/revoke?token=${accessToken}`);
      console.log('üîÑ Token de acesso revogado');
    } catch (error) {
      console.error('‚ùå Erro ao revogar token de acesso:', error);
    }
  }

  private async storeSecurityEvent(event: SecurityEvent): Promise<void> {
    try {
      const existingEvents = await AsyncStorage.getItem(this.SECURITY_EVENTS_KEY);
      const events = existingEvents ? JSON.parse(existingEvents) : [];
      
      events.push({
        ...event,
        storedAt: new Date().toISOString()
      });
      
      await AsyncStorage.setItem(this.SECURITY_EVENTS_KEY, JSON.stringify(events));
    } catch (error) {
      console.error('‚ùå Erro ao armazenar evento de seguran√ßa:', error);
    }
  }

  private async handleAccountCompromise(userId: string): Promise<void> {
    // Desabilitar login temporariamente
    await this.revokeTokens();
    console.log(`üö® Conta comprometida - login desabilitado para usu√°rio ${userId}`);
  }

  private async handleDataBreach(userId: string): Promise<void> {
    // For√ßar nova autentica√ß√£o
    await this.revokeTokens();
    console.log(`üö® Viola√ß√£o de dados - nova autentica√ß√£o necess√°ria para usu√°rio ${userId}`);
  }

  private async handleSuspiciousActivity(userId: string): Promise<void> {
    // Requerer autentica√ß√£o adicional
    console.log(`‚ö†Ô∏è Atividade suspeita detectada para usu√°rio ${userId}`);
  }

  private async notifyUser(event: SecurityEvent): Promise<void> {
    // Implementar notifica√ß√£o ao usu√°rio
    console.log(`üì¢ Notificando usu√°rio sobre evento de seguran√ßa: ${event.type}`);
  }

  private async hasScope(scope: string): Promise<boolean> {
    // Verificar se o escopo j√° foi concedido
    const tokens = await this.getStoredTokens();
    // Implementar verifica√ß√£o real de escopos
    return false;
  }

  private async requestScopeWithContext(scope: string, context: string): Promise<boolean> {
    // Solicitar escopo com contexto claro para o usu√°rio
    console.log(`üîê Solicitando escopo ${scope} para: ${context}`);
    // Implementar solicita√ß√£o real de escopo
    return true;
  }

  private async disableFeatureRequiringScope(scope: string): Promise<void> {
    // Desabilitar funcionalidade que requer o escopo negado
    console.log(`üö´ Desabilitando funcionalidade que requer escopo: ${scope}`);
  }

  private async findUnusedClients(): Promise<string[]> {
    // Encontrar clientes OAuth n√£o utilizados
    // Implementar l√≥gica real de auditoria
    return [];
  }

  private async removeUnusedClient(clientId: string): Promise<void> {
    // Remover cliente OAuth n√£o utilizado
    console.log(`üóëÔ∏è Removendo cliente OAuth n√£o utilizado: ${clientId}`);
  }
}

// ‚úÖ EXPORTAR INST√ÇNCIA SINGLETON
export const securityService = SecurityService.getInstance();
