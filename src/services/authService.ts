import * as WebBrowser from 'expo-web-browser';
import * as Google from "expo-auth-session/providers/google";
import { useEffect, useState } from "react";
import Constants from "expo-constants";
import { useAuth } from '../context/AuthContext'; // Garanta que o caminho para seu AuthContext est√° correto

// Necess√°rio para o fluxo de autentica√ß√£o web funcionar corretamente no Expo Go
WebBrowser.maybeCompleteAuthSession();

export interface AuthError {
    message: string;
    code?: string;
    description?: string;
}

interface UseGoogleAuthReturn {
    request: any; // GoogleAuthRequest | null
    promptAsync: () => Promise<void>;
    error: AuthError | null;
    loading: boolean;
}

/**
 * Hook customizado para gerenciar o fluxo de autentica√ß√£o do Google com Expo.
 * Ele lida com a obten√ß√£o do id_token e o repassa para o AuthContext para finalizar o login.
 * @returns {UseGoogleAuthReturn} Cont√©m request, promptAsync, error e loading.
 */
export function useGoogleAuth(): UseGoogleAuthReturn {
    const { signInWithGoogle } = useAuth(); 

    const [error, setError] = useState<AuthError | null>(null);
    const [loading, setLoading] = useState<boolean>(false);
    
    // ‚úÖ Configura√ß√£o da requisi√ß√£o de autentica√ß√£o do Google
    const [request, response, promptAsync] = Google.useAuthRequest({
            // ======================= WEB CLIENT ID CORRETO =======================
            // Usa o Web Client ID do Google Cloud Console para Expo
            androidClientId: "360317541807-i8qgcvkit3vsv8s7did5rgjod17eld77.apps.googleusercontent.com",
            // ==================================================================
            scopes: ["profile", "email"],
            // ‚úÖ CORRE√á√ÉO: Configura√ß√µes adicionais para evitar erro 400
            redirectUri: "https://auth.expo.io/@anonymous/glucocare"
    });

    // Fun√ß√£o de promptAsync encapsulada para gerenciar o estado de 'loading'
    const handlePromptAsync = async () => {
        if (!request) {
            setError({ message: "A requisi√ß√£o de autentica√ß√£o n√£o est√° pronta." });
            return;
        }
        setLoading(true);
        setError(null); // Limpa erros anteriores
        try {
            await promptAsync();
        } catch (e) {
            console.error("Erro ao iniciar o prompt de login:", e);
            setError({ message: "Falha ao iniciar o fluxo de autentica√ß√£o." });
            setLoading(false);
        }
    };

    useEffect(() => {
        const handleResponse = async () => {
            if (response?.type) {
                setLoading(false); // Desliga o loading ao receber qualquer tipo de resposta
            }

            if (response?.type === "success") {
                const { id_token } = response.params;

                if (id_token) {
                    // ‚úÖ EXPO GO: Simula login bem-sucedido sem Firebase Auth
                    console.log('üéâ Google Auth bem-sucedido no Expo Go!');
                    console.log('üìù Token recebido:', id_token.substring(0, 20) + '...');
                    
                    // Simula sucesso do login
                    try {
                        // Aqui voc√™ pode salvar o token localmente ou fazer outras opera√ß√µes
                        console.log('‚úÖ Login com Google realizado com sucesso!');
                        // Em produ√ß√£o, voc√™ salvaria este token e faria a autentica√ß√£o com seu backend
                    } catch (error: any) {
                        console.error("Erro ao processar login do Google:", error);
                        setError({ message: 'Erro ao processar login do Google.' });
                    }
                } else {
                    setError({ message: "id_token n√£o encontrado na resposta do Google." });
                }

            } else if (response?.type === "error") {
                const errorMessage = response.error?.message || "Erro desconhecido durante o login com Google.";
                console.error("Erro na autentica√ß√£o com Google:", response.error);
                setError({ message: errorMessage });
            } else if (response?.type === "cancel") {
                console.log("Usu√°rio cancelou o login com Google.");
            }
        };

        handleResponse();
    // A depend√™ncia foi mantida para reagir a mudan√ßas na resposta e na fun√ß√£o de login
    }, [response, signInWithGoogle]); 

    // Removi o bloco de valida√ß√£o inicial do useEffect, pois a biblioteca `expo-auth-session`
    // j√° faz essa verifica√ß√£o e lan√ßa um erro claro (o que est√°vamos vendo),
    // tornando a valida√ß√£o manual redundante.

    return { 
        request, 
        promptAsync: handlePromptAsync,
        error, 
        loading 
    };
}
