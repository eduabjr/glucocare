{"ast":null,"code":"'use strict';\n\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport { Descriptor } from \"./Descriptor\";\nimport { isIOS } from \"./Utils\";\nexport var Characteristic = function () {\n  function Characteristic(nativeCharacteristic, manager) {\n    _classCallCheck(this, Characteristic);\n    Object.assign(this, nativeCharacteristic);\n    Object.defineProperty(this, '_manager', {\n      value: manager,\n      enumerable: false\n    });\n  }\n  return _createClass(Characteristic, [{\n    key: \"descriptors\",\n    value: function descriptors() {\n      return this._manager._descriptorsForCharacteristic(this.id);\n    }\n  }, {\n    key: \"read\",\n    value: function read(transactionId) {\n      return this._manager._readCharacteristic(this.id, transactionId);\n    }\n  }, {\n    key: \"writeWithResponse\",\n    value: function writeWithResponse(valueBase64, transactionId) {\n      return this._manager._writeCharacteristicWithResponse(this.id, valueBase64, transactionId);\n    }\n  }, {\n    key: \"writeWithoutResponse\",\n    value: function writeWithoutResponse(valueBase64, transactionId) {\n      return this._manager._writeCharacteristicWithoutResponse(this.id, valueBase64, transactionId);\n    }\n  }, {\n    key: \"monitor\",\n    value: function monitor(listener, transactionId, subscriptionType) {\n      var _this$_manager;\n      var commonArgs = [this.id, listener, transactionId];\n      var args = isIOS ? commonArgs : [].concat(commonArgs, [subscriptionType]);\n      return (_this$_manager = this._manager)._monitorCharacteristic.apply(_this$_manager, _toConsumableArray(args));\n    }\n  }, {\n    key: \"readDescriptor\",\n    value: (function () {\n      var _readDescriptor = _asyncToGenerator(function* (descriptorUUID, transactionId) {\n        return this._manager._readDescriptorForCharacteristic(this.id, descriptorUUID, transactionId);\n      });\n      function readDescriptor(_x, _x2) {\n        return _readDescriptor.apply(this, arguments);\n      }\n      return readDescriptor;\n    }())\n  }, {\n    key: \"writeDescriptor\",\n    value: (function () {\n      var _writeDescriptor = _asyncToGenerator(function* (descriptorUUID, valueBase64, transactionId) {\n        return this._manager._writeDescriptorForCharacteristic(this.id, descriptorUUID, valueBase64, transactionId);\n      });\n      function writeDescriptor(_x3, _x4, _x5) {\n        return _writeDescriptor.apply(this, arguments);\n      }\n      return writeDescriptor;\n    }())\n  }]);\n}();","map":{"version":3,"names":["_asyncToGenerator","_toConsumableArray","_classCallCheck","_createClass","Descriptor","isIOS","Characteristic","nativeCharacteristic","manager","Object","assign","defineProperty","value","enumerable","key","descriptors","_manager","_descriptorsForCharacteristic","id","read","transactionId","_readCharacteristic","writeWithResponse","valueBase64","_writeCharacteristicWithResponse","writeWithoutResponse","_writeCharacteristicWithoutResponse","monitor","listener","subscriptionType","_this$_manager","commonArgs","args","concat","_monitorCharacteristic","apply","_readDescriptor","descriptorUUID","_readDescriptorForCharacteristic","readDescriptor","_x","_x2","arguments","_writeDescriptor","_writeDescriptorForCharacteristic","writeDescriptor","_x3","_x4","_x5"],"sources":["C:/Users/Usu√°rio/Desktop/glucocare/node_modules/react-native-ble-plx/src/Characteristic.js"],"sourcesContent":["// @flow\n'use strict'\n\nimport type { BleManager } from './BleManager'\nimport type { BleError } from './BleError'\nimport { Descriptor } from './Descriptor'\nimport type { NativeCharacteristic } from './BleModule'\nimport type {\n  DeviceId,\n  Identifier,\n  UUID,\n  TransactionId,\n  CharacteristicSubscriptionType,\n  Base64,\n  Subscription\n} from './TypeDefinition'\nimport { isIOS } from './Utils'\n\n/**\n * Characteristic object.\n */\nexport class Characteristic implements NativeCharacteristic {\n  /**\n   * Internal BLE Manager handle\n   * @private\n   */\n  _manager: BleManager\n  /**\n   * Characteristic unique identifier\n   */\n  id: Identifier\n  /**\n   * Characteristic UUID\n   */\n  uuid: UUID\n  /**\n   * Service's ID to which characteristic belongs\n   */\n  serviceID: Identifier\n  /**\n   * Service's UUID to which characteristic belongs\n   */\n  serviceUUID: UUID\n  /**\n   * Device's ID to which characteristic belongs\n   */\n  deviceID: DeviceId\n  /**\n   * True if characteristic can be read\n   */\n  isReadable: boolean\n  /**\n   * True if characteristic can be written with response\n   */\n  isWritableWithResponse: boolean\n  /**\n   * True if characteristic can be written without response\n   */\n  isWritableWithoutResponse: boolean\n  /**\n   * True if characteristic can monitor value changes.\n   */\n  isNotifiable: boolean\n  /**\n   * True if characteristic is monitoring value changes without ACK.\n   */\n  isNotifying: boolean\n  /**\n   * True if characteristic is monitoring value changes with ACK.\n   */\n  isIndicatable: boolean\n  /**\n   * Characteristic value if present\n   */\n  value: ?Base64\n\n  /**\n   * Private constructor used to create instance of {@link Characteristic}.\n   * @param {NativeCharacteristic} nativeCharacteristic NativeCharacteristic\n   * @param {BleManager} manager BleManager\n   * @private\n   */\n  constructor(nativeCharacteristic: NativeCharacteristic, manager: BleManager) {\n    Object.assign(this, nativeCharacteristic)\n    Object.defineProperty(this, '_manager', { value: manager, enumerable: false })\n  }\n\n  /**\n   * {@link #blemanagerdescriptorsfordevice|bleManager.descriptorsForDevice()} with partially filled arguments.\n   *\n   * @returns {Promise<Array<Descriptor>>} Promise which emits array of {@link Descriptor} objects which are\n   * discovered for this {@link Characteristic}.\n   */\n  descriptors(): Promise<Array<Descriptor>> {\n    return this._manager._descriptorsForCharacteristic(this.id)\n  }\n\n  /**\n   * {@link #blemanagerreadcharacteristicfordevice|bleManager.readCharacteristicForDevice()} with partially filled arguments.\n   *\n   * @param {?TransactionId} transactionId optional `transactionId` which can be used in\n   * {@link #blemanagercanceltransaction|bleManager.cancelTransaction()} function.\n   * @returns {Promise<Characteristic>} Promise which emits this {@link Characteristic}. Latest value will be stored\n   * inside returned object.\n   */\n  read(transactionId: ?TransactionId): Promise<Characteristic> {\n    return this._manager._readCharacteristic(this.id, transactionId)\n  }\n\n  /**\n   * {@link #blemanagerwritecharacteristicwithresponsefordevice|bleManager.writeCharacteristicWithResponseForDevice()} with partially filled arguments.\n   *\n   * @param {Base64} valueBase64 Value in Base64 format.\n   * @param {?TransactionId} transactionId optional `transactionId` which can be used in\n   * {@link #blemanagercanceltransaction|bleManager.cancelTransaction()} function.\n   * @returns {Promise<Characteristic>} Promise which emits this {@link Characteristic}. Latest value may\n   * not be stored inside returned object.\n   */\n  writeWithResponse(valueBase64: Base64, transactionId: ?TransactionId): Promise<Characteristic> {\n    return this._manager._writeCharacteristicWithResponse(this.id, valueBase64, transactionId)\n  }\n\n  /**\n   * {@link #blemanagerwritecharacteristicwithoutresponsefordevice|bleManager.writeCharacteristicWithoutResponseForDevice()} with partially filled arguments.\n   *\n   * @param {Base64} valueBase64 Value in Base64 format.\n   * @param {?TransactionId} transactionId optional `transactionId` which can be used in\n   * {@link #blemanagercanceltransaction|bleManager.cancelTransaction()} function.\n   * @returns {Promise<Characteristic>} Promise which emits this {@link Characteristic}. Latest value may\n   * not be stored inside returned object.\n   */\n  writeWithoutResponse(valueBase64: Base64, transactionId: ?TransactionId): Promise<Characteristic> {\n    return this._manager._writeCharacteristicWithoutResponse(this.id, valueBase64, transactionId)\n  }\n\n  /**\n   * {@link #blemanagermonitorcharacteristicfordevice|bleManager.monitorCharacteristicForDevice()} with partially filled arguments.\n   *\n   * @param {function(error: ?BleError, characteristic: ?Characteristic)} listener callback which emits\n   * this {@link Characteristic} with modified value for each notification.\n   * @param {?TransactionId} transactionId optional `transactionId` which can be used in\n   * @param {?CharacteristicSubscriptionType} subscriptionType [android only] subscription type of the characteristic\n   * {@link #blemanagercanceltransaction|bleManager.cancelTransaction()} function.\n   * @returns {Subscription} Subscription on which `remove()` function can be called to unsubscribe.\n   */\n  monitor(\n    listener: (error: ?BleError, characteristic: ?Characteristic) => void,\n    transactionId: ?TransactionId,\n    subscriptionType: ?CharacteristicSubscriptionType\n  ): Subscription {\n    const commonArgs = [this.id, listener, transactionId]\n    const args = isIOS ? commonArgs : [...commonArgs, subscriptionType]\n    return this._manager._monitorCharacteristic(...args)\n  }\n\n  /**\n   * {@link #blemanagerreaddescriptorfordevice|bleManager.readDescriptorForDevice()} with partially filled arguments.\n   *\n   * @param {UUID} descriptorUUID {@link Descriptor} UUID.\n   * @param {?TransactionId} transactionId optional `transactionId` which can be used in\n   * {@link #blemanagercanceltransaction|cancelTransaction()} function.\n   * @returns {Promise<Descriptor>} Promise which emits first {@link Descriptor} object matching specified\n   * UUID paths. Latest value of {@link Descriptor} will be stored inside returned object.\n   */\n  async readDescriptor(descriptorUUID: UUID, transactionId: ?TransactionId): Promise<Descriptor> {\n    return this._manager._readDescriptorForCharacteristic(this.id, descriptorUUID, transactionId)\n  }\n\n  /**\n   * {@link #blemanagerwritedescriptorfordevice|bleManager.writeDescriptorForDevice()} with partially filled arguments.\n   *\n   * @param {UUID} descriptorUUID Descriptor UUID\n   * @param {Base64} valueBase64 Value to be set coded in Base64\n   * @param {?TransactionId} transactionId Transaction handle used to cancel operation\n   * @returns {Promise<Descriptor>} Descriptor which saved passed value.\n   */\n  async writeDescriptor(descriptorUUID: UUID, valueBase64: Base64, transactionId: ?TransactionId): Promise<Descriptor> {\n    return this._manager._writeDescriptorForCharacteristic(this.id, descriptorUUID, valueBase64, transactionId)\n  }\n}\n"],"mappings":"AACA,YAAY;;AAAA,OAAAA,iBAAA;AAAA,OAAAC,kBAAA;AAAA,OAAAC,eAAA;AAAA,OAAAC,YAAA;AAIZ,SAASC,UAAU;AAWnB,SAASC,KAAK;AAKd,WAAaC,cAAc;EA6DzB,SAAAA,eAAYC,oBAA0C,EAAEC,OAAmB,EAAE;IAAAN,eAAA,OAAAI,cAAA;IAC3EG,MAAM,CAACC,MAAM,CAAC,IAAI,EAAEH,oBAAoB,CAAC;IACzCE,MAAM,CAACE,cAAc,CAAC,IAAI,EAAE,UAAU,EAAE;MAAEC,KAAK,EAAEJ,OAAO;MAAEK,UAAU,EAAE;IAAM,CAAC,CAAC;EAChF;EAAC,OAAAV,YAAA,CAAAG,cAAA;IAAAQ,GAAA;IAAAF,KAAA,EAQD,SAAAG,WAAWA,CAAA,EAA+B;MACxC,OAAO,IAAI,CAACC,QAAQ,CAACC,6BAA6B,CAAC,IAAI,CAACC,EAAE,CAAC;IAC7D;EAAC;IAAAJ,GAAA;IAAAF,KAAA,EAUD,SAAAO,IAAIA,CAACC,aAA6B,EAA2B;MAC3D,OAAO,IAAI,CAACJ,QAAQ,CAACK,mBAAmB,CAAC,IAAI,CAACH,EAAE,EAAEE,aAAa,CAAC;IAClE;EAAC;IAAAN,GAAA;IAAAF,KAAA,EAWD,SAAAU,iBAAiBA,CAACC,WAAmB,EAAEH,aAA6B,EAA2B;MAC7F,OAAO,IAAI,CAACJ,QAAQ,CAACQ,gCAAgC,CAAC,IAAI,CAACN,EAAE,EAAEK,WAAW,EAAEH,aAAa,CAAC;IAC5F;EAAC;IAAAN,GAAA;IAAAF,KAAA,EAWD,SAAAa,oBAAoBA,CAACF,WAAmB,EAAEH,aAA6B,EAA2B;MAChG,OAAO,IAAI,CAACJ,QAAQ,CAACU,mCAAmC,CAAC,IAAI,CAACR,EAAE,EAAEK,WAAW,EAAEH,aAAa,CAAC;IAC/F;EAAC;IAAAN,GAAA;IAAAF,KAAA,EAYD,SAAAe,OAAOA,CACLC,QAAqE,EACrER,aAA6B,EAC7BS,gBAAiD,EACnC;MAAA,IAAAC,cAAA;MACd,IAAMC,UAAU,GAAG,CAAC,IAAI,CAACb,EAAE,EAAEU,QAAQ,EAAER,aAAa,CAAC;MACrD,IAAMY,IAAI,GAAG3B,KAAK,GAAG0B,UAAU,MAAAE,MAAA,CAAOF,UAAU,GAAEF,gBAAgB,EAAC;MACnE,OAAO,CAAAC,cAAA,OAAI,CAACd,QAAQ,EAACkB,sBAAsB,CAAAC,KAAA,CAAAL,cAAA,EAAA7B,kBAAA,CAAI+B,IAAI,EAAC;IACtD;EAAC;IAAAlB,GAAA;IAAAF,KAAA;MAAA,IAAAwB,eAAA,GAAApC,iBAAA,CAWD,WAAqBqC,cAAoB,EAAEjB,aAA6B,EAAuB;QAC7F,OAAO,IAAI,CAACJ,QAAQ,CAACsB,gCAAgC,CAAC,IAAI,CAACpB,EAAE,EAAEmB,cAAc,EAAEjB,aAAa,CAAC;MAC/F,CAAC;MAAA,SAFKmB,cAAcA,CAAAC,EAAA,EAAAC,GAAA;QAAA,OAAAL,eAAA,CAAAD,KAAA,OAAAO,SAAA;MAAA;MAAA,OAAdH,cAAc;IAAA;EAAA;IAAAzB,GAAA;IAAAF,KAAA;MAAA,IAAA+B,gBAAA,GAAA3C,iBAAA,CAYpB,WAAsBqC,cAAoB,EAAEd,WAAmB,EAAEH,aAA6B,EAAuB;QACnH,OAAO,IAAI,CAACJ,QAAQ,CAAC4B,iCAAiC,CAAC,IAAI,CAAC1B,EAAE,EAAEmB,cAAc,EAAEd,WAAW,EAAEH,aAAa,CAAC;MAC7G,CAAC;MAAA,SAFKyB,eAAeA,CAAAC,GAAA,EAAAC,GAAA,EAAAC,GAAA;QAAA,OAAAL,gBAAA,CAAAR,KAAA,OAAAO,SAAA;MAAA;MAAA,OAAfG,eAAe;IAAA;EAAA;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}