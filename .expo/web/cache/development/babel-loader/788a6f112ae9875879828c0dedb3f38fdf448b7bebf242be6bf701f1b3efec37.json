{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport { createNativeStackNavigator } from \"@react-navigation/native-stack\";\nimport { createDrawerNavigator } from \"@react-navigation/drawer\";\nimport { MaterialIcons } from \"@expo/vector-icons\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport { useSafeAreaInsets } from \"react-native-safe-area-context\";\nimport React from \"react\";\nimport { useAuth } from \"../context/AuthContext\";\nimport LoginScreen from \"../screens/LoginScreen\";\nimport RegisterScreen from \"../screens/RegisterScreen\";\nimport DashboardScreen from \"../screens/DashboardScreen\";\nimport AddReadingScreen from \"../screens/AddReadingScreen\";\nimport ChartsScreen from \"../screens/ChartsScreen\";\nimport ProfileSetupScreen from \"../screens/ProfileSetupScreen\";\nimport BiometricSetupScreen from \"../screens/BiometricSetupScreen\";\nimport DeviceConnectionScreen from \"../screens/DeviceConnectionScreen\";\nimport NutritionScreen from \"../screens/NutritionScreen\";\nimport SettingsScreen from \"../screens/SettingsScreen\";\nimport ForgotPasswordScreen from \"../screens/ForgotPasswordScreen\";\nimport CustomDrawer from \"./CustomDrawer\";\nimport { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"react/jsx-runtime\";\nvar Stack = createNativeStackNavigator();\nvar Drawer = createDrawerNavigator();\nfunction MenuButton(_ref) {\n  var navigation = _ref.navigation;\n  return _jsx(TouchableOpacity, {\n    onPress: function onPress() {\n      return navigation.openDrawer();\n    },\n    children: _jsx(MaterialIcons, {\n      name: \"menu\",\n      size: 26,\n      color: \"#fff\",\n      style: {\n        marginLeft: 12\n      }\n    })\n  });\n}\nvar drawerIcon = function drawerIcon(name) {\n  return function (_ref2) {\n    var color = _ref2.color,\n      size = _ref2.size;\n    return _jsx(MaterialIcons, {\n      name: name,\n      color: color,\n      size: size\n    });\n  };\n};\nfunction DrawerRoutes() {\n  var insets = useSafeAreaInsets();\n  return _jsxs(Drawer.Navigator, {\n    drawerContent: function drawerContent(props) {\n      return _jsx(CustomDrawer, _objectSpread(_objectSpread({}, props), {}, {\n        navigation: props.navigation\n      }));\n    },\n    screenOptions: function screenOptions(_ref3) {\n      var _StatusBar$currentHei;\n      var navigation = _ref3.navigation;\n      return {\n        headerStyle: {\n          backgroundColor: \"#2563eb\",\n          elevation: 4,\n          shadowOpacity: 0.2,\n          height: 56 + (Platform.OS === \"android\" ? (_StatusBar$currentHei = StatusBar.currentHeight) != null ? _StatusBar$currentHei : 0 : insets.top)\n        },\n        headerTintColor: \"#fff\",\n        headerTitleStyle: {\n          fontWeight: \"700\",\n          fontSize: 18\n        },\n        headerLeft: function headerLeft() {\n          return _jsx(MenuButton, {\n            navigation: navigation\n          });\n        },\n        drawerActiveBackgroundColor: \"#2563eb\",\n        drawerActiveTintColor: \"#fff\",\n        drawerInactiveTintColor: \"#333\",\n        drawerStyle: {\n          width: 280\n        },\n        sceneContainerStyle: {\n          backgroundColor: \"#f0f6ff\"\n        }\n      };\n    },\n    children: [_jsx(Drawer.Screen, {\n      name: \"Dashboard\",\n      component: DashboardScreen,\n      options: {\n        title: \"Dashboard\",\n        drawerIcon: drawerIcon(\"dashboard\")\n      }\n    }), _jsx(Drawer.Screen, {\n      name: \"AddReading\",\n      component: AddReadingScreen,\n      options: {\n        title: \"Nova MediÃ§Ã£o\",\n        drawerIcon: drawerIcon(\"add-circle-outline\")\n      }\n    }), _jsx(Drawer.Screen, {\n      name: \"DeviceConnection\",\n      component: DeviceConnectionScreen,\n      options: {\n        title: \"Conectar Dispositivo\",\n        drawerIcon: drawerIcon(\"bluetooth\")\n      }\n    }), _jsx(Drawer.Screen, {\n      name: \"Charts\",\n      component: ChartsScreen,\n      options: {\n        title: \"GrÃ¡ficos\",\n        drawerIcon: drawerIcon(\"show-chart\")\n      }\n    }), _jsx(Drawer.Screen, {\n      name: \"Nutrition\",\n      component: NutritionScreen,\n      options: {\n        title: \"AlimentaÃ§Ã£o\",\n        drawerIcon: drawerIcon(\"restaurant-menu\")\n      }\n    }), _jsx(Drawer.Screen, {\n      name: \"Settings\",\n      component: SettingsScreen,\n      options: {\n        title: \"ConfiguraÃ§Ãµes\",\n        drawerIcon: drawerIcon(\"settings\")\n      }\n    }), _jsx(Drawer.Screen, {\n      name: \"ProfileSetup\",\n      component: ProfileSetupScreen,\n      options: {\n        title: \"Perfil\",\n        drawerIcon: drawerIcon(\"person\")\n      }\n    })]\n  });\n}\nexport default function RootNavigator() {\n  var _useAuth = useAuth(),\n    isAuthenticated = _useAuth.isAuthenticated,\n    loading = _useAuth.loading;\n  if (loading) {\n    return _jsx(View, {\n      style: {\n        flex: 1,\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        backgroundColor: \"#f0f6ff\"\n      },\n      children: _jsx(ActivityIndicator, {\n        size: \"large\",\n        color: \"#2563eb\"\n      })\n    });\n  }\n  return _jsx(Stack.Navigator, {\n    screenOptions: {\n      headerShown: false\n    },\n    children: isAuthenticated ? _jsx(Stack.Screen, {\n      name: \"DrawerRoutes\",\n      component: DrawerRoutes\n    }) : _jsxs(_Fragment, {\n      children: [_jsx(Stack.Screen, {\n        name: \"Login\",\n        component: LoginScreen\n      }), _jsx(Stack.Screen, {\n        name: \"Register\",\n        component: RegisterScreen\n      }), _jsx(Stack.Screen, {\n        name: \"ForgotPassword\",\n        component: ForgotPasswordScreen\n      }), _jsx(Stack.Screen, {\n        name: \"BiometricSetup\",\n        component: BiometricSetupScreen\n      }), _jsx(Stack.Screen, {\n        name: \"ProfileSetup\",\n        component: ProfileSetupScreen\n      })]\n    })\n  });\n}","map":{"version":3,"names":["createNativeStackNavigator","createDrawerNavigator","MaterialIcons","TouchableOpacity","ActivityIndicator","View","Platform","StatusBar","useSafeAreaInsets","React","useAuth","LoginScreen","RegisterScreen","DashboardScreen","AddReadingScreen","ChartsScreen","ProfileSetupScreen","BiometricSetupScreen","DeviceConnectionScreen","NutritionScreen","SettingsScreen","ForgotPasswordScreen","CustomDrawer","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","Stack","Drawer","MenuButton","_ref","navigation","onPress","openDrawer","children","name","size","color","style","marginLeft","drawerIcon","_ref2","DrawerRoutes","insets","Navigator","drawerContent","props","_objectSpread","screenOptions","_ref3","_StatusBar$currentHei","headerStyle","backgroundColor","elevation","shadowOpacity","height","OS","currentHeight","top","headerTintColor","headerTitleStyle","fontWeight","fontSize","headerLeft","drawerActiveBackgroundColor","drawerActiveTintColor","drawerInactiveTintColor","drawerStyle","width","sceneContainerStyle","Screen","component","options","title","RootNavigator","_useAuth","isAuthenticated","loading","flex","justifyContent","alignItems","headerShown"],"sources":["C:/Users/UsuÃ¡rio/Desktop/glucocare/src/navigation/RootNavigator.tsx"],"sourcesContent":["// src/navigation/RootNavigator.tsx (VersÃ£o Final Consolidada)\n\nimport { createNativeStackNavigator } from \"@react-navigation/native-stack\";\nimport { createDrawerNavigator, DrawerNavigationProp } from \"@react-navigation/drawer\";\nimport { MaterialIcons } from \"@expo/vector-icons\";\nimport { TouchableOpacity, ActivityIndicator, View, Platform, StatusBar } from \"react-native\";\nimport { useSafeAreaInsets } from \"react-native-safe-area-context\";\nimport React from \"react\"; \n\n// ðŸš€ ESSENCIAL: Importa o hook de AuthContext\nimport { useAuth } from \"../context/AuthContext\";\n\n// Telas\nimport LoginScreen from \"../screens/LoginScreen\";\nimport RegisterScreen from \"../screens/RegisterScreen\";\nimport DashboardScreen from \"../screens/DashboardScreen\";\nimport AddReadingScreen from \"../screens/AddReadingScreen\";\nimport ChartsScreen from \"../screens/ChartsScreen\";\nimport ProfileSetupScreen from \"../screens/ProfileSetupScreen\";\nimport BiometricSetupScreen from \"../screens/BiometricSetupScreen\";\nimport DeviceConnectionScreen from \"../screens/DeviceConnectionScreen\";\nimport NutritionScreen from \"../screens/NutritionScreen\";\n// âœ… CORREÃ‡ÃƒO: Removido o 'screens/' duplicado\nimport SettingsScreen from \"../screens/SettingsScreen\"; \nimport ForgotPasswordScreen from \"../screens/ForgotPasswordScreen\";\n\n// Drawer customizado\nimport CustomDrawer from \"./CustomDrawer\";\n\n// --- TIPAGENS GLOBAIS ---\n\ntype DrawerParamList = {\n    Dashboard: undefined;\n    AddReading: undefined;\n    DeviceConnection: undefined;\n    Charts: undefined;\n    Nutrition: undefined;\n    Settings: undefined;\n    ProfileSetup: undefined;\n};\n\nexport type RootStackParamList = {\n    Login: undefined;\n    Register: undefined;\n    BiometricSetup: undefined;\n    ProfileSetup: undefined;\n    DrawerRoutes: undefined;\n    ForgotPassword: undefined;\n};\n\nconst Stack = createNativeStackNavigator<RootStackParamList>();\nconst Drawer = createDrawerNavigator<DrawerParamList>();\n\n// --- COMPONENTES AUXILIARES ---\n\ntype MenuButtonProps = {\n    // Mantemos este tipo, pois o componente realmente sÃ³ precisa da navegaÃ§Ã£o do Drawer\n    navigation: DrawerNavigationProp<DrawerParamList>;\n};\n\nfunction MenuButton({ navigation }: MenuButtonProps) {\n    return (\n        <TouchableOpacity onPress={() => navigation.openDrawer()}>\n            <MaterialIcons name=\"menu\" size={26} color=\"#fff\" style={{ marginLeft: 12 }} />\n        </TouchableOpacity>\n    );\n}\n\n// Tipagem e Helper para Ã­cones do drawer\ntype IconName =\n    | \"dashboard\"\n    | \"add-circle-outline\"\n    | \"bluetooth\"\n    | \"show-chart\"\n    | \"restaurant-menu\"\n    | \"settings\"\n    | \"person\";\n\nconst drawerIcon = (name: IconName) => ({ color, size }: { color: string; size: number }) => (\n    <MaterialIcons name={name} color={color} size={size} />\n);\n\n// --- ROTAS DO DRAWER ---\n\nfunction DrawerRoutes() { \n    const insets = useSafeAreaInsets();\n\n    return (\n        <Drawer.Navigator\n            drawerContent={(props) => (\n                <CustomDrawer\n                    {...props}\n                    // âœ… CORREÃ‡ÃƒO APLICADA: Repasse a navegaÃ§Ã£o diretamente.\n                    // O CustomDrawer deve aceitar DrawerContentComponentProps.\n                    navigation={props.navigation} \n                />\n            )}\n            screenOptions={({ navigation }) => ({\n                headerStyle: {\n                    backgroundColor: \"#2563eb\",\n                    elevation: 4,\n                    shadowOpacity: 0.2,\n                    height: 56 + (Platform.OS === \"android\" ? StatusBar.currentHeight ?? 0 : insets.top),\n                },\n                headerTintColor: \"#fff\",\n                headerTitleStyle: { fontWeight: \"700\", fontSize: 18 },\n                \n                // âœ… CORREÃ‡ÃƒO APLICADA: Repasse a navegaÃ§Ã£o diretamente.\n                headerLeft: () => <MenuButton navigation={navigation} />,\n                \n                drawerActiveBackgroundColor: \"#2563eb\",\n                drawerActiveTintColor: \"#fff\",\n                drawerInactiveTintColor: \"#333\",\n                drawerStyle: { width: 280 },\n                sceneContainerStyle: { backgroundColor: \"#f0f6ff\" },\n            })}\n        >\n            <Drawer.Screen name=\"Dashboard\" component={DashboardScreen} options={{ title: \"Dashboard\", drawerIcon: drawerIcon(\"dashboard\") }} />\n            <Drawer.Screen name=\"AddReading\" component={AddReadingScreen} options={{ title: \"Nova MediÃ§Ã£o\", drawerIcon: drawerIcon(\"add-circle-outline\") }} />\n            <Drawer.Screen name=\"DeviceConnection\" component={DeviceConnectionScreen} options={{ title: \"Conectar Dispositivo\", drawerIcon: drawerIcon(\"bluetooth\") }} />\n            <Drawer.Screen name=\"Charts\" component={ChartsScreen} options={{ title: \"GrÃ¡ficos\", drawerIcon: drawerIcon(\"show-chart\") }} />\n            <Drawer.Screen name=\"Nutrition\" component={NutritionScreen} options={{ title: \"AlimentaÃ§Ã£o\", drawerIcon: drawerIcon(\"restaurant-menu\") }} />\n            <Drawer.Screen name=\"Settings\" component={SettingsScreen} options={{ title: \"ConfiguraÃ§Ãµes\", drawerIcon: drawerIcon(\"settings\") }} />\n            <Drawer.Screen name=\"ProfileSetup\" component={ProfileSetupScreen} options={{ title: \"Perfil\", drawerIcon: drawerIcon(\"person\") }} />\n        </Drawer.Navigator>\n    );\n}\n\n// --- NAVEGADOR PRINCIPAL (Auth & App Flow) ---\n\nexport default function RootNavigator() {\n    const { isAuthenticated, loading } = useAuth();\n    \n    if (loading) {\n        return (\n            <View\n                style={{\n                    flex: 1,\n                    justifyContent: \"center\",\n                    alignItems: \"center\",\n                    backgroundColor: \"#f0f6ff\",\n                }}\n            >\n                <ActivityIndicator size=\"large\" color=\"#2563eb\" />\n            </View>\n        );\n    }\n\n    return (\n        <Stack.Navigator screenOptions={{ headerShown: false }}>\n            {isAuthenticated ? (\n                // UsuÃ¡rio Autenticado\n                <Stack.Screen name=\"DrawerRoutes\" component={DrawerRoutes} />\n            ) : (\n                // UsuÃ¡rio NÃ£o Autenticado\n                <>\n                    <Stack.Screen name=\"Login\" component={LoginScreen} />\n                    <Stack.Screen name=\"Register\" component={RegisterScreen} />\n                    <Stack.Screen name=\"ForgotPassword\" component={ForgotPasswordScreen} />\n                    <Stack.Screen name=\"BiometricSetup\" component={BiometricSetupScreen} />\n                    <Stack.Screen name=\"ProfileSetup\" component={ProfileSetupScreen} />\n                </>\n            )}\n        </Stack.Navigator>\n    );\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}