{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport React, { createContext, useContext, useEffect, useState } from 'react';\nimport { onAuthStateChanged, signInWithEmailAndPassword, createUserWithEmailAndPassword, signOut } from 'firebase/auth';\nimport { auth } from \"../config/firebase\";\nimport { initDB, saveOrUpdateUser, getUser } from \"../services/dbService\";\nimport * as WebBrowser from 'expo-web-browser';\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nWebBrowser.maybeCompleteAuthSession();\nvar AuthContext = createContext(undefined);\nfunction handleUserInitialization(_x, _x2) {\n  return _handleUserInitialization.apply(this, arguments);\n}\nfunction _handleUserInitialization() {\n  _handleUserInitialization = _asyncToGenerator(function* (firebaseUser, name) {\n    try {\n      var existingProfile = yield getUser();\n      if (existingProfile && existingProfile.id === firebaseUser.uid) {\n        console.log(\"Perfil local encontrado.\");\n        return existingProfile;\n      }\n      var newProfile = {\n        id: firebaseUser.uid,\n        name: name || firebaseUser.displayName || 'Usuário GlucoCare',\n        email: firebaseUser.email || '',\n        googleId: '',\n        onboardingCompleted: false,\n        biometricEnabled: false,\n        weight: null,\n        height: null,\n        birthDate: '',\n        condition: '',\n        restriction: '',\n        syncedAt: null\n      };\n      var savedProfile = yield saveOrUpdateUser(newProfile);\n      console.log(\"Novo perfil criado e sincronizado.\");\n      return savedProfile;\n    } catch (error) {\n      console.error(\"Erro no handleUserInitialization (SQLite/Firestore):\", error);\n      Alert.alert(\"Erro de Dados\", \"Não foi possível carregar ou criar o perfil do usuário localmente. Tente novamente.\");\n      return null;\n    }\n  });\n  return _handleUserInitialization.apply(this, arguments);\n}\nexport var AuthProvider = function AuthProvider(_ref) {\n  var children = _ref.children;\n  var _useState = useState(null),\n    _useState2 = _slicedToArray(_useState, 2),\n    user = _useState2[0],\n    setUser = _useState2[1];\n  var _useState3 = useState(null),\n    _useState4 = _slicedToArray(_useState3, 2),\n    profile = _useState4[0],\n    setProfile = _useState4[1];\n  var _useState5 = useState(true),\n    _useState6 = _slicedToArray(_useState5, 2),\n    isLoading = _useState6[0],\n    setIsLoading = _useState6[1];\n  useEffect(function () {\n    initDB().catch(function (err) {\n      return console.error(\"Erro fatal ao inicializar o DB local:\", err);\n    });\n  }, []);\n  useEffect(function () {\n    var unsubscribe = onAuthStateChanged(auth, function () {\n      var _ref2 = _asyncToGenerator(function* (firebaseUser) {\n        if (firebaseUser) {\n          try {\n            var userProfile = yield handleUserInitialization(firebaseUser);\n            if (userProfile) {\n              setUser(firebaseUser);\n              setProfile(userProfile);\n            } else {\n              yield signOut(auth);\n            }\n          } catch (error) {\n            console.error(\"Erro ao carregar perfil após login:\", error);\n            yield signOut(auth);\n          }\n        } else {\n          setUser(null);\n          setProfile(null);\n        }\n        setIsLoading(false);\n      });\n      return function (_x3) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n    return function () {\n      return unsubscribe();\n    };\n  }, []);\n  var login = function () {\n    var _ref3 = _asyncToGenerator(function* (email, password) {\n      setIsLoading(true);\n      try {\n        yield signInWithEmailAndPassword(auth, email, password);\n      } catch (error) {\n        console.error(\"Erro ao fazer login:\", error);\n        setIsLoading(false);\n        throw error;\n      }\n    });\n    return function login(_x4, _x5) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n  var register = function () {\n    var _ref4 = _asyncToGenerator(function* (email, password, name) {\n      setIsLoading(true);\n      try {\n        var userCredential = yield createUserWithEmailAndPassword(auth, email, password);\n        var userProfile = yield handleUserInitialization(userCredential.user, name);\n        setUser(userCredential.user);\n        setProfile(userProfile);\n      } catch (error) {\n        console.error(\"Erro ao registrar:\", error);\n        setIsLoading(false);\n        throw error;\n      }\n    });\n    return function register(_x6, _x7, _x8) {\n      return _ref4.apply(this, arguments);\n    };\n  }();\n  var updateProfileLocally = function updateProfileLocally(updatedProfile) {\n    setProfile(updatedProfile);\n  };\n  var loginWithGoogle = function () {\n    var _ref5 = _asyncToGenerator(function* () {\n      console.warn(\"Google Auth não implementado.\");\n    });\n    return function loginWithGoogle() {\n      return _ref5.apply(this, arguments);\n    };\n  }();\n  var logout = function () {\n    var _ref6 = _asyncToGenerator(function* () {\n      try {\n        yield signOut(auth);\n      } catch (error) {\n        console.error(\"Erro ao fazer logout:\", error);\n        throw error;\n      }\n    });\n    return function logout() {\n      return _ref6.apply(this, arguments);\n    };\n  }();\n  var isAuthenticated = !!user && !!profile;\n  return _jsxs(AuthContext.Provider, {\n    value: {\n      user: user,\n      profile: profile,\n      isAuthenticated: isAuthenticated,\n      isLoading: isLoading,\n      login: login,\n      register: register,\n      logout: logout,\n      loginWithGoogle: loginWithGoogle,\n      updateProfileLocally: updateProfileLocally\n    },\n    children: [\"\\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \", children, \"\\xA0 \\xA0 \\xA0 \\xA0 \"]\n  });\n};\nexport var useAuth = function useAuth() {\n  var context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth deve ser usado dentro de um AuthProvider');\n  }\n  return context;\n};","map":{"version":3,"names":["React","createContext","useContext","useEffect","useState","onAuthStateChanged","signInWithEmailAndPassword","createUserWithEmailAndPassword","signOut","auth","initDB","saveOrUpdateUser","getUser","WebBrowser","Alert","jsxs","_jsxs","maybeCompleteAuthSession","AuthContext","undefined","handleUserInitialization","_x","_x2","_handleUserInitialization","apply","arguments","_asyncToGenerator","firebaseUser","name","existingProfile","id","uid","console","log","newProfile","displayName","email","googleId","onboardingCompleted","biometricEnabled","weight","height","birthDate","condition","restriction","syncedAt","savedProfile","error","alert","AuthProvider","_ref","children","_useState","_useState2","_slicedToArray","user","setUser","_useState3","_useState4","profile","setProfile","_useState5","_useState6","isLoading","setIsLoading","catch","err","unsubscribe","_ref2","userProfile","_x3","login","_ref3","password","_x4","_x5","register","_ref4","userCredential","_x6","_x7","_x8","updateProfileLocally","updatedProfile","loginWithGoogle","_ref5","warn","logout","_ref6","isAuthenticated","Provider","value","useAuth","context","Error"],"sources":["C:/Users/Usuário/Desktop/glucocare/src/context/AuthContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useEffect, useState, ReactNode } from 'react';\nimport { User as FirebaseUser, onAuthStateChanged, signInWithEmailAndPassword, createUserWithEmailAndPassword, signOut } from 'firebase/auth';\n// ✅ IMPORTAÇÕES ESSENCIAIS\nimport { auth } from '../config/firebase'; \nimport { initDB, saveOrUpdateUser, getUser, UserProfile } from '../services/dbService'; // Serviço de DB\nimport * as Google from 'expo-auth-session/providers/google';\nimport * as WebBrowser from 'expo-web-browser';\nimport { Alert } from 'react-native'; // Usaremos Alert para erros simples no contexto\n\nWebBrowser.maybeCompleteAuthSession();\n\n// Definição de Tipos\ninterface AuthContextType {\n    user: FirebaseUser | null;\n    profile: UserProfile | null; // O perfil local, sincronizado\n    isAuthenticated: boolean;\n    isLoading: boolean; // Controla o carregamento inicial (Corrigido para ser consistente)\n    login: (email: string, password: string) => Promise<void>;\n    register: (email: string, password: string, name: string) => Promise<void>;\n    logout: () => Promise<void>;\n    loginWithGoogle: () => Promise<void>; // Assinatura mantida para futuras implementações\n    // ✅ Novo método para atualizar o perfil após o onboarding/edição de dados\n    updateProfileLocally: (updatedProfile: UserProfile) => void;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\n// -------------------------------------------------------------\n// FUNÇÃO AUXILIAR DE SINCRONIZAÇÃO E CRIAÇÃO DE PERFIL\n// -------------------------------------------------------------\n\n/**\n * Cria/carrega o perfil local (SQLite) e sincroniza com o Firestore após a autenticação.\n */\nasync function handleUserInitialization(firebaseUser: FirebaseUser, name?: string): Promise<UserProfile | null> {\n    try {\n        const existingProfile = await getUser();\n\n        if (existingProfile && existingProfile.id === firebaseUser.uid) {\n            // Se o perfil local existe E pertence ao usuário atual, usa-o.\n            console.log(\"Perfil local encontrado.\");\n            return existingProfile;\n        }\n\n        // Caso contrário, cria um novo perfil e salva/sincroniza.\n        const newProfile: UserProfile = {\n            id: firebaseUser.uid,\n            name: name || firebaseUser.displayName || 'Usuário GlucoCare',\n            email: firebaseUser.email || '',\n            googleId: '', \n            onboardingCompleted: false, // Inicia como falso\n            biometricEnabled: false,\n            weight: null,\n            height: null,\n            birthDate: '',\n            condition: '',\n            restriction: '',\n            syncedAt: null,\n        };\n        // Salva no SQLite E sincroniza com o Firestore\n        const savedProfile = await saveOrUpdateUser(newProfile); \n        console.log(\"Novo perfil criado e sincronizado.\");\n        return savedProfile as UserProfile;\n\n    } catch (error) {\n        console.error(\"Erro no handleUserInitialization (SQLite/Firestore):\", error);\n        Alert.alert(\"Erro de Dados\", \"Não foi possível carregar ou criar o perfil do usuário localmente. Tente novamente.\");\n        return null;\n    }\n}\n\n// -------------------------------------------------------------\n// PROVIDER\n// -------------------------------------------------------------\n\ninterface AuthProviderProps {\n    children: ReactNode;\n}\n\nexport const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {\n    const [user, setUser] = useState<FirebaseUser | null>(null);\n    const [profile, setProfile] = useState<UserProfile | null>(null);\n    const [isLoading, setIsLoading] = useState(true); // Controla o carregamento inicial\n\n    // 1. Inicializa o DB Local (SQLite)\n    useEffect(() => {\n        initDB().catch(err => console.error(\"Erro fatal ao inicializar o DB local:\", err));\n    }, []);\n\n    // 2. Listener de Autenticação do Firebase (Detecta Login/Logout)\n    useEffect(() => {\n        const unsubscribe = onAuthStateChanged(auth, async (firebaseUser) => {\n            if (firebaseUser) {\n                try {\n                    // Se autenticado no Firebase, sincroniza/carrega o perfil local\n                    const userProfile = await handleUserInitialization(firebaseUser);\n                    \n                    if (userProfile) {\n                        setUser(firebaseUser);\n                        setProfile(userProfile);\n                    } else {\n                        // Se falhar ao obter o perfil, forçamos o logout\n                        await signOut(auth);\n                    }\n                } catch (error) {\n                    console.error(\"Erro ao carregar perfil após login:\", error);\n                    await signOut(auth); // Força logout em caso de erro de DB\n                }\n            } else {\n                // Usuário deslogado\n                setUser(null);\n                setProfile(null);\n            }\n            // Desliga o loading inicial após a primeira checagem de auth\n            setIsLoading(false); \n        });\n\n        return () => unsubscribe();\n    }, []);\n\n    // Implementação das funções de autenticação\n    const login = async (email: string, password: string) => {\n        setIsLoading(true);\n        try {\n            // O Firebase Auth faz o login\n            await signInWithEmailAndPassword(auth, email, password);\n            // O onAuthStateChanged (acima) cuidará de carregar o perfil e setar o estado\n        } catch (error: any) {\n            console.error(\"Erro ao fazer login:\", error);\n            setIsLoading(false); // Desliga o loading em caso de falha\n            // Re-throw o erro para que o componente LoginScreen possa lidar com a mensagem de erro\n            throw error; \n        }\n    };\n\n    const register = async (email: string, password: string, name: string) => {\n        setIsLoading(true);\n        try {\n            // 1. Cria o usuário no Firebase Auth\n            const userCredential = await createUserWithEmailAndPassword(auth, email, password);\n            \n            // 2. Cria o perfil no SQLite e Firestore (passando o nome inicial)\n            const userProfile = await handleUserInitialization(userCredential.user, name);\n            \n            // 3. Atualiza o estado local\n            setUser(userCredential.user);\n            setProfile(userProfile);\n            \n        } catch (error: any) {\n            console.error(\"Erro ao registrar:\", error);\n            setIsLoading(false); // Desliga o loading em caso de falha\n            throw error;\n        }\n    };\n    \n    // Funções de Perfil\n    const updateProfileLocally = (updatedProfile: UserProfile) => {\n        setProfile(updatedProfile);\n        // Não precisamos chamar saveOrUpdateUser aqui,\n        // pois a função que chama updateProfileLocally (ex: ProfileScreen)\n        // já deve ter chamado saveOrUpdateUser antes.\n    };\n    \n\n    const loginWithGoogle = async () => {\n        // Implementação do Google Sign-In viria aqui.\n        // Após a autenticação bem-sucedida, o onAuthStateChanged é acionado\n        // e chama handleUserInitialization.\n        console.warn(\"Google Auth não implementado.\");\n    };\n\n    const logout = async () => {\n        try {\n            await signOut(auth);\n            // O onAuthStateChanged (acima) cuidará de resetar user/profile e isLoading\n        } catch (error) {\n            console.error(\"Erro ao fazer logout:\", error);\n            throw error;\n        }\n    };\n\n    // A autenticação é válida se houver um usuário do Firebase E um perfil local carregado\n    const isAuthenticated = !!user && !!profile;\n\n    return (\n        <AuthContext.Provider value={{ user, profile, isAuthenticated, isLoading, login, register, logout, loginWithGoogle, updateProfileLocally }}>\n            {children}\n        </AuthContext.Provider>\n    );\n};\n\nexport const useAuth = () => {\n    const context = useContext(AuthContext);\n    if (context === undefined) {\n        throw new Error('useAuth deve ser usado dentro de um AuthProvider');\n    }\n    return context;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}