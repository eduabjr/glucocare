{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _wrapNativeSuper from \"@babel/runtime/helpers/wrapNativeSuper\";\nvar _BleErrorCodeMessage;\nfunction _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }\nfunction _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }\nimport { fillStringWithArguments } from \"./Utils\";\nexport var BleError = function (_Error) {\n  function BleError(nativeBleError, errorMessageMapping) {\n    var _this;\n    _classCallCheck(this, BleError);\n    _this = _callSuper(this, BleError);\n    _this.message = errorMessageMapping[BleErrorCode.UnknownError];\n    if (typeof nativeBleError === 'string') {\n      _this.errorCode = BleErrorCode.UnknownError;\n      _this.attErrorCode = null;\n      _this.iosErrorCode = null;\n      _this.androidErrorCode = null;\n      _this.reason = nativeBleError;\n    } else {\n      var message = errorMessageMapping[nativeBleError.errorCode];\n      if (message) {\n        _this.message = fillStringWithArguments(message, nativeBleError);\n      }\n      _this.errorCode = nativeBleError.errorCode;\n      _this.attErrorCode = nativeBleError.attErrorCode;\n      _this.iosErrorCode = nativeBleError.iosErrorCode;\n      _this.androidErrorCode = nativeBleError.androidErrorCode;\n      _this.reason = nativeBleError.reason;\n    }\n    _this.name = 'BleError';\n    return _this;\n  }\n  _inherits(BleError, _Error);\n  return _createClass(BleError);\n}(_wrapNativeSuper(Error));\nexport function parseBleError(errorMessage, errorMessageMapping) {\n  var bleError;\n  var errorMapping = errorMessageMapping ? errorMessageMapping : BleErrorCodeMessage;\n  try {\n    var nativeBleError = JSON.parse(errorMessage);\n    bleError = new BleError(nativeBleError, errorMapping);\n  } catch (parseError) {\n    bleError = new BleError(errorMessage, errorMapping);\n  }\n  return bleError;\n}\nexport var BleErrorCode = {\n  UnknownError: 0,\n  BluetoothManagerDestroyed: 1,\n  OperationCancelled: 2,\n  OperationTimedOut: 3,\n  OperationStartFailed: 4,\n  InvalidIdentifiers: 5,\n  BluetoothUnsupported: 100,\n  BluetoothUnauthorized: 101,\n  BluetoothPoweredOff: 102,\n  BluetoothInUnknownState: 103,\n  BluetoothResetting: 104,\n  BluetoothStateChangeFailed: 105,\n  DeviceConnectionFailed: 200,\n  DeviceDisconnected: 201,\n  DeviceRSSIReadFailed: 202,\n  DeviceAlreadyConnected: 203,\n  DeviceNotFound: 204,\n  DeviceNotConnected: 205,\n  DeviceMTUChangeFailed: 206,\n  ServicesDiscoveryFailed: 300,\n  IncludedServicesDiscoveryFailed: 301,\n  ServiceNotFound: 302,\n  ServicesNotDiscovered: 303,\n  CharacteristicsDiscoveryFailed: 400,\n  CharacteristicWriteFailed: 401,\n  CharacteristicReadFailed: 402,\n  CharacteristicNotifyChangeFailed: 403,\n  CharacteristicNotFound: 404,\n  CharacteristicsNotDiscovered: 405,\n  CharacteristicInvalidDataFormat: 406,\n  DescriptorsDiscoveryFailed: 500,\n  DescriptorWriteFailed: 501,\n  DescriptorReadFailed: 502,\n  DescriptorNotFound: 503,\n  DescriptorsNotDiscovered: 504,\n  DescriptorInvalidDataFormat: 505,\n  DescriptorWriteNotAllowed: 506,\n  ScanStartFailed: 600,\n  LocationServicesDisabled: 601\n};\nexport var BleErrorCodeMessage = (_BleErrorCodeMessage = {}, _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_BleErrorCodeMessage, BleErrorCode.UnknownError, 'Unknown error occurred. This is probably a bug! Check reason property.'), BleErrorCode.BluetoothManagerDestroyed, 'BleManager was destroyed'), BleErrorCode.OperationCancelled, 'Operation was cancelled'), BleErrorCode.OperationTimedOut, 'Operation timed out'), BleErrorCode.OperationStartFailed, 'Operation was rejected'), BleErrorCode.InvalidIdentifiers, 'Invalid UUIDs or IDs were passed: {internalMessage}'), BleErrorCode.BluetoothUnsupported, 'BluetoothLE is unsupported on this device'), BleErrorCode.BluetoothUnauthorized, 'Device is not authorized to use BluetoothLE'), BleErrorCode.BluetoothPoweredOff, 'BluetoothLE is powered off'), BleErrorCode.BluetoothInUnknownState, 'BluetoothLE is in unknown state'), _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_BleErrorCodeMessage, BleErrorCode.BluetoothResetting, 'BluetoothLE is resetting'), BleErrorCode.BluetoothStateChangeFailed, 'Bluetooth state change failed'), BleErrorCode.DeviceConnectionFailed, 'Device {deviceID} connection failed'), BleErrorCode.DeviceDisconnected, 'Device {deviceID} was disconnected'), BleErrorCode.DeviceRSSIReadFailed, 'RSSI read failed for device {deviceID}'), BleErrorCode.DeviceAlreadyConnected, 'Device {deviceID} is already connected'), BleErrorCode.DeviceNotFound, 'Device {deviceID} not found'), BleErrorCode.DeviceNotConnected, 'Device {deviceID} is not connected'), BleErrorCode.DeviceMTUChangeFailed, 'Device {deviceID} could not change MTU size'), BleErrorCode.ServicesDiscoveryFailed, 'Services discovery failed for device {deviceID}'), _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_BleErrorCodeMessage, BleErrorCode.IncludedServicesDiscoveryFailed, 'Included services discovery failed for device {deviceID} and service: {serviceUUID}'), BleErrorCode.ServiceNotFound, 'Service {serviceUUID} for device {deviceID} not found'), BleErrorCode.ServicesNotDiscovered, 'Services not discovered for device {deviceID}'), BleErrorCode.CharacteristicsDiscoveryFailed, 'Characteristic discovery failed for device {deviceID} and service {serviceUUID}'), BleErrorCode.CharacteristicWriteFailed, 'Characteristic {characteristicUUID} write failed for device {deviceID} and service {serviceUUID}'), BleErrorCode.CharacteristicReadFailed, 'Characteristic {characteristicUUID} read failed for device {deviceID} and service {serviceUUID}'), BleErrorCode.CharacteristicNotifyChangeFailed, 'Characteristic {characteristicUUID} notify change failed for device {deviceID} and service {serviceUUID}'), BleErrorCode.CharacteristicNotFound, 'Characteristic {characteristicUUID} not found'), BleErrorCode.CharacteristicsNotDiscovered, 'Characteristics not discovered for device {deviceID} and service {serviceUUID}'), BleErrorCode.CharacteristicInvalidDataFormat, 'Cannot write to characteristic {characteristicUUID} with invalid data format: {internalMessage}'), _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_BleErrorCodeMessage, BleErrorCode.DescriptorsDiscoveryFailed, 'Descriptor {descriptorUUID} discovery failed for device {deviceID}, service {serviceUUID} and characteristic {characteristicUUID}'), BleErrorCode.DescriptorWriteFailed, 'Descriptor {descriptorUUID} write failed for device {deviceID}, service {serviceUUID} and characteristic {characteristicUUID}'), BleErrorCode.DescriptorReadFailed, 'Descriptor {descriptorUUID} read failed for device {deviceID}, service {serviceUUID} and characteristic {characteristicUUID}'), BleErrorCode.DescriptorNotFound, 'Descriptor {descriptorUUID} not found'), BleErrorCode.DescriptorsNotDiscovered, 'Descriptors not discovered for device {deviceID}, service {serviceUUID} and characteristic {characteristicUUID}'), BleErrorCode.DescriptorInvalidDataFormat, 'Cannot write to descriptor {descriptorUUID} with invalid data format: {internalMessage}'), BleErrorCode.DescriptorWriteNotAllowed, \"Cannot write to descriptor {descriptorUUID}. It's not allowed by iOS and therefore forbidden on Android as well.\"), BleErrorCode.ScanStartFailed, 'Cannot start scanning operation'), BleErrorCode.LocationServicesDisabled, 'Location services are disabled'));\nexport var BleATTErrorCode = {\n  Success: 0,\n  InvalidHandle: 1,\n  ReadNotPermitted: 2,\n  WriteNotPermitted: 3,\n  InvalidPdu: 4,\n  InsufficientAuthentication: 5,\n  RequestNotSupported: 6,\n  InvalidOffset: 7,\n  InsufficientAuthorization: 8,\n  PrepareQueueFull: 9,\n  AttributeNotFound: 10,\n  AttributeNotLong: 11,\n  InsufficientEncryptionKeySize: 12,\n  InvalidAttributeValueLength: 13,\n  UnlikelyError: 14,\n  InsufficientEncryption: 15,\n  UnsupportedGroupType: 16,\n  InsufficientResources: 17\n};\nexport var BleIOSErrorCode = {\n  Unknown: 0,\n  InvalidParameters: 1,\n  InvalidHandle: 2,\n  NotConnected: 3,\n  OutOfSpace: 4,\n  OperationCancelled: 5,\n  ConnectionTimeout: 6,\n  PeripheralDisconnected: 7,\n  UuidNotAllowed: 8,\n  AlreadyAdvertising: 9,\n  ConnectionFailed: 10,\n  ConnectionLimitReached: 11,\n  UnknownDevice: 12\n};\nexport var BleAndroidErrorCode = {\n  NoResources: 0x80,\n  InternalError: 0x81,\n  WrongState: 0x82,\n  DbFull: 0x83,\n  Busy: 0x84,\n  Error: 0x85,\n  CmdStarted: 0x86,\n  IllegalParameter: 0x87,\n  Pending: 0x88,\n  AuthFail: 0x89,\n  More: 0x8a,\n  InvalidCfg: 0x8b,\n  ServiceStarted: 0x8c,\n  EncrypedNoMitm: 0x8d,\n  NotEncrypted: 0x8e,\n  Congested: 0x8f\n};","map":{"version":3,"names":["fillStringWithArguments","BleError","_Error","nativeBleError","errorMessageMapping","_this","_classCallCheck","_callSuper","message","BleErrorCode","UnknownError","errorCode","attErrorCode","iosErrorCode","androidErrorCode","reason","name","_inherits","_createClass","_wrapNativeSuper","Error","parseBleError","errorMessage","bleError","errorMapping","BleErrorCodeMessage","JSON","parse","parseError","BluetoothManagerDestroyed","OperationCancelled","OperationTimedOut","OperationStartFailed","InvalidIdentifiers","BluetoothUnsupported","BluetoothUnauthorized","BluetoothPoweredOff","BluetoothInUnknownState","BluetoothResetting","BluetoothStateChangeFailed","DeviceConnectionFailed","DeviceDisconnected","DeviceRSSIReadFailed","DeviceAlreadyConnected","DeviceNotFound","DeviceNotConnected","DeviceMTUChangeFailed","ServicesDiscoveryFailed","IncludedServicesDiscoveryFailed","ServiceNotFound","ServicesNotDiscovered","CharacteristicsDiscoveryFailed","CharacteristicWriteFailed","CharacteristicReadFailed","CharacteristicNotifyChangeFailed","CharacteristicNotFound","CharacteristicsNotDiscovered","CharacteristicInvalidDataFormat","DescriptorsDiscoveryFailed","DescriptorWriteFailed","DescriptorReadFailed","DescriptorNotFound","DescriptorsNotDiscovered","DescriptorInvalidDataFormat","DescriptorWriteNotAllowed","ScanStartFailed","LocationServicesDisabled","_BleErrorCodeMessage","_defineProperty","BleATTErrorCode","Success","InvalidHandle","ReadNotPermitted","WriteNotPermitted","InvalidPdu","InsufficientAuthentication","RequestNotSupported","InvalidOffset","InsufficientAuthorization","PrepareQueueFull","AttributeNotFound","AttributeNotLong","InsufficientEncryptionKeySize","InvalidAttributeValueLength","UnlikelyError","InsufficientEncryption","UnsupportedGroupType","InsufficientResources","BleIOSErrorCode","Unknown","InvalidParameters","NotConnected","OutOfSpace","ConnectionTimeout","PeripheralDisconnected","UuidNotAllowed","AlreadyAdvertising","ConnectionFailed","ConnectionLimitReached","UnknownDevice","BleAndroidErrorCode","NoResources","InternalError","WrongState","DbFull","Busy","CmdStarted","IllegalParameter","Pending","AuthFail","More","InvalidCfg","ServiceStarted","EncrypedNoMitm","NotEncrypted","Congested"],"sources":["C:/Users/Usuário/Desktop/glucocare/node_modules/react-native-ble-plx/src/BleError.js"],"sourcesContent":["// @flow\nimport { fillStringWithArguments } from './Utils'\nimport type { BleErrorCodeMessageMapping } from './TypeDefinition'\n\n/**\n * BleError is an error class which is guaranteed to be thrown by all functions of this\n * library. It contains additional properties which help to identify problems in\n * platform independent way.\n */\nexport class BleError extends Error {\n  /**\n   * Platform independent error code. Possible values are defined in {@link BleErrorCode}.\n   */\n  errorCode: $Values<typeof BleErrorCode>\n  /**\n   * Platform independent error code related to ATT errors.\n   */\n  attErrorCode: ?$Values<typeof BleATTErrorCode>\n  /**\n   * iOS specific error code (if not an ATT error).\n   */\n  iosErrorCode: ?$Values<typeof BleIOSErrorCode>\n  /**\n   * Android specific error code (if not an ATT error).\n   */\n  androidErrorCode: ?$Values<typeof BleAndroidErrorCode>\n  /**\n   * Platform specific error message.\n   */\n  reason: ?string\n\n  constructor(nativeBleError: NativeBleError | string, errorMessageMapping: BleErrorCodeMessageMapping) {\n    super()\n    this.message = errorMessageMapping[BleErrorCode.UnknownError]\n    if (typeof nativeBleError === 'string') {\n      this.errorCode = BleErrorCode.UnknownError\n      this.attErrorCode = null\n      this.iosErrorCode = null\n      this.androidErrorCode = null\n      this.reason = nativeBleError\n    } else {\n      const message = errorMessageMapping[nativeBleError.errorCode]\n      if (message) {\n        this.message = fillStringWithArguments(message, nativeBleError)\n      }\n      this.errorCode = nativeBleError.errorCode\n      this.attErrorCode = nativeBleError.attErrorCode\n      this.iosErrorCode = nativeBleError.iosErrorCode\n      this.androidErrorCode = nativeBleError.androidErrorCode\n      this.reason = nativeBleError.reason\n    }\n    this.name = 'BleError'\n  }\n}\n\nexport function parseBleError(errorMessage: string, errorMessageMapping: BleErrorCodeMessageMapping): BleError {\n  let bleError: BleError\n  const errorMapping = errorMessageMapping ? errorMessageMapping : BleErrorCodeMessage\n  try {\n    const nativeBleError = JSON.parse(errorMessage)\n    bleError = new BleError(nativeBleError, errorMapping)\n  } catch (parseError) {\n    bleError = new BleError(errorMessage, errorMapping)\n  }\n  return bleError\n}\n\n/**\n * Platform independent error code map adjusted to this library's use cases.\n */\nexport const BleErrorCode = {\n  // Implementation specific errors ------------------------------------------------------------------------------------\n  /**\n   * This error can be thrown when unexpected error occurred and in most cases it is related to implementation bug.\n   * Original message is available in {@link #bleerrorreason|reason} property.\n   */\n  UnknownError: 0,\n  /**\n   * Current promise failed to finish due to BleManager shutdown. It means that user called\n   * {@link #blemanagerdestroy|manager.destroy()} function before all operations completed.\n   */\n  BluetoothManagerDestroyed: 1,\n  /**\n   * Promise was explicitly cancelled by a user with {@link #blemanagercanceltransaction|manager.cancelTransaction()}\n   * function call.\n   */\n  OperationCancelled: 2,\n  /**\n   * Operation timed out and was cancelled.\n   */\n  OperationTimedOut: 3,\n  /**\n   * Native module couldn't start operation due to internal state, which doesn't allow to do that.\n   */\n  OperationStartFailed: 4,\n  /**\n   * Invalid UUIDs or IDs were passed to API call.\n   */\n  InvalidIdentifiers: 5,\n\n  // Bluetooth global states -------------------------------------------------------------------------------------------\n  /**\n   * Bluetooth is not supported for this particular device. It may happen on iOS simulator for example.\n   */\n  BluetoothUnsupported: 100,\n  /**\n   * There are no granted permissions which allow to use BLE functionality. On Android it may require\n   * android.permission.ACCESS_COARSE_LOCATION permission or android.permission.ACCESS_FINE_LOCATION permission.\n   */\n  BluetoothUnauthorized: 101,\n  /**\n   * BLE is powered off on device. All previous operations and their state is invalidated.\n   */\n  BluetoothPoweredOff: 102,\n  /**\n   * BLE stack is in unspecified state.\n   */\n  BluetoothInUnknownState: 103,\n  /**\n   * BLE stack is resetting.\n   */\n  BluetoothResetting: 104,\n  /**\n   * BLE state change failed.\n   */\n  BluetoothStateChangeFailed: 105,\n\n  // Peripheral errors. ------------------------------------------------------------------------------------------------\n  /**\n   * Couldn't connect to specified device.\n   */\n  DeviceConnectionFailed: 200,\n  /**\n   * Device was disconnected.\n   */\n  DeviceDisconnected: 201,\n  /**\n   * Couldn't read RSSI from device.\n   */\n  DeviceRSSIReadFailed: 202,\n  /**\n   * Device is already connected. It is not allowed to connect twice to the same device.\n   */\n  DeviceAlreadyConnected: 203,\n  /**\n   * Couldn't find device with specified ID.\n   */\n  DeviceNotFound: 204,\n  /**\n   * Operation failed because device has to be connected to perform it.\n   */\n  DeviceNotConnected: 205,\n  /**\n   * Device could not change MTU value.\n   */\n  DeviceMTUChangeFailed: 206,\n\n  // Services ----------------------------------------------------------------------------------------------------------\n  /**\n   * Couldn't discover services for specified device.\n   */\n  ServicesDiscoveryFailed: 300,\n  /**\n   * Couldn't discover included services for specified service.\n   */\n  IncludedServicesDiscoveryFailed: 301,\n  /**\n   * Service with specified ID or UUID couldn't be found. User may need to call\n   * {@link #blemanagerdiscoverallservicesandcharacteristicsfordevice|manager.discoverAllServicesAndCharacteristicsForDevice}\n   * to cache them.\n   */\n  ServiceNotFound: 302,\n  /**\n   * Services were not discovered. User may need to call\n   * {@link #blemanagerdiscoverallservicesandcharacteristicsfordevice|manager.discoverAllServicesAndCharacteristicsForDevice}\n   * to cache them.\n   */\n  ServicesNotDiscovered: 303,\n\n  // Characteristics ---------------------------------------------------------------------------------------------------\n  /**\n   * Couldn't discover characteristics for specified service.\n   */\n  CharacteristicsDiscoveryFailed: 400,\n  /**\n   * Couldn't write to specified characteristic. Make sure that\n   * {@link #characteristiciswritablewithresponse|characteristic.isWritableWithResponse}\n   * or {@link #characteristiciswritablewithoutresponse|characteristic.isWritableWithoutResponse} is set to true.\n   */\n  CharacteristicWriteFailed: 401,\n  /**\n   * Couldn't read from specified characteristic. Make sure that\n   * {@link #characteristicisreadable|characteristic.isReadable} is set to true.\n   */\n  CharacteristicReadFailed: 402,\n  /**\n   * Couldn't set notification or indication for specified characteristic. Make sure that\n   * {@link #characteristicisnotifiable|characteristic.isNotifiable} or\n   * {@link #characteristicisindicatable|characteristic.isIndicatable} is set to true.\n   */\n  CharacteristicNotifyChangeFailed: 403,\n  /**\n   * Characteristic with specified ID or UUID couldn't be found. User may need to call\n   * {@link #blemanagerdiscoverallservicesandcharacteristicsfordevice|manager.discoverAllServicesAndCharacteristicsForDevice}\n   * to cache them.\n   */\n  CharacteristicNotFound: 404,\n  /**\n   * Characteristic were not discovered for specified service. User may need to call\n   * {@link #blemanagerdiscoverallservicesandcharacteristicsfordevice|manager.discoverAllServicesAndCharacteristicsForDevice}\n   * to cache them.\n   */\n  CharacteristicsNotDiscovered: 405,\n  /**\n   * Invalid Base64 format was passed to characteristic API function call.\n   */\n  CharacteristicInvalidDataFormat: 406,\n\n  // Characteristics ---------------------------------------------------------------------------------------------------\n  /**\n   * Couldn't discover descriptor for specified characteristic.\n   */\n  DescriptorsDiscoveryFailed: 500,\n  /**\n   * Couldn't write to specified descriptor.\n   */\n  DescriptorWriteFailed: 501,\n  /**\n   * Couldn't read from specified descriptor.\n   */\n  DescriptorReadFailed: 502,\n  /**\n   * Couldn't find specified descriptor.\n   */\n  DescriptorNotFound: 503,\n  /**\n   * Descriptors are not discovered for specified characteristic.\n   */\n  DescriptorsNotDiscovered: 504,\n  /**\n   * Invalid Base64 format was passed to descriptor API function call.\n   */\n  DescriptorInvalidDataFormat: 505,\n  /**\n   * Issued a write to a descriptor, which is handled by OS.\n   */\n  DescriptorWriteNotAllowed: 506,\n\n  // Scanning errors ---------------------------------------------------------------------------------------------------\n  /**\n   * Cannot start scanning operation.\n   */\n  ScanStartFailed: 600,\n  /**\n   * Location services are disabled.\n   */\n  LocationServicesDisabled: 601\n}\n\n/**\n * Mapping of error codes to error messages\n * @name BleErrorCodeMessage\n */\nexport const BleErrorCodeMessage: BleErrorCodeMessageMapping = {\n  // Implementation specific errors\n  [BleErrorCode.UnknownError]: 'Unknown error occurred. This is probably a bug! Check reason property.',\n  [BleErrorCode.BluetoothManagerDestroyed]: 'BleManager was destroyed',\n  [BleErrorCode.OperationCancelled]: 'Operation was cancelled',\n  [BleErrorCode.OperationTimedOut]: 'Operation timed out',\n  [BleErrorCode.OperationStartFailed]: 'Operation was rejected',\n  [BleErrorCode.InvalidIdentifiers]: 'Invalid UUIDs or IDs were passed: {internalMessage}',\n\n  // Bluetooth global states\n  [BleErrorCode.BluetoothUnsupported]: 'BluetoothLE is unsupported on this device',\n  [BleErrorCode.BluetoothUnauthorized]: 'Device is not authorized to use BluetoothLE',\n  [BleErrorCode.BluetoothPoweredOff]: 'BluetoothLE is powered off',\n  [BleErrorCode.BluetoothInUnknownState]: 'BluetoothLE is in unknown state',\n  [BleErrorCode.BluetoothResetting]: 'BluetoothLE is resetting',\n  [BleErrorCode.BluetoothStateChangeFailed]: 'Bluetooth state change failed',\n\n  // Peripheral errors.\n  [BleErrorCode.DeviceConnectionFailed]: 'Device {deviceID} connection failed',\n  [BleErrorCode.DeviceDisconnected]: 'Device {deviceID} was disconnected',\n  [BleErrorCode.DeviceRSSIReadFailed]: 'RSSI read failed for device {deviceID}',\n  [BleErrorCode.DeviceAlreadyConnected]: 'Device {deviceID} is already connected',\n  [BleErrorCode.DeviceNotFound]: 'Device {deviceID} not found',\n  [BleErrorCode.DeviceNotConnected]: 'Device {deviceID} is not connected',\n  [BleErrorCode.DeviceMTUChangeFailed]: 'Device {deviceID} could not change MTU size',\n\n  // Services\n  [BleErrorCode.ServicesDiscoveryFailed]: 'Services discovery failed for device {deviceID}',\n  [BleErrorCode.IncludedServicesDiscoveryFailed]:\n    'Included services discovery failed for device {deviceID} and service: {serviceUUID}',\n  [BleErrorCode.ServiceNotFound]: 'Service {serviceUUID} for device {deviceID} not found',\n  [BleErrorCode.ServicesNotDiscovered]: 'Services not discovered for device {deviceID}',\n\n  // Characteristics\n  [BleErrorCode.CharacteristicsDiscoveryFailed]:\n    'Characteristic discovery failed for device {deviceID} and service {serviceUUID}',\n  [BleErrorCode.CharacteristicWriteFailed]:\n    'Characteristic {characteristicUUID} write failed for device {deviceID} and service {serviceUUID}',\n  [BleErrorCode.CharacteristicReadFailed]:\n    'Characteristic {characteristicUUID} read failed for device {deviceID} and service {serviceUUID}',\n  [BleErrorCode.CharacteristicNotifyChangeFailed]:\n    'Characteristic {characteristicUUID} notify change failed for device {deviceID} and service {serviceUUID}',\n  [BleErrorCode.CharacteristicNotFound]: 'Characteristic {characteristicUUID} not found',\n  [BleErrorCode.CharacteristicsNotDiscovered]:\n    'Characteristics not discovered for device {deviceID} and service {serviceUUID}',\n  [BleErrorCode.CharacteristicInvalidDataFormat]:\n    'Cannot write to characteristic {characteristicUUID} with invalid data format: {internalMessage}',\n\n  // Descriptors\n  [BleErrorCode.DescriptorsDiscoveryFailed]:\n    'Descriptor {descriptorUUID} discovery failed for device {deviceID}, service {serviceUUID} and characteristic {characteristicUUID}',\n  [BleErrorCode.DescriptorWriteFailed]:\n    'Descriptor {descriptorUUID} write failed for device {deviceID}, service {serviceUUID} and characteristic {characteristicUUID}',\n  [BleErrorCode.DescriptorReadFailed]:\n    'Descriptor {descriptorUUID} read failed for device {deviceID}, service {serviceUUID} and characteristic {characteristicUUID}',\n  [BleErrorCode.DescriptorNotFound]: 'Descriptor {descriptorUUID} not found',\n  [BleErrorCode.DescriptorsNotDiscovered]:\n    'Descriptors not discovered for device {deviceID}, service {serviceUUID} and characteristic {characteristicUUID}',\n  [BleErrorCode.DescriptorInvalidDataFormat]:\n    'Cannot write to descriptor {descriptorUUID} with invalid data format: {internalMessage}',\n  [BleErrorCode.DescriptorWriteNotAllowed]:\n    \"Cannot write to descriptor {descriptorUUID}. It's not allowed by iOS and therefore forbidden on Android as well.\",\n\n  // Scanning\n  [BleErrorCode.ScanStartFailed]: 'Cannot start scanning operation',\n  [BleErrorCode.LocationServicesDisabled]: 'Location services are disabled'\n}\n\n/**\n * Error codes for ATT errors.\n * @name BleATTErrorCode\n */\nexport const BleATTErrorCode = {\n  /**\n   * The ATT command or request successfully completed.\n   */\n  Success: 0,\n  /**\n   * The attribute handle is invalid on this device.\n   */\n  InvalidHandle: 1,\n  /**\n   * The attribute’s value cannot be read.\n   */\n  ReadNotPermitted: 2,\n  /**\n   * The attribute’s value cannot be written.\n   */\n  WriteNotPermitted: 3,\n  /**\n   * The attribute Protocol Data Unit (PDU) or “message” is invalid.\n   */\n  InvalidPdu: 4,\n  /**\n   * The attribute requires authentication before its value can be read or written.\n   */\n  InsufficientAuthentication: 5,\n  /**\n   * The attribute server does not support the request received by the client.\n   */\n  RequestNotSupported: 6,\n  /**\n   * The specified offset value was past the end of the attribute’s value.\n   */\n  InvalidOffset: 7,\n  /**\n   * The attribute requires authorization before its value can be read or written.\n   */\n  InsufficientAuthorization: 8,\n  /**\n   * The prepare queue is full, because too many prepare write requests have been queued.\n   */\n  PrepareQueueFull: 9,\n  /**\n   * The attribute is not found within the specified attribute handle range.\n   */\n  AttributeNotFound: 10,\n  /**\n   * The attribute cannot be read or written using the ATT read blob request.\n   */\n  AttributeNotLong: 11,\n  /**\n   * The encryption key size used for encrypting this link is insufficient.\n   */\n  InsufficientEncryptionKeySize: 12,\n  /**\n   * The length of the attribute’s value is invalid for the intended operation.\n   */\n  InvalidAttributeValueLength: 13,\n  /**\n   * The ATT request has encountered an unlikely error and therefore could not be completed.\n   */\n  UnlikelyError: 14,\n  /**\n   * The attribute requires encryption before its value can be read or written.\n   */\n  InsufficientEncryption: 15,\n  /**\n   * The attribute type is not a supported grouping attribute as defined by a higher-layer specification.\n   */\n  UnsupportedGroupType: 16,\n  /**\n   * Resources are insufficient to complete the ATT request.\n   */\n  InsufficientResources: 17\n\n  // Values 0x012 – 0x7F are reserved for future use.\n}\n\n/**\n * iOS specific error codes.\n * @name BleIOSErrorCode\n */\nexport const BleIOSErrorCode = {\n  /**\n   * An unknown error occurred.\n   */\n  Unknown: 0,\n  /**\n   * The specified parameters are invalid.\n   */\n  InvalidParameters: 1,\n  /**\n   * The specified attribute handle is invalid.\n   */\n  InvalidHandle: 2,\n  /**\n   * The device is not currently connected.\n   */\n  NotConnected: 3,\n  /**\n   * The device has run out of space to complete the intended operation.\n   */\n  OutOfSpace: 4,\n  /**\n   * The operation is canceled.\n   */\n  OperationCancelled: 5,\n  /**\n   * The connection timed out.\n   */\n  ConnectionTimeout: 6,\n  /**\n   * The peripheral disconnected.\n   */\n  PeripheralDisconnected: 7,\n  /**\n   * The specified UUID is not permitted.\n   */\n  UuidNotAllowed: 8,\n  /**\n   * The peripheral is already advertising.\n   */\n  AlreadyAdvertising: 9,\n  /**\n   * The connection failed.\n   */\n  ConnectionFailed: 10,\n  /**\n   * The device already has the maximum number of connections.\n   */\n  ConnectionLimitReached: 11,\n  /**\n   * Unknown device.\n   */\n  UnknownDevice: 12\n}\n\n/**\n * Android specific error codes.\n * @name BleAndroidErrorCode\n */\nexport const BleAndroidErrorCode = {\n  /**\n   * The device has insufficient resources to complete the intended operation.\n   */\n  NoResources: 0x80,\n  /**\n   * Internal error occurred which may happen due to implementation error in BLE stack.\n   */\n  InternalError: 0x81,\n  /**\n   * BLE stack implementation entered illegal state and operation couldn't complete.\n   */\n  WrongState: 0x82,\n  /**\n   * BLE stack didn't allocate sufficient memory buffer for internal caches.\n   */\n  DbFull: 0x83,\n  /**\n   * Maximum number of pending operations was exceeded.\n   */\n  Busy: 0x84,\n  /**\n   * Generic BLE stack error.\n   */\n  Error: 0x85,\n  /**\n   * Command is already queued up in GATT.\n   */\n  CmdStarted: 0x86,\n  /**\n   * Illegal parameter was passed to internal BLE stack function.\n   */\n  IllegalParameter: 0x87,\n  /**\n   * Operation is pending.\n   */\n  Pending: 0x88,\n  /**\n   * Authorization failed before performing read or write operation.\n   */\n  AuthFail: 0x89,\n  /**\n   * More cache entries were loaded then expected.\n   */\n  More: 0x8a,\n  /**\n   * Invalid configuration\n   */\n  InvalidCfg: 0x8b,\n  /**\n   * GATT service already started.\n   */\n  ServiceStarted: 0x8c,\n  /**\n   * GATT link is encrypted but prone to man in the middle attacks.\n   */\n  EncrypedNoMitm: 0x8d,\n  /**\n   * GATT link is not encrypted.\n   */\n  NotEncrypted: 0x8e,\n  /**\n   * ATT command was sent but channel is congested.\n   */\n  Congested: 0x8f\n}\n\nexport interface NativeBleError {\n  errorCode: $Values<typeof BleErrorCode>;\n  attErrorCode: ?$Values<typeof BleATTErrorCode>;\n  iosErrorCode: ?$Values<typeof BleIOSErrorCode>;\n  androidErrorCode: ?$Values<typeof BleAndroidErrorCode>;\n  reason: ?string;\n\n  deviceID?: string;\n  serviceUUID?: string;\n  characteristicUUID?: string;\n  descriptorUUID?: string;\n  internalMessage?: string;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}