{"ast":null,"code":"'use strict';\n\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport { isIOS } from \"./Utils\";\nexport var Service = function () {\n  function Service(nativeService, manager) {\n    _classCallCheck(this, Service);\n    Object.assign(this, nativeService);\n    Object.defineProperty(this, '_manager', {\n      value: manager,\n      enumerable: false\n    });\n  }\n  return _createClass(Service, [{\n    key: \"characteristics\",\n    value: function characteristics() {\n      return this._manager._characteristicsForService(this.id);\n    }\n  }, {\n    key: \"descriptorsForCharacteristic\",\n    value: function descriptorsForCharacteristic(characteristicUUID) {\n      return this._manager._descriptorsForService(this.id, characteristicUUID);\n    }\n  }, {\n    key: \"readCharacteristic\",\n    value: function readCharacteristic(characteristicUUID, transactionId) {\n      return this._manager._readCharacteristicForService(this.id, characteristicUUID, transactionId);\n    }\n  }, {\n    key: \"writeCharacteristicWithResponse\",\n    value: function writeCharacteristicWithResponse(characteristicUUID, valueBase64, transactionId) {\n      return this._manager._writeCharacteristicWithResponseForService(this.id, characteristicUUID, valueBase64, transactionId);\n    }\n  }, {\n    key: \"writeCharacteristicWithoutResponse\",\n    value: function writeCharacteristicWithoutResponse(characteristicUUID, valueBase64, transactionId) {\n      return this._manager._writeCharacteristicWithoutResponseForService(this.id, characteristicUUID, valueBase64, transactionId);\n    }\n  }, {\n    key: \"monitorCharacteristic\",\n    value: function monitorCharacteristic(characteristicUUID, listener, transactionId, subscriptionType) {\n      var _this$_manager;\n      var commonArgs = [this.id, characteristicUUID, listener, transactionId];\n      var args = isIOS ? commonArgs : [].concat(commonArgs, [subscriptionType]);\n      return (_this$_manager = this._manager)._monitorCharacteristicForService.apply(_this$_manager, _toConsumableArray(args));\n    }\n  }, {\n    key: \"readDescriptorForCharacteristic\",\n    value: (function () {\n      var _readDescriptorForCharacteristic = _asyncToGenerator(function* (characteristicUUID, descriptorUUID, transactionId) {\n        return this._manager._readDescriptorForService(this.id, characteristicUUID, descriptorUUID, transactionId);\n      });\n      function readDescriptorForCharacteristic(_x, _x2, _x3) {\n        return _readDescriptorForCharacteristic.apply(this, arguments);\n      }\n      return readDescriptorForCharacteristic;\n    }())\n  }, {\n    key: \"writeDescriptorForCharacteristic\",\n    value: (function () {\n      var _writeDescriptorForCharacteristic = _asyncToGenerator(function* (characteristicUUID, descriptorUUID, valueBase64, transactionId) {\n        return this._manager._writeDescriptorForService(this.id, characteristicUUID, descriptorUUID, valueBase64, transactionId);\n      });\n      function writeDescriptorForCharacteristic(_x4, _x5, _x6, _x7) {\n        return _writeDescriptorForCharacteristic.apply(this, arguments);\n      }\n      return writeDescriptorForCharacteristic;\n    }())\n  }]);\n}();","map":{"version":3,"names":["_asyncToGenerator","_toConsumableArray","_classCallCheck","_createClass","isIOS","Service","nativeService","manager","Object","assign","defineProperty","value","enumerable","key","characteristics","_manager","_characteristicsForService","id","descriptorsForCharacteristic","characteristicUUID","_descriptorsForService","readCharacteristic","transactionId","_readCharacteristicForService","writeCharacteristicWithResponse","valueBase64","_writeCharacteristicWithResponseForService","writeCharacteristicWithoutResponse","_writeCharacteristicWithoutResponseForService","monitorCharacteristic","listener","subscriptionType","_this$_manager","commonArgs","args","concat","_monitorCharacteristicForService","apply","_readDescriptorForCharacteristic","descriptorUUID","_readDescriptorForService","readDescriptorForCharacteristic","_x","_x2","_x3","arguments","_writeDescriptorForCharacteristic","_writeDescriptorForService","writeDescriptorForCharacteristic","_x4","_x5","_x6","_x7"],"sources":["C:/Users/Usu√°rio/Desktop/glucocare/node_modules/react-native-ble-plx/src/Service.js"],"sourcesContent":["// @flow\n'use strict'\n\nimport type { BleManager } from './BleManager'\nimport type { BleError } from './BleError'\nimport type { Characteristic } from './Characteristic'\nimport type { Descriptor } from './Descriptor'\nimport type { NativeService } from './BleModule'\nimport type {\n  DeviceId,\n  Identifier,\n  Base64,\n  UUID,\n  Subscription,\n  TransactionId,\n  CharacteristicSubscriptionType\n} from './TypeDefinition'\nimport { isIOS } from './Utils'\n\n/**\n * Service object.\n */\nexport class Service implements NativeService {\n  /**\n   * Internal BLE Manager handle\n   * @private\n   */\n  _manager: BleManager\n  /**\n   * Service unique identifier\n   */\n  id: Identifier\n  /**\n   * Service UUID\n   */\n  uuid: UUID\n  /**\n   * Device's ID to which service belongs\n   */\n  deviceID: DeviceId\n  /**\n   * Value indicating whether the type of service is primary or secondary.\n   */\n  isPrimary: boolean\n\n  /**\n   * Private constructor used to create {@link Service} object.\n   *\n   * @param {NativeService} nativeService NativeService properties to be copied.\n   * @param {BleManager} manager Current BleManager instance.\n   * @private\n   * @ignore\n   */\n  constructor(nativeService: NativeService, manager: BleManager) {\n    Object.assign(this, nativeService)\n    Object.defineProperty(this, '_manager', { value: manager, enumerable: false })\n  }\n\n  /**\n   * {@link #blemanagercharacteristicsfordevice|bleManager.characteristicsForDevice()} with partially filled arguments.\n   *\n   * @returns {Promise<Array<Characteristic>>} Promise which emits array of {@link Characteristic} objects which are\n   * discovered for this service.\n   */\n  characteristics(): Promise<Array<Characteristic>> {\n    return this._manager._characteristicsForService(this.id)\n  }\n\n  /**\n   * {@link #blemanagerdescriptorsfordevice|bleManager.descriptorsForDevice()} with partially filled arguments.\n   *\n   * @param {UUID} characteristicUUID {@link Characteristic} UUID.\n   * @returns {Promise<Array<Descriptor>>} Promise which emits array of {@link Descriptor} objects which are\n   * discovered for this {@link Service} in specified {@link Characteristic}.\n   */\n  descriptorsForCharacteristic(characteristicUUID: UUID): Promise<Array<Descriptor>> {\n    return this._manager._descriptorsForService(this.id, characteristicUUID)\n  }\n\n  /**\n   * {@link #blemanagerreadcharacteristicfordevice|bleManager.readCharacteristicForDevice()} with partially filled arguments.\n   *\n   * @param {UUID} characteristicUUID {@link Characteristic} UUID.\n   * @param {?TransactionId} transactionId optional `transactionId` which can be used in\n   * {@link #blemanagercanceltransaction|bleManager.cancelTransaction()} function.\n   * @returns {Promise<Characteristic>} Promise which emits first {@link Characteristic} object matching specified\n   * UUID path. Latest value of {@link Characteristic} will be stored inside returned object.\n   */\n  readCharacteristic(characteristicUUID: UUID, transactionId: ?TransactionId): Promise<Characteristic> {\n    return this._manager._readCharacteristicForService(this.id, characteristicUUID, transactionId)\n  }\n\n  /**\n   * {@link #blemanagerwritecharacteristicwithresponsefordevice|bleManager.writeCharacteristicWithResponseForDevice()} with partially filled arguments.\n   *\n   * @param {UUID} characteristicUUID {@link Characteristic} UUID.\n   * @param {Base64} valueBase64 Value in Base64 format.\n   * @param {?TransactionId} transactionId optional `transactionId` which can be used in\n   * {@link #blemanagercanceltransaction|bleManager.cancelTransaction()} function.\n   * @returns {Promise<Characteristic>} Promise which emits first {@link Characteristic} object matching specified\n   * UUID path. Latest value of characteristic may not be stored inside returned object.\n   */\n  writeCharacteristicWithResponse(\n    characteristicUUID: UUID,\n    valueBase64: Base64,\n    transactionId: ?TransactionId\n  ): Promise<Characteristic> {\n    return this._manager._writeCharacteristicWithResponseForService(\n      this.id,\n      characteristicUUID,\n      valueBase64,\n      transactionId\n    )\n  }\n\n  /**\n   * {@link #blemanagerwritecharacteristicwithoutresponsefordevice|bleManager.writeCharacteristicWithoutResponseForDevice()} with partially filled arguments.\n   *\n   * @param {UUID} characteristicUUID {@link Characteristic} UUID.\n   * @param {Base64} valueBase64 Value in Base64 format.\n   * @param {?TransactionId} transactionId optional `transactionId` which can be used in\n   * {@link #blemanagercanceltransaction|bleManager.cancelTransaction()} function.\n   * @returns {Promise<Characteristic>} Promise which emits first {@link Characteristic} object matching specified\n   * UUID path. Latest value of characteristic may not be stored inside returned object.\n   */\n  writeCharacteristicWithoutResponse(\n    characteristicUUID: UUID,\n    valueBase64: Base64,\n    transactionId: ?TransactionId\n  ): Promise<Characteristic> {\n    return this._manager._writeCharacteristicWithoutResponseForService(\n      this.id,\n      characteristicUUID,\n      valueBase64,\n      transactionId\n    )\n  }\n\n  /**\n   * {@link #blemanagermonitorcharacteristicfordevice|bleManager.monitorCharacteristicForDevice()} with partially filled arguments.\n   *\n   * @param {UUID} characteristicUUID - {@link Characteristic} UUID.\n   * @param {function(error: ?BleError, characteristic: ?Characteristic)} listener callback which emits\n   * {@link Characteristic} objects with modified value for each notification.\n   * @param {?TransactionId} transactionId optional `transactionId` which can be used in\n   * @param {?CharacteristicSubscriptionType} subscriptionType [android only] subscription type of the characteristic\n   * {@link #blemanagercanceltransaction|bleManager.cancelTransaction()} function.\n   * @returns {Subscription} Subscription on which `remove()` function can be called to unsubscribe.\n   */\n  monitorCharacteristic(\n    characteristicUUID: UUID,\n    listener: (error: ?BleError, characteristic: ?Characteristic) => void,\n    transactionId: ?TransactionId,\n    subscriptionType: ?CharacteristicSubscriptionType\n  ): Subscription {\n    const commonArgs = [this.id, characteristicUUID, listener, transactionId]\n    const args = isIOS ? commonArgs : [...commonArgs, subscriptionType]\n\n    return this._manager._monitorCharacteristicForService(...args)\n  }\n\n  /**\n   * {@link #blemanagerreaddescriptorfordevice|bleManager.readDescriptorForDevice()} with partially filled arguments.\n   *\n   * @param {UUID} characteristicUUID {@link Characteristic} UUID.\n   * @param {UUID} descriptorUUID {@link Descriptor} UUID.\n   * @param {?TransactionId} transactionId optional `transactionId` which can be used in\n   * {@link #blemanagercanceltransaction|cancelTransaction()} function.\n   * @returns {Promise<Descriptor>} Promise which emits first {@link Descriptor} object matching specified\n   * UUID paths. Latest value of {@link Descriptor} will be stored inside returned object.\n   */\n  async readDescriptorForCharacteristic(\n    characteristicUUID: UUID,\n    descriptorUUID: UUID,\n    transactionId: ?TransactionId\n  ): Promise<Descriptor> {\n    return this._manager._readDescriptorForService(this.id, characteristicUUID, descriptorUUID, transactionId)\n  }\n\n  /**\n   * {@link #blemanagerwritedescriptorfordevice|bleManager.writeDescriptorForDevice()} with partially filled arguments.\n   *\n   * @param {UUID} characteristicUUID Characteristic UUID\n   * @param {UUID} descriptorUUID Descriptor UUID\n   * @param {Base64} valueBase64 Value to be set coded in Base64\n   * @param {?TransactionId} transactionId Transaction handle used to cancel operation\n   * @returns {Promise<Descriptor>} Descriptor which saved passed value.\n   */\n  async writeDescriptorForCharacteristic(\n    characteristicUUID: UUID,\n    descriptorUUID: UUID,\n    valueBase64: Base64,\n    transactionId: ?TransactionId\n  ): Promise<Descriptor> {\n    return this._manager._writeDescriptorForService(\n      this.id,\n      characteristicUUID,\n      descriptorUUID,\n      valueBase64,\n      transactionId\n    )\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}