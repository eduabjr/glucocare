{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport * as SQLite from 'expo-sqlite';\nvar DB_NAME = 'glucocare.db';\nvar db = null;\nexport function getDB() {\n  if (!db) {\n    db = SQLite.openDatabase(DB_NAME);\n  }\n  return db;\n}\nexport function initDB() {\n  return _initDB.apply(this, arguments);\n}\nfunction _initDB() {\n  _initDB = _asyncToGenerator(function* () {\n    return new Promise(function (resolve, reject) {\n      var database = getDB();\n      database.transaction(function (tx) {\n        tx.executeSql(\"CREATE TABLE IF NOT EXISTS users (\\n                        id TEXT PRIMARY KEY NOT NULL,\\n                        full_name TEXT,\\n                        email TEXT,\\n                        google_id TEXT,\\n                        onboarding_completed INTEGER DEFAULT 0,\\n                        biometric_enabled INTEGER DEFAULT 0,\\n                        weight REAL,\\n                        height REAL,\\n                        birth_date TEXT,\\n                        diabetes_condition TEXT,\\n                        restriction TEXT\\n                    );\");\n        tx.executeSql(\"CREATE TABLE IF NOT EXISTS readings (\\n                        id TEXT PRIMARY KEY NOT NULL,\\n                        measurement_time TEXT,\\n                        glucose_level REAL,\\n                        meal_context TEXT,\\n                        time_since_meal TEXT,\\n                        notes TEXT\\n                    );\");\n        tx.executeSql(\"CREATE TABLE IF NOT EXISTS sync_meta (\\n                        key TEXT PRIMARY KEY NOT NULL,\\n                        value TEXT\\n                    );\");\n      }, function (err) {\n        console.error('initDB - erro transaction:', err);\n        reject(err);\n      }, function () {\n        console.log('Banco inicializado com sucesso ✅');\n        resolve(true);\n      });\n    });\n  });\n  return _initDB.apply(this, arguments);\n}\nfunction normalizeUserRow(row) {\n  var _row$full_name, _row$email, _row$google_id, _row$weight, _row$height, _row$birth_date, _row$diabetes_conditi, _row$restriction;\n  return {\n    id: row.id,\n    name: String((_row$full_name = row.full_name) != null ? _row$full_name : ''),\n    email: String((_row$email = row.email) != null ? _row$email : ''),\n    googleId: String((_row$google_id = row.google_id) != null ? _row$google_id : ''),\n    onboardingCompleted: !!row.onboarding_completed,\n    biometricEnabled: !!row.biometric_enabled,\n    weight: (_row$weight = row.weight) != null ? _row$weight : null,\n    height: (_row$height = row.height) != null ? _row$height : null,\n    birthDate: String((_row$birth_date = row.birth_date) != null ? _row$birth_date : ''),\n    condition: String((_row$diabetes_conditi = row.diabetes_condition) != null ? _row$diabetes_conditi : ''),\n    restriction: String((_row$restriction = row.restriction) != null ? _row$restriction : '')\n  };\n}\nexport function saveOrUpdateUser(_x) {\n  return _saveOrUpdateUser.apply(this, arguments);\n}\nfunction _saveOrUpdateUser() {\n  _saveOrUpdateUser = _asyncToGenerator(function* (profile) {\n    var database = getDB();\n    return new Promise(function (resolve, reject) {\n      database.transaction(function (tx) {\n        tx.executeSql(\"INSERT OR REPLACE INTO users \\n                      (id, full_name, email, google_id, onboarding_completed, biometric_enabled,\\n                       weight, height, birth_date, diabetes_condition, restriction)\\n                       VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);\", [profile.id, profile.name || null, profile.email || null, profile.googleId || null, profile.onboardingCompleted ? 1 : 0, profile.biometricEnabled ? 1 : 0, profile.weight || null, profile.height || null, profile.birthDate || null, profile.condition || null, profile.restriction || null]);\n      }, function (err) {\n        console.error('saveOrUpdateUser - erro transaction:', err);\n        reject(err);\n      }, _asyncToGenerator(function* () {\n        try {\n          var user = yield getUser();\n          if (user) {\n            resolve(user);\n          } else {\n            resolve(false);\n          }\n        } catch (err) {\n          console.error('saveOrUpdateUser - erro ao buscar usuário após salvar:', err);\n          resolve(false);\n        }\n      }));\n    });\n  });\n  return _saveOrUpdateUser.apply(this, arguments);\n}\nexport function getUser() {\n  return _getUser.apply(this, arguments);\n}\nfunction _getUser() {\n  _getUser = _asyncToGenerator(function* () {\n    var database = getDB();\n    return new Promise(function (resolve, reject) {\n      database.transaction(function (tx) {\n        tx.executeSql(\"SELECT * FROM users LIMIT 1;\", [], function (_, _ref2) {\n          var rows = _ref2.rows;\n          if (rows.length > 0) {\n            resolve(normalizeUserRow(rows._array[0]));\n          } else {\n            resolve(null);\n          }\n        }, function (_, err) {\n          console.error('getUser - erro:', err);\n          reject(err);\n          return false;\n        });\n      });\n    });\n  });\n  return _getUser.apply(this, arguments);\n}\nexport function addReading(_x2) {\n  return _addReading.apply(this, arguments);\n}\nfunction _addReading() {\n  _addReading = _asyncToGenerator(function* (reading) {\n    var database = getDB();\n    return new Promise(function (resolve, reject) {\n      database.transaction(function (tx) {\n        tx.executeSql(\"INSERT INTO readings \\n                       (id, measurement_time, glucose_level, meal_context, time_since_meal, notes)\\n                       VALUES (?, ?, ?, ?, ?, ?)\", [reading.id, reading.measurement_time, reading.glucose_level, reading.meal_context || null, reading.time_since_meal || null, reading.notes || null]);\n      }, function (err) {\n        console.error('addReading - erro transaction:', err);\n        reject(err);\n      }, function () {\n        return resolve(true);\n      });\n    });\n  });\n  return _addReading.apply(this, arguments);\n}\nexport function listReadings() {\n  return _listReadings.apply(this, arguments);\n}\nfunction _listReadings() {\n  _listReadings = _asyncToGenerator(function* () {\n    var database = getDB();\n    return new Promise(function (resolve, reject) {\n      database.transaction(function (tx) {\n        tx.executeSql(\"SELECT * FROM readings ORDER BY datetime(measurement_time) DESC;\", [], function (_, result) {\n          resolve(result.rows._array || []);\n        });\n      }, function (err) {\n        console.error('listReadings - erro transaction:', err);\n        reject(err);\n      });\n    });\n  });\n  return _listReadings.apply(this, arguments);\n}\nexport function deleteReading(_x3) {\n  return _deleteReading.apply(this, arguments);\n}\nfunction _deleteReading() {\n  _deleteReading = _asyncToGenerator(function* (id) {\n    var database = getDB();\n    return new Promise(function (resolve, reject) {\n      database.transaction(function (tx) {\n        tx.executeSql('DELETE FROM readings WHERE id = ?;', [id], function (_, result) {\n          resolve(result.rowsAffected > 0);\n        }, function (_, error) {\n          console.error(\"deleteReading - erro SQL:\", error);\n          reject(error);\n          return false;\n        });\n      }, function (error) {\n        console.error(\"deleteReading - erro transaction:\", error);\n        reject(error);\n      }, function () {\n        resolve(true);\n      });\n    });\n  });\n  return _deleteReading.apply(this, arguments);\n}","map":{"version":3,"names":["SQLite","DB_NAME","db","getDB","openDatabase","initDB","_initDB","apply","arguments","_asyncToGenerator","Promise","resolve","reject","database","transaction","tx","executeSql","err","console","error","log","normalizeUserRow","row","_row$full_name","_row$email","_row$google_id","_row$weight","_row$height","_row$birth_date","_row$diabetes_conditi","_row$restriction","id","name","String","full_name","email","googleId","google_id","onboardingCompleted","onboarding_completed","biometricEnabled","biometric_enabled","weight","height","birthDate","birth_date","condition","diabetes_condition","restriction","saveOrUpdateUser","_x","_saveOrUpdateUser","profile","user","getUser","_getUser","_","_ref2","rows","length","_array","addReading","_x2","_addReading","reading","measurement_time","glucose_level","meal_context","time_since_meal","notes","listReadings","_listReadings","result","deleteReading","_x3","_deleteReading","rowsAffected"],"sources":["C:/Users/Usuário/Desktop/glucocare/src/services/dbService.ts"],"sourcesContent":["import * as SQLite from 'expo-sqlite';\n\n// Definindo o nome do banco\nconst DB_NAME = 'glucocare.db';\nlet db: SQLite.Database | null = null;\n\n// Tipo para um usuário\n// CORREÇÃO: name, email, googleId são estritamente 'string' para satisfazer o ProfileSetupScreen.\n// A lógica de normalização (normalizeUserRow) garante que os valores NULL do DB se tornem '' (string vazia).\nexport interface UserProfile {\n    id: string;\n    name: string; // Estritamente string\n    email: string; // Estritamente string\n    googleId: string; // Estritamente string\n    onboardingCompleted: boolean;\n    biometricEnabled: boolean;\n    weight: number | null;\n    height: number | null;\n    birthDate: string; // Estritamente string\n    condition: string; // Estritamente string\n    restriction: string; // Estritamente string\n}\n\n// Tipo para uma leitura\nexport interface Reading {\n    id: string;\n    measurement_time: string;\n    glucose_level: number;\n    meal_context: string | null;\n    time_since_meal: string | null;\n    notes: string | null;\n}\n\n// ----------------------\n// FUNÇÕES DE SERVIÇO\n// ----------------------\n\n/**\n * Retorna instância única do DB\n */\nexport function getDB(): SQLite.Database {\n    if (!db) {\n        db = SQLite.openDatabase(DB_NAME);\n    }\n    return db;\n}\n\n/**\n * Inicializa tabelas do banco\n */\nexport async function initDB(): Promise<boolean> {\n    return new Promise((resolve, reject) => {\n        const database = getDB();\n\n        database.transaction(\n            (tx) => {\n                // Usuários\n                tx.executeSql(\n                    `CREATE TABLE IF NOT EXISTS users (\n                        id TEXT PRIMARY KEY NOT NULL,\n                        full_name TEXT,\n                        email TEXT,\n                        google_id TEXT,\n                        onboarding_completed INTEGER DEFAULT 0,\n                        biometric_enabled INTEGER DEFAULT 0,\n                        weight REAL,\n                        height REAL,\n                        birth_date TEXT,\n                        diabetes_condition TEXT,\n                        restriction TEXT\n                    );`\n                );\n\n                // Leituras\n                tx.executeSql(\n                    `CREATE TABLE IF NOT EXISTS readings (\n                        id TEXT PRIMARY KEY NOT NULL,\n                        measurement_time TEXT,\n                        glucose_level REAL,\n                        meal_context TEXT,\n                        time_since_meal TEXT,\n                        notes TEXT\n                    );`\n                );\n\n                // Metadados de sincronização\n                tx.executeSql(\n                    `CREATE TABLE IF NOT EXISTS sync_meta (\n                        key TEXT PRIMARY KEY NOT NULL,\n                        value TEXT\n                    );`\n                );\n            },\n            (err) => {\n                console.error('initDB - erro transaction:', err);\n                reject(err);\n            },\n            () => {\n                console.log('Banco inicializado com sucesso ✅');\n                resolve(true);\n            }\n        );\n    });\n}\n\n/**\n * Normaliza linha de usuário -> objeto usado no app\n * Garante que todas as propriedades 'string' sejam strings, convertendo NULL para ''\n */\nfunction normalizeUserRow(row: any): UserProfile {\n    return {\n        id: row.id,\n        // Usamos Nullish coalescing (??) para pegar null ou undefined, e convertemos para string\n        name: String(row.full_name ?? ''), \n        email: String(row.email ?? ''), \n        googleId: String(row.google_id ?? ''), \n        onboardingCompleted: !!row.onboarding_completed,\n        biometricEnabled: !!row.biometric_enabled,\n        weight: row.weight ?? null, \n        height: row.height ?? null, \n        birthDate: String(row.birth_date ?? ''), \n        condition: String(row.diabetes_condition ?? ''), \n        restriction: String(row.restriction ?? ''), \n    };\n}\n\n/**\n * Salvar ou atualizar usuário\n * Retorna UserProfile ou false (se a busca por getUser falhar após a transação)\n */\nexport async function saveOrUpdateUser(profile: UserProfile): Promise<UserProfile | boolean> {\n    const database = getDB();\n\n    return new Promise((resolve, reject) => {\n        database.transaction(\n            (tx) => {\n                tx.executeSql(\n                    `INSERT OR REPLACE INTO users \n                      (id, full_name, email, google_id, onboarding_completed, biometric_enabled,\n                       weight, height, birth_date, diabetes_condition, restriction)\n                       VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);`,\n                    [\n                        profile.id,\n                        profile.name || null, // Se for '' (string vazia), insere NULL no DB\n                        profile.email || null, // Se for '' (string vazia), insere NULL no DB\n                        profile.googleId || null, // Se for '' (string vazia), insere NULL no DB\n                        profile.onboardingCompleted ? 1 : 0,\n                        profile.biometricEnabled ? 1 : 0,\n                        profile.weight || null,\n                        profile.height || null,\n                        profile.birthDate || null, \n                        profile.condition || null, \n                        profile.restriction || null, \n                    ]\n                );\n            },\n            (err) => {\n                console.error('saveOrUpdateUser - erro transaction:', err);\n                reject(err);\n            },\n            async () => {\n                try {\n                    // Pega o usuário recém-salvo e normaliza \n                    const user = await getUser(); \n                    if (user) {\n                        resolve(user); // retorna já normalizado e tipado corretamente\n                    } else {\n                        resolve(false);  \n                    }\n                } catch (err) {\n                    // Se a busca falhar, ainda resolve (mas com false)\n                    console.error('saveOrUpdateUser - erro ao buscar usuário após salvar:', err);\n                    resolve(false);  \n                }\n            }\n        );\n    });\n}\n\n/**\n * Buscar usuário único\n */\nexport async function getUser(): Promise<UserProfile | null> {\n    const database = getDB();\n\n    return new Promise((resolve, reject) => {\n        database.transaction((tx) => {\n            tx.executeSql(\n                `SELECT * FROM users LIMIT 1;`,\n                [],\n                (_, { rows }: { rows: SQLite.SQLResultSetRowList }) => {\n                    if (rows.length > 0) {\n                        // Chama normalizeUserRow que garante que strings são strings (não null/undefined)\n                        resolve(normalizeUserRow(rows._array[0])); \n                    } else {\n                        resolve(null); // Resolve como null se não encontrar usuário\n                    }\n                },\n                (_, err) => {\n                    console.error('getUser - erro:', err);\n                    reject(err);\n                    return false;\n                }\n            );\n        });\n    });\n}\n\n/**\n * Inserir leitura\n */\nexport async function addReading(reading: Reading): Promise<boolean> {\n    const database = getDB();\n\n    return new Promise((resolve, reject) => {\n        database.transaction(\n            (tx) => {\n                tx.executeSql(\n                    `INSERT INTO readings \n                       (id, measurement_time, glucose_level, meal_context, time_since_meal, notes)\n                       VALUES (?, ?, ?, ?, ?, ?)`,\n                    [\n                        reading.id,\n                        reading.measurement_time,\n                        reading.glucose_level,\n                        reading.meal_context || null,\n                        reading.time_since_meal || null,\n                        reading.notes || null,\n                    ]\n                );\n            },\n            (err) => {\n                console.error('addReading - erro transaction:', err);\n                reject(err);\n            },\n            () => resolve(true)\n        );\n    });\n}\n\n/**\n * Listar leituras\n */\nexport async function listReadings(): Promise<Reading[]> {\n    const database = getDB();\n\n    return new Promise((resolve, reject) => {\n        database.transaction(\n            (tx) => {\n                tx.executeSql(\n                    `SELECT * FROM readings ORDER BY datetime(measurement_time) DESC;`,\n                    [],\n                    (_, result) => {\n                        resolve(result.rows._array || []);\n                    }\n                );\n            },\n            (err) => {\n                console.error('listReadings - erro transaction:', err);\n                reject(err);\n            }\n        );\n    });\n}\n\n/**\n * Excluir leitura por ID\n */\nexport async function deleteReading(id: string): Promise<boolean> {\n    const database = getDB();\n\n    return new Promise((resolve, reject) => {\n        database.transaction(\n            (tx) => {\n                tx.executeSql(\n                    'DELETE FROM readings WHERE id = ?;',\n                    [id],\n                    (_, result) => {\n                        // Verifica se alguma linha foi afetada. Se rowsAffected for > 0, foi um sucesso.\n                        resolve(result.rowsAffected > 0); \n                    },\n                    (_, error) => {\n                        console.error(\"deleteReading - erro SQL:\", error);\n                        reject(error);\n                        return false;\n                    }\n                );\n            },\n            (error) => {\n                console.error(\"deleteReading - erro transaction:\", error);\n                reject(error);\n            },\n            () => {\n                resolve(true); // Se a transação fechar sem erro SQL, considera sucesso\n            } \n        );\n    });\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}