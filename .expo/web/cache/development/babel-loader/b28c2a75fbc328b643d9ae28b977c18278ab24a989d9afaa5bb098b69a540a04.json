{"ast":null,"code":"'use strict';\n\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport { ConnectionPriority } from \"./TypeDefinition\";\nimport { isIOS } from \"./Utils\";\nexport var Device = function () {\n  function Device(nativeDevice, manager) {\n    _classCallCheck(this, Device);\n    Object.assign(this, nativeDevice);\n    Object.defineProperty(this, '_manager', {\n      value: manager,\n      enumerable: false\n    });\n  }\n  return _createClass(Device, [{\n    key: \"requestConnectionPriority\",\n    value: function requestConnectionPriority(connectionPriority, transactionId) {\n      return this._manager.requestConnectionPriorityForDevice(this.id, connectionPriority, transactionId);\n    }\n  }, {\n    key: \"readRSSI\",\n    value: function readRSSI(transactionId) {\n      return this._manager.readRSSIForDevice(this.id, transactionId);\n    }\n  }, {\n    key: \"requestMTU\",\n    value: function requestMTU(mtu, transactionId) {\n      return this._manager.requestMTUForDevice(this.id, mtu, transactionId);\n    }\n  }, {\n    key: \"connect\",\n    value: function connect(options) {\n      return this._manager.connectToDevice(this.id, options);\n    }\n  }, {\n    key: \"cancelConnection\",\n    value: function cancelConnection() {\n      return this._manager.cancelDeviceConnection(this.id);\n    }\n  }, {\n    key: \"isConnected\",\n    value: function isConnected() {\n      return this._manager.isDeviceConnected(this.id);\n    }\n  }, {\n    key: \"onDisconnected\",\n    value: function onDisconnected(listener) {\n      return this._manager.onDeviceDisconnected(this.id, listener);\n    }\n  }, {\n    key: \"discoverAllServicesAndCharacteristics\",\n    value: function discoverAllServicesAndCharacteristics(transactionId) {\n      return this._manager.discoverAllServicesAndCharacteristicsForDevice(this.id, transactionId);\n    }\n  }, {\n    key: \"services\",\n    value: function services() {\n      return this._manager.servicesForDevice(this.id);\n    }\n  }, {\n    key: \"characteristicsForService\",\n    value: function characteristicsForService(serviceUUID) {\n      return this._manager.characteristicsForDevice(this.id, serviceUUID);\n    }\n  }, {\n    key: \"descriptorsForService\",\n    value: function descriptorsForService(serviceUUID, characteristicUUID) {\n      return this._manager.descriptorsForDevice(this.id, serviceUUID, characteristicUUID);\n    }\n  }, {\n    key: \"readCharacteristicForService\",\n    value: function readCharacteristicForService(serviceUUID, characteristicUUID, transactionId) {\n      return this._manager.readCharacteristicForDevice(this.id, serviceUUID, characteristicUUID, transactionId);\n    }\n  }, {\n    key: \"writeCharacteristicWithResponseForService\",\n    value: function writeCharacteristicWithResponseForService(serviceUUID, characteristicUUID, valueBase64, transactionId) {\n      return this._manager.writeCharacteristicWithResponseForDevice(this.id, serviceUUID, characteristicUUID, valueBase64, transactionId);\n    }\n  }, {\n    key: \"writeCharacteristicWithoutResponseForService\",\n    value: function writeCharacteristicWithoutResponseForService(serviceUUID, characteristicUUID, valueBase64, transactionId) {\n      return this._manager.writeCharacteristicWithoutResponseForDevice(this.id, serviceUUID, characteristicUUID, valueBase64, transactionId);\n    }\n  }, {\n    key: \"monitorCharacteristicForService\",\n    value: function monitorCharacteristicForService(serviceUUID, characteristicUUID, listener, transactionId, subscriptionType) {\n      var _this$_manager;\n      var commonArgs = [this.id, serviceUUID, characteristicUUID, listener, transactionId];\n      var args = isIOS ? commonArgs : [].concat(commonArgs, [subscriptionType]);\n      return (_this$_manager = this._manager).monitorCharacteristicForDevice.apply(_this$_manager, _toConsumableArray(args));\n    }\n  }, {\n    key: \"readDescriptorForService\",\n    value: (function () {\n      var _readDescriptorForService = _asyncToGenerator(function* (serviceUUID, characteristicUUID, descriptorUUID, transactionId) {\n        return this._manager.readDescriptorForDevice(this.id, serviceUUID, characteristicUUID, descriptorUUID, transactionId);\n      });\n      function readDescriptorForService(_x, _x2, _x3, _x4) {\n        return _readDescriptorForService.apply(this, arguments);\n      }\n      return readDescriptorForService;\n    }())\n  }, {\n    key: \"writeDescriptorForService\",\n    value: (function () {\n      var _writeDescriptorForService = _asyncToGenerator(function* (serviceUUID, characteristicUUID, descriptorUUID, valueBase64, transactionId) {\n        return this._manager.writeDescriptorForDevice(this.id, serviceUUID, characteristicUUID, descriptorUUID, valueBase64, transactionId);\n      });\n      function writeDescriptorForService(_x5, _x6, _x7, _x8, _x9) {\n        return _writeDescriptorForService.apply(this, arguments);\n      }\n      return writeDescriptorForService;\n    }())\n  }]);\n}();","map":{"version":3,"names":["_asyncToGenerator","_toConsumableArray","_classCallCheck","_createClass","ConnectionPriority","isIOS","Device","nativeDevice","manager","Object","assign","defineProperty","value","enumerable","key","requestConnectionPriority","connectionPriority","transactionId","_manager","requestConnectionPriorityForDevice","id","readRSSI","readRSSIForDevice","requestMTU","mtu","requestMTUForDevice","connect","options","connectToDevice","cancelConnection","cancelDeviceConnection","isConnected","isDeviceConnected","onDisconnected","listener","onDeviceDisconnected","discoverAllServicesAndCharacteristics","discoverAllServicesAndCharacteristicsForDevice","services","servicesForDevice","characteristicsForService","serviceUUID","characteristicsForDevice","descriptorsForService","characteristicUUID","descriptorsForDevice","readCharacteristicForService","readCharacteristicForDevice","writeCharacteristicWithResponseForService","valueBase64","writeCharacteristicWithResponseForDevice","writeCharacteristicWithoutResponseForService","writeCharacteristicWithoutResponseForDevice","monitorCharacteristicForService","subscriptionType","_this$_manager","commonArgs","args","concat","monitorCharacteristicForDevice","apply","_readDescriptorForService","descriptorUUID","readDescriptorForDevice","readDescriptorForService","_x","_x2","_x3","_x4","arguments","_writeDescriptorForService","writeDescriptorForDevice","writeDescriptorForService","_x5","_x6","_x7","_x8","_x9"],"sources":["C:/Users/Usu√°rio/Desktop/glucocare/node_modules/react-native-ble-plx/src/Device.js"],"sourcesContent":["// @flow\n'use strict'\n\nimport type { BleManager } from './BleManager'\nimport type { BleError } from './BleError'\nimport type { Characteristic } from './Characteristic'\nimport type { Service } from './Service'\nimport type { Descriptor } from './Descriptor'\nimport { ConnectionPriority } from './TypeDefinition'\nimport type { NativeDevice } from './BleModule'\nimport type {\n  DeviceId,\n  Base64,\n  UUID,\n  Subscription,\n  TransactionId,\n  CharacteristicSubscriptionType,\n  ConnectionOptions\n} from './TypeDefinition'\nimport { isIOS } from './Utils'\n\n/**\n * Device instance which can be retrieved only by calling\n * {@link #blemanagerstartdevicescan|bleManager.startDeviceScan()}.\n */\nexport class Device implements NativeDevice {\n  /**\n   * Internal BLE Manager handle\n   * @private\n   */\n  _manager: BleManager\n\n  /**\n   * Device identifier: MAC address on Android and UUID on iOS.\n   */\n  id: DeviceId\n\n  /**\n   * Device name if present\n   */\n  name: ?string\n\n  /**\n   * Current Received Signal Strength Indication of device\n   */\n  rssi: ?number\n\n  /**\n   * Current Maximum Transmission Unit for this device. When device is not connected\n   * default value of 23 is used.\n   */\n  mtu: number\n\n  // Advertisement\n\n  /**\n   * Device's custom manufacturer data. Its format is defined by manufacturer.\n   */\n  manufacturerData: ?Base64\n\n  /**\n   * Raw device scan data. When you have specific advertiser data,\n   * you can implement your own processing.\n   */\n  rawScanRecord: Base64\n\n  /**\n   * Map of service UUIDs (as keys) with associated data (as values).\n   */\n  serviceData: ?{ [uuid: UUID]: Base64 }\n\n  /**\n   * List of available services visible during scanning.\n   */\n  serviceUUIDs: ?Array<UUID>\n\n  /**\n   * User friendly name of device.\n   */\n  localName: ?string\n\n  /**\n   * Transmission power level of device.\n   */\n  txPowerLevel: ?number\n\n  /**\n   * List of solicited service UUIDs.\n   */\n  solicitedServiceUUIDs: ?Array<UUID>\n\n  /**\n   * Is device connectable. [iOS only]\n   */\n  isConnectable: ?boolean\n\n  /**\n   * List of overflow service UUIDs. [iOS only]\n   */\n  overflowServiceUUIDs: ?Array<UUID>\n\n  /**\n   * Private constructor used to create {@link Device} object.\n   *\n   * @param {NativeDevice} nativeDevice Native device properties\n   * @param {BleManager} manager {@link BleManager} handle\n   * @private\n   */\n  constructor(nativeDevice: NativeDevice, manager: BleManager) {\n    Object.assign(this, nativeDevice)\n    Object.defineProperty(this, '_manager', { value: manager, enumerable: false })\n  }\n\n  /**\n   * {@link #blemanagerrequestconnectionpriorityfordevice|bleManager.requestConnectionPriorityForDevice()} with partially filled arguments.\n   *\n   * @param {ConnectionPriority} connectionPriority: Connection priority.\n   * @param {?TransactionId} transactionId Transaction handle used to cancel operation.\n   * @returns {Promise<Device>} Connected device.\n   */\n  requestConnectionPriority(\n    connectionPriority: $Values<typeof ConnectionPriority>,\n    transactionId: ?TransactionId\n  ): Promise<Device> {\n    return this._manager.requestConnectionPriorityForDevice(this.id, connectionPriority, transactionId)\n  }\n\n  /**\n   * {@link #blemanagerreadrssifordevice|bleManager.readRSSIForDevice()} with partially filled arguments.\n   *\n   * @param {?TransactionId} transactionId Transaction handle used to cancel operation.\n   * @returns {Promise<Device>} This device with updated RSSI value.\n   */\n  readRSSI(transactionId: ?TransactionId): Promise<Device> {\n    return this._manager.readRSSIForDevice(this.id, transactionId)\n  }\n\n  /**\n   * {@link #blemanagerrequestmtufordevice|bleManager.requestMTUForDevice()} with partially filled arguments.\n   *\n   * @param {?TransactionId} transactionId Transaction handle used to cancel operation.\n   * @returns {Promise<Device>} Device with updated MTU size. Default value is 23.\n   */\n  requestMTU(mtu: number, transactionId: ?TransactionId): Promise<Device> {\n    return this._manager.requestMTUForDevice(this.id, mtu, transactionId)\n  }\n\n  /**\n   * {@link #blemanagerconnecttodevice|bleManager.connectToDevice()} with partially filled arguments.\n   *\n   * @param {?ConnectionOptions} options Platform specific options for connection establishment. Not used currently.\n   * @returns {Promise<Device>} Connected {@link Device} object if successful.\n   */\n  connect(options: ?ConnectionOptions): Promise<Device> {\n    return this._manager.connectToDevice(this.id, options)\n  }\n\n  /**\n   * {@link #blemanagercanceldeviceconnection|bleManager.cancelDeviceConnection()} with partially filled arguments.\n   *\n   * @returns {Promise<Device>} Returns closed {@link Device} when operation is successful.\n   */\n  cancelConnection(): Promise<Device> {\n    return this._manager.cancelDeviceConnection(this.id)\n  }\n\n  /**\n   * {@link #blemanagerisdeviceconnected|bleManager.isDeviceConnected()} with partially filled arguments.\n   *\n   * @returns {Promise<boolean>} Promise which emits `true` if device is connected, and `false` otherwise.\n   */\n  isConnected(): Promise<boolean> {\n    return this._manager.isDeviceConnected(this.id)\n  }\n\n  /**\n   * {@link #blemanagerondevicedisconnected|bleManager.onDeviceDisconnected()} with partially filled arguments.\n   *\n   * @param {function(error: ?BleError, device: Device)} listener callback returning error as a reason of disconnection\n   * if available and {@link Device} object. If an error is null, that means the connection was terminated by\n   * {@link #blemanagercanceldeviceconnection|bleManager.cancelDeviceConnection()} call.\n   * @returns {Subscription} Subscription on which `remove()` function can be called to unsubscribe.\n   */\n  onDisconnected(listener: (error: ?BleError, device: Device) => void): Subscription {\n    return this._manager.onDeviceDisconnected(this.id, listener)\n  }\n\n  /**\n   * {@link #blemanagerdiscoverallservicesandcharacteristicsfordevice|bleManager.discoverAllServicesAndCharacteristicsForDevice()} with partially filled arguments.\n   *\n   * @param {?TransactionId} transactionId Transaction handle used to cancel operation\n   * @returns {Promise<Device>} Promise which emits {@link Device} object if all available services and\n   * characteristics have been discovered.\n   */\n  discoverAllServicesAndCharacteristics(transactionId: ?TransactionId): Promise<Device> {\n    return this._manager.discoverAllServicesAndCharacteristicsForDevice(this.id, transactionId)\n  }\n\n  /**\n   * {@link #blemanagerservicesfordevice|bleManager.servicesForDevice()} with partially filled arguments.\n   *\n   * @returns {Promise<Service[]>} Promise which emits array of {@link Service} objects which are discovered by this\n   * device.\n   */\n  services(): Promise<Service[]> {\n    return this._manager.servicesForDevice(this.id)\n  }\n\n  /**\n   * {@link #blemanagercharacteristicsfordevice|bleManager.characteristicsForDevice()} with partially filled arguments.\n   *\n   * @param {UUID} serviceUUID {@link Service} UUID.\n   * @returns {Promise<Characteristic[]>} Promise which emits array of {@link Characteristic} objects which are\n   * discovered for a {@link Device} in specified {@link Service}.\n   */\n  characteristicsForService(serviceUUID: string): Promise<Characteristic[]> {\n    return this._manager.characteristicsForDevice(this.id, serviceUUID)\n  }\n\n  /**\n   * {@link #blemanagerdescriptorsfordevice|bleManager.descriptorsForDevice()} with partially filled arguments.\n   *\n   * @param {UUID} serviceUUID {@link Service} UUID.\n   * @param {UUID} characteristicUUID {@link Characteristic} UUID.\n   * @returns {Promise<Array<Descriptor>>} Promise which emits array of {@link Descriptor} objects which are\n   * discovered for this {@link Characteristic}.\n   */\n  descriptorsForService(serviceUUID: UUID, characteristicUUID: UUID): Promise<Array<Descriptor>> {\n    return this._manager.descriptorsForDevice(this.id, serviceUUID, characteristicUUID)\n  }\n\n  /**\n   * {@link #blemanagerreadcharacteristicfordevice|bleManager.readCharacteristicForDevice()} with partially filled arguments.\n   *\n   * @param {UUID} serviceUUID {@link Service} UUID.\n   * @param {UUID} characteristicUUID {@link Characteristic} UUID.\n   * @param {?TransactionId} transactionId optional `transactionId` which can be used in\n   * {@link #blemanagercanceltransaction|bleManager.cancelTransaction()} function.\n   * @returns {Promise<Characteristic>} Promise which emits first {@link Characteristic} object matching specified\n   * UUID paths. Latest value of {@link Characteristic} will be stored inside returned object.\n   */\n  readCharacteristicForService(\n    serviceUUID: UUID,\n    characteristicUUID: UUID,\n    transactionId: ?TransactionId\n  ): Promise<Characteristic> {\n    return this._manager.readCharacteristicForDevice(this.id, serviceUUID, characteristicUUID, transactionId)\n  }\n\n  /**\n   * {@link #blemanagerwritecharacteristicwithresponsefordevice|bleManager.writeCharacteristicWithResponseForDevice()} with partially filled arguments.\n   *\n   * @param {UUID} serviceUUID {@link Service} UUID.\n   * @param {UUID} characteristicUUID {@link Characteristic} UUID.\n   * @param {Base64} valueBase64 Value in Base64 format.\n   * @param {?TransactionId} transactionId optional `transactionId` which can be used in\n   * {@link #blemanagercanceltransaction|bleManager.cancelTransaction()} function.\n   * @returns {Promise<Characteristic>} Promise which emits first {@link Characteristic} object matching specified\n   * UUID paths. Latest value of characteristic may not be stored inside returned object.\n   */\n  writeCharacteristicWithResponseForService(\n    serviceUUID: UUID,\n    characteristicUUID: UUID,\n    valueBase64: Base64,\n    transactionId: ?TransactionId\n  ): Promise<Characteristic> {\n    return this._manager.writeCharacteristicWithResponseForDevice(\n      this.id,\n      serviceUUID,\n      characteristicUUID,\n      valueBase64,\n      transactionId\n    )\n  }\n\n  /**\n   * {@link #blemanagerwritecharacteristicwithoutresponsefordevice|bleManager.writeCharacteristicWithoutResponseForDevice()} with partially filled arguments.\n   *\n   * @param {UUID} serviceUUID {@link Service} UUID.\n   * @param {UUID} characteristicUUID {@link Characteristic} UUID.\n   * @param {Base64} valueBase64 Value in Base64 format.\n   * @param {?TransactionId} transactionId optional `transactionId` which can be used in\n   * {@link #blemanagercanceltransaction|bleManager.cancelTransaction()} function.\n   * @returns {Promise<Characteristic>} Promise which emits first {@link Characteristic} object matching specified\n   * UUID paths. Latest value of characteristic may not be stored inside returned object.\n   */\n  writeCharacteristicWithoutResponseForService(\n    serviceUUID: UUID,\n    characteristicUUID: UUID,\n    valueBase64: Base64,\n    transactionId: ?TransactionId\n  ): Promise<Characteristic> {\n    return this._manager.writeCharacteristicWithoutResponseForDevice(\n      this.id,\n      serviceUUID,\n      characteristicUUID,\n      valueBase64,\n      transactionId\n    )\n  }\n\n  /**\n   * {@link #blemanagermonitorcharacteristicfordevice|bleManager.monitorCharacteristicForDevice()} with partially filled arguments.\n   *\n   * @param {UUID} serviceUUID {@link Service} UUID.\n   * @param {UUID} characteristicUUID {@link Characteristic} UUID.\n   * @param {function(error: ?BleError, characteristic: ?Characteristic)} listener - callback which emits\n   * {@link Characteristic} objects with modified value for each notification.\n   * @param {?TransactionId} transactionId optional `transactionId` which can be used in\n   * @param {?CharacteristicSubscriptionType} subscriptionType [android only] subscription type of the characteristic\n   * {@link #blemanagercanceltransaction|bleManager.cancelTransaction()} function.\n   * @returns {Subscription} Subscription on which `remove()` function can be called to unsubscribe.\n   */\n  monitorCharacteristicForService(\n    serviceUUID: UUID,\n    characteristicUUID: UUID,\n    listener: (error: ?BleError, characteristic: ?Characteristic) => void,\n    transactionId: ?TransactionId,\n    subscriptionType?: CharacteristicSubscriptionType\n  ): Subscription {\n    const commonArgs = [this.id, serviceUUID, characteristicUUID, listener, transactionId]\n    const args = isIOS ? commonArgs : [...commonArgs, subscriptionType]\n\n    return this._manager.monitorCharacteristicForDevice(...args)\n  }\n\n  /**\n   * {@link #blemanagerreaddescriptorfordevice|bleManager.readDescriptorForDevice()} with partially filled arguments.\n   *\n   * @param {UUID} serviceUUID {@link Service} UUID.\n   * @param {UUID} characteristicUUID {@link Characteristic} UUID.\n   * @param {UUID} descriptorUUID {@link Descriptor} UUID.\n   * @param {?TransactionId} transactionId optional `transactionId` which can be used in\n   * {@link #blemanagercanceltransaction|cancelTransaction()} function.\n   * @returns {Promise<Descriptor>} Promise which emits first {@link Descriptor} object matching specified\n   * UUID paths. Latest value of {@link Descriptor} will be stored inside returned object.\n   */\n  async readDescriptorForService(\n    serviceUUID: UUID,\n    characteristicUUID: UUID,\n    descriptorUUID: UUID,\n    transactionId: ?TransactionId\n  ): Promise<Descriptor> {\n    return this._manager.readDescriptorForDevice(\n      this.id,\n      serviceUUID,\n      characteristicUUID,\n      descriptorUUID,\n      transactionId\n    )\n  }\n\n  /**\n   * {@link #blemanagerwritedescriptorfordevice|bleManager.writeDescriptorForDevice()} with partially filled arguments.\n   *\n   * @param {UUID} serviceUUID {@link Service} UUID.\n   * @param {UUID} characteristicUUID Characteristic UUID\n   * @param {UUID} descriptorUUID Descriptor UUID\n   * @param {Base64} valueBase64 Value to be set coded in Base64\n   * @param {?TransactionId} transactionId Transaction handle used to cancel operation\n   * @returns {Promise<Descriptor>} Descriptor which saved passed value.\n   */\n  async writeDescriptorForService(\n    serviceUUID: UUID,\n    characteristicUUID: UUID,\n    descriptorUUID: UUID,\n    valueBase64: Base64,\n    transactionId: ?TransactionId\n  ): Promise<Descriptor> {\n    return this._manager.writeDescriptorForDevice(\n      this.id,\n      serviceUUID,\n      characteristicUUID,\n      descriptorUUID,\n      valueBase64,\n      transactionId\n    )\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}