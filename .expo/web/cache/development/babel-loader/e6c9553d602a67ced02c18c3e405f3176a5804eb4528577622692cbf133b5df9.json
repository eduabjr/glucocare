{"ast":null,"code":"'use strict';\n\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport { Device } from \"./Device\";\nimport { Service } from \"./Service\";\nimport { Characteristic } from \"./Characteristic\";\nimport { Descriptor } from \"./Descriptor\";\nimport { State, LogLevel, ConnectionPriority } from \"./TypeDefinition\";\nimport { BleModule, EventEmitter } from \"./BleModule\";\nimport { parseBleError, BleError, BleErrorCode, BleErrorCodeMessage, BleATTErrorCode, BleAndroidErrorCode, BleIOSErrorCode } from \"./BleError\";\nimport { isIOS } from \"./Utils\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nvar enableDisableDeprecatedMessage = 'react-native-ble-plx: The enable and disable feature is no longer supported. In Android SDK 31+ there were major changes in permissions, which may cause problems with these functions, and in SDK 33+ they were completely removed.';\nexport var BleManager = function () {\n  function BleManager() {\n    var _this = this;\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    _classCallCheck(this, BleManager);\n    if (BleManager.sharedInstance !== null) {\n      return BleManager.sharedInstance;\n    }\n    this._eventEmitter = new EventEmitter(BleModule);\n    this._uniqueId = 0;\n    this._activePromises = {};\n    this._activeSubscriptions = {};\n    var restoreStateFunction = options.restoreStateFunction;\n    if (restoreStateFunction != null && options.restoreStateIdentifier != null) {\n      this._activeSubscriptions[this._nextUniqueID()] = this._eventEmitter.addListener(BleModule.RestoreStateEvent, function (nativeRestoredState) {\n        if (nativeRestoredState == null) {\n          restoreStateFunction(null);\n          return;\n        }\n        restoreStateFunction({\n          connectedPeripherals: nativeRestoredState.connectedPeripherals.map(function (nativeDevice) {\n            return new Device(nativeDevice, _this);\n          })\n        });\n      });\n    }\n    this._errorCodesToMessagesMapping = options.errorCodesToMessagesMapping ? options.errorCodesToMessagesMapping : BleErrorCodeMessage;\n    BleModule.createClient(options.restoreStateIdentifier || null);\n    BleManager.sharedInstance = this;\n  }\n  return _createClass(BleManager, [{\n    key: \"_destroyPromises\",\n    value: function _destroyPromises() {\n      var destroyedError = new BleError({\n        errorCode: BleErrorCode.BluetoothManagerDestroyed,\n        attErrorCode: null,\n        iosErrorCode: null,\n        androidErrorCode: null,\n        reason: null\n      }, this._errorCodesToMessagesMapping);\n      for (var _id in this._activePromises) {\n        this._activePromises[_id](destroyedError);\n      }\n    }\n  }, {\n    key: \"_destroySubscriptions\",\n    value: function _destroySubscriptions() {\n      for (var _id2 in this._activeSubscriptions) {\n        this._activeSubscriptions[_id2].remove();\n      }\n    }\n  }, {\n    key: \"destroy\",\n    value: (function () {\n      var _destroy = _asyncToGenerator(function* () {\n        var response = yield this._callPromise(BleModule.destroyClient());\n        if (this._scanEventSubscription != null) {\n          this._scanEventSubscription.remove();\n          this._scanEventSubscription = null;\n        }\n        this._destroySubscriptions();\n        if (BleManager.sharedInstance) {\n          BleManager.sharedInstance = null;\n        }\n        this._destroyPromises();\n        return response;\n      });\n      function destroy() {\n        return _destroy.apply(this, arguments);\n      }\n      return destroy;\n    }())\n  }, {\n    key: \"_nextUniqueID\",\n    value: function _nextUniqueID() {\n      this._uniqueId += 1;\n      return this._uniqueId.toString();\n    }\n  }, {\n    key: \"_callPromise\",\n    value: (function () {\n      var _callPromise2 = _asyncToGenerator(function* (promise) {\n        var _this2 = this;\n        var id = this._nextUniqueID();\n        try {\n          var destroyPromise = new Promise(function (resolve, reject) {\n            _this2._activePromises[id] = reject;\n          });\n          var value = yield Promise.race([destroyPromise, promise]);\n          delete this._activePromises[id];\n          return value;\n        } catch (error) {\n          delete this._activePromises[id];\n          throw parseBleError(error.message, this._errorCodesToMessagesMapping);\n        }\n      });\n      function _callPromise(_x) {\n        return _callPromise2.apply(this, arguments);\n      }\n      return _callPromise;\n    }())\n  }, {\n    key: \"setLogLevel\",\n    value: function setLogLevel(logLevel) {\n      return this._callPromise(BleModule.setLogLevel(logLevel));\n    }\n  }, {\n    key: \"logLevel\",\n    value: function logLevel() {\n      return this._callPromise(BleModule.logLevel());\n    }\n  }, {\n    key: \"cancelTransaction\",\n    value: function cancelTransaction(transactionId) {\n      return this._callPromise(BleModule.cancelTransaction(transactionId));\n    }\n  }, {\n    key: \"enable\",\n    value: function () {\n      var _enable = _asyncToGenerator(function* (transactionId) {\n        if (!transactionId) {\n          transactionId = this._nextUniqueID();\n        }\n        yield this._callPromise(BleModule.enable(transactionId));\n        return this;\n      });\n      function enable(_x2) {\n        return _enable.apply(this, arguments);\n      }\n      return enable;\n    }()\n  }, {\n    key: \"disable\",\n    value: (function () {\n      var _disable = _asyncToGenerator(function* (transactionId) {\n        console.warn(enableDisableDeprecatedMessage);\n        if (!transactionId) {\n          transactionId = this._nextUniqueID();\n        }\n        yield this._callPromise(BleModule.disable(transactionId));\n        return this;\n      });\n      function disable(_x3) {\n        return _disable.apply(this, arguments);\n      }\n      return disable;\n    }())\n  }, {\n    key: \"state\",\n    value: function state() {\n      return this._callPromise(BleModule.state());\n    }\n  }, {\n    key: \"onStateChange\",\n    value: function onStateChange(listener) {\n      var _this3 = this;\n      var emitCurrentState = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var subscription = this._eventEmitter.addListener(BleModule.StateChangeEvent, listener);\n      var id = this._nextUniqueID();\n      var wrappedSubscription;\n      if (emitCurrentState) {\n        var cancelled = false;\n        this._callPromise(this.state()).then(function (currentState) {\n          if (!cancelled) {\n            listener(currentState);\n          }\n        });\n        wrappedSubscription = {\n          remove: function remove() {\n            if (_this3._activeSubscriptions[id] != null) {\n              cancelled = true;\n              delete _this3._activeSubscriptions[id];\n              subscription.remove();\n            }\n          }\n        };\n      } else {\n        wrappedSubscription = {\n          remove: function remove() {\n            if (_this3._activeSubscriptions[id] != null) {\n              delete _this3._activeSubscriptions[id];\n              subscription.remove();\n            }\n          }\n        };\n      }\n      this._activeSubscriptions[id] = wrappedSubscription;\n      return wrappedSubscription;\n    }\n  }, {\n    key: \"startDeviceScan\",\n    value: function () {\n      var _startDeviceScan = _asyncToGenerator(function* (UUIDs, options, listener) {\n        var _this4 = this;\n        var scanListener = function scanListener(_ref) {\n          var _ref2 = _slicedToArray(_ref, 2),\n            error = _ref2[0],\n            nativeDevice = _ref2[1];\n          listener(error ? parseBleError(error, _this4._errorCodesToMessagesMapping) : null, nativeDevice ? new Device(nativeDevice, _this4) : null);\n        };\n        this._scanEventSubscription = this._eventEmitter.addListener(BleModule.ScanEvent, scanListener);\n        return this._callPromise(BleModule.startDeviceScan(UUIDs, options));\n      });\n      function startDeviceScan(_x4, _x5, _x6) {\n        return _startDeviceScan.apply(this, arguments);\n      }\n      return startDeviceScan;\n    }()\n  }, {\n    key: \"stopDeviceScan\",\n    value: function stopDeviceScan() {\n      if (this._scanEventSubscription != null) {\n        this._scanEventSubscription.remove();\n        this._scanEventSubscription = null;\n      }\n      return this._callPromise(BleModule.stopDeviceScan());\n    }\n  }, {\n    key: \"requestConnectionPriorityForDevice\",\n    value: (function () {\n      var _requestConnectionPriorityForDevice = _asyncToGenerator(function* (deviceIdentifier, connectionPriority, transactionId) {\n        if (!transactionId) {\n          transactionId = this._nextUniqueID();\n        }\n        var nativeDevice = yield this._callPromise(BleModule.requestConnectionPriorityForDevice(deviceIdentifier, connectionPriority, transactionId));\n        return new Device(nativeDevice, this);\n      });\n      function requestConnectionPriorityForDevice(_x7, _x8, _x9) {\n        return _requestConnectionPriorityForDevice.apply(this, arguments);\n      }\n      return requestConnectionPriorityForDevice;\n    }())\n  }, {\n    key: \"readRSSIForDevice\",\n    value: (function () {\n      var _readRSSIForDevice = _asyncToGenerator(function* (deviceIdentifier, transactionId) {\n        if (!transactionId) {\n          transactionId = this._nextUniqueID();\n        }\n        var nativeDevice = yield this._callPromise(BleModule.readRSSIForDevice(deviceIdentifier, transactionId));\n        return new Device(nativeDevice, this);\n      });\n      function readRSSIForDevice(_x0, _x1) {\n        return _readRSSIForDevice.apply(this, arguments);\n      }\n      return readRSSIForDevice;\n    }())\n  }, {\n    key: \"requestMTUForDevice\",\n    value: (function () {\n      var _requestMTUForDevice = _asyncToGenerator(function* (deviceIdentifier, mtu, transactionId) {\n        if (!transactionId) {\n          transactionId = this._nextUniqueID();\n        }\n        var nativeDevice = yield this._callPromise(BleModule.requestMTUForDevice(deviceIdentifier, mtu, transactionId));\n        return new Device(nativeDevice, this);\n      });\n      function requestMTUForDevice(_x10, _x11, _x12) {\n        return _requestMTUForDevice.apply(this, arguments);\n      }\n      return requestMTUForDevice;\n    }())\n  }, {\n    key: \"devices\",\n    value: function () {\n      var _devices = _asyncToGenerator(function* (deviceIdentifiers) {\n        var _this5 = this;\n        var nativeDevices = yield this._callPromise(BleModule.devices(deviceIdentifiers));\n        return nativeDevices.map(function (nativeDevice) {\n          return new Device(nativeDevice, _this5);\n        });\n      });\n      function devices(_x13) {\n        return _devices.apply(this, arguments);\n      }\n      return devices;\n    }()\n  }, {\n    key: \"connectedDevices\",\n    value: (function () {\n      var _connectedDevices = _asyncToGenerator(function* (serviceUUIDs) {\n        var _this6 = this;\n        var nativeDevices = yield this._callPromise(BleModule.connectedDevices(serviceUUIDs));\n        return nativeDevices.map(function (nativeDevice) {\n          return new Device(nativeDevice, _this6);\n        });\n      });\n      function connectedDevices(_x14) {\n        return _connectedDevices.apply(this, arguments);\n      }\n      return connectedDevices;\n    }())\n  }, {\n    key: \"connectToDevice\",\n    value: function () {\n      var _connectToDevice = _asyncToGenerator(function* (deviceIdentifier, options) {\n        if (Platform.OS === 'android' && (yield this.isDeviceConnected(deviceIdentifier))) {\n          yield this.cancelDeviceConnection(deviceIdentifier);\n        }\n        var nativeDevice = yield this._callPromise(BleModule.connectToDevice(deviceIdentifier, options));\n        return new Device(nativeDevice, this);\n      });\n      function connectToDevice(_x15, _x16) {\n        return _connectToDevice.apply(this, arguments);\n      }\n      return connectToDevice;\n    }()\n  }, {\n    key: \"cancelDeviceConnection\",\n    value: (function () {\n      var _cancelDeviceConnection = _asyncToGenerator(function* (deviceIdentifier) {\n        var nativeDevice = yield this._callPromise(BleModule.cancelDeviceConnection(deviceIdentifier));\n        return new Device(nativeDevice, this);\n      });\n      function cancelDeviceConnection(_x17) {\n        return _cancelDeviceConnection.apply(this, arguments);\n      }\n      return cancelDeviceConnection;\n    }())\n  }, {\n    key: \"onDeviceDisconnected\",\n    value: function onDeviceDisconnected(deviceIdentifier, listener) {\n      var _this7 = this;\n      var disconnectionListener = function disconnectionListener(_ref3) {\n        var _ref4 = _slicedToArray(_ref3, 2),\n          error = _ref4[0],\n          nativeDevice = _ref4[1];\n        if (deviceIdentifier !== nativeDevice.id) {\n          return;\n        }\n        listener(error ? parseBleError(error, _this7._errorCodesToMessagesMapping) : null, new Device(nativeDevice, _this7));\n      };\n      var subscription = this._eventEmitter.addListener(BleModule.DisconnectionEvent, disconnectionListener);\n      var id = this._nextUniqueID();\n      var wrappedSubscription = {\n        remove: function remove() {\n          if (_this7._activeSubscriptions[id] != null) {\n            delete _this7._activeSubscriptions[id];\n            subscription.remove();\n          }\n        }\n      };\n      this._activeSubscriptions[id] = wrappedSubscription;\n      return wrappedSubscription;\n    }\n  }, {\n    key: \"isDeviceConnected\",\n    value: function isDeviceConnected(deviceIdentifier) {\n      return this._callPromise(BleModule.isDeviceConnected(deviceIdentifier));\n    }\n  }, {\n    key: \"discoverAllServicesAndCharacteristicsForDevice\",\n    value: function () {\n      var _discoverAllServicesAndCharacteristicsForDevice = _asyncToGenerator(function* (deviceIdentifier, transactionId) {\n        if (!transactionId) {\n          transactionId = this._nextUniqueID();\n        }\n        var nativeDevice = yield this._callPromise(BleModule.discoverAllServicesAndCharacteristicsForDevice(deviceIdentifier, transactionId));\n        var services = yield this._callPromise(BleModule.servicesForDevice(deviceIdentifier));\n        var serviceUUIDs = (services || []).map(function (service) {\n          return service.uuid;\n        });\n        var device = _objectSpread(_objectSpread({}, nativeDevice), {}, {\n          serviceUUIDs: serviceUUIDs\n        });\n        return new Device(device, this);\n      });\n      function discoverAllServicesAndCharacteristicsForDevice(_x18, _x19) {\n        return _discoverAllServicesAndCharacteristicsForDevice.apply(this, arguments);\n      }\n      return discoverAllServicesAndCharacteristicsForDevice;\n    }()\n  }, {\n    key: \"servicesForDevice\",\n    value: function () {\n      var _servicesForDevice = _asyncToGenerator(function* (deviceIdentifier) {\n        var _this8 = this;\n        var services = yield this._callPromise(BleModule.servicesForDevice(deviceIdentifier));\n        return services.map(function (nativeService) {\n          return new Service(nativeService, _this8);\n        });\n      });\n      function servicesForDevice(_x20) {\n        return _servicesForDevice.apply(this, arguments);\n      }\n      return servicesForDevice;\n    }()\n  }, {\n    key: \"characteristicsForDevice\",\n    value: function characteristicsForDevice(deviceIdentifier, serviceUUID) {\n      return this._handleCharacteristics(BleModule.characteristicsForDevice(deviceIdentifier, serviceUUID));\n    }\n  }, {\n    key: \"_characteristicsForService\",\n    value: function _characteristicsForService(serviceIdentifier) {\n      return this._handleCharacteristics(BleModule.characteristicsForService(serviceIdentifier));\n    }\n  }, {\n    key: \"_handleCharacteristics\",\n    value: (function () {\n      var _handleCharacteristics2 = _asyncToGenerator(function* (characteristicsPromise) {\n        var _this9 = this;\n        var characteristics = yield this._callPromise(characteristicsPromise);\n        return characteristics.map(function (nativeCharacteristic) {\n          return new Characteristic(nativeCharacteristic, _this9);\n        });\n      });\n      function _handleCharacteristics(_x21) {\n        return _handleCharacteristics2.apply(this, arguments);\n      }\n      return _handleCharacteristics;\n    }())\n  }, {\n    key: \"descriptorsForDevice\",\n    value: function descriptorsForDevice(deviceIdentifier, serviceUUID, characteristicUUID) {\n      return this._handleDescriptors(BleModule.descriptorsForDevice(deviceIdentifier, serviceUUID, characteristicUUID));\n    }\n  }, {\n    key: \"_descriptorsForService\",\n    value: function _descriptorsForService(serviceIdentifier, characteristicUUID) {\n      return this._handleDescriptors(BleModule.descriptorsForService(serviceIdentifier, characteristicUUID));\n    }\n  }, {\n    key: \"_descriptorsForCharacteristic\",\n    value: function _descriptorsForCharacteristic(characteristicIdentifier) {\n      return this._handleDescriptors(BleModule.descriptorsForCharacteristic(characteristicIdentifier));\n    }\n  }, {\n    key: \"_handleDescriptors\",\n    value: (function () {\n      var _handleDescriptors2 = _asyncToGenerator(function* (descriptorsPromise) {\n        var _this0 = this;\n        var descriptors = yield this._callPromise(descriptorsPromise);\n        return descriptors.map(function (nativeDescriptor) {\n          return new Descriptor(nativeDescriptor, _this0);\n        });\n      });\n      function _handleDescriptors(_x22) {\n        return _handleDescriptors2.apply(this, arguments);\n      }\n      return _handleDescriptors;\n    }())\n  }, {\n    key: \"readCharacteristicForDevice\",\n    value: function () {\n      var _readCharacteristicForDevice = _asyncToGenerator(function* (deviceIdentifier, serviceUUID, characteristicUUID, transactionId) {\n        if (!transactionId) {\n          transactionId = this._nextUniqueID();\n        }\n        var nativeCharacteristic = yield this._callPromise(BleModule.readCharacteristicForDevice(deviceIdentifier, serviceUUID, characteristicUUID, transactionId));\n        return new Characteristic(nativeCharacteristic, this);\n      });\n      function readCharacteristicForDevice(_x23, _x24, _x25, _x26) {\n        return _readCharacteristicForDevice.apply(this, arguments);\n      }\n      return readCharacteristicForDevice;\n    }()\n  }, {\n    key: \"_readCharacteristicForService\",\n    value: (function () {\n      var _readCharacteristicForService2 = _asyncToGenerator(function* (serviceIdentifier, characteristicUUID, transactionId) {\n        if (!transactionId) {\n          transactionId = this._nextUniqueID();\n        }\n        var nativeCharacteristic = yield this._callPromise(BleModule.readCharacteristicForService(serviceIdentifier, characteristicUUID, transactionId));\n        return new Characteristic(nativeCharacteristic, this);\n      });\n      function _readCharacteristicForService(_x27, _x28, _x29) {\n        return _readCharacteristicForService2.apply(this, arguments);\n      }\n      return _readCharacteristicForService;\n    }())\n  }, {\n    key: \"_readCharacteristic\",\n    value: (function () {\n      var _readCharacteristic2 = _asyncToGenerator(function* (characteristicIdentifier, transactionId) {\n        if (!transactionId) {\n          transactionId = this._nextUniqueID();\n        }\n        var nativeCharacteristic = yield this._callPromise(BleModule.readCharacteristic(characteristicIdentifier, transactionId));\n        return new Characteristic(nativeCharacteristic, this);\n      });\n      function _readCharacteristic(_x30, _x31) {\n        return _readCharacteristic2.apply(this, arguments);\n      }\n      return _readCharacteristic;\n    }())\n  }, {\n    key: \"writeCharacteristicWithResponseForDevice\",\n    value: (function () {\n      var _writeCharacteristicWithResponseForDevice = _asyncToGenerator(function* (deviceIdentifier, serviceUUID, characteristicUUID, base64Value, transactionId) {\n        if (!transactionId) {\n          transactionId = this._nextUniqueID();\n        }\n        var nativeCharacteristic = yield this._callPromise(BleModule.writeCharacteristicForDevice(deviceIdentifier, serviceUUID, characteristicUUID, base64Value, true, transactionId));\n        return new Characteristic(nativeCharacteristic, this);\n      });\n      function writeCharacteristicWithResponseForDevice(_x32, _x33, _x34, _x35, _x36) {\n        return _writeCharacteristicWithResponseForDevice.apply(this, arguments);\n      }\n      return writeCharacteristicWithResponseForDevice;\n    }())\n  }, {\n    key: \"_writeCharacteristicWithResponseForService\",\n    value: (function () {\n      var _writeCharacteristicWithResponseForService2 = _asyncToGenerator(function* (serviceIdentifier, characteristicUUID, base64Value, transactionId) {\n        if (!transactionId) {\n          transactionId = this._nextUniqueID();\n        }\n        var nativeCharacteristic = yield this._callPromise(BleModule.writeCharacteristicForService(serviceIdentifier, characteristicUUID, base64Value, true, transactionId));\n        return new Characteristic(nativeCharacteristic, this);\n      });\n      function _writeCharacteristicWithResponseForService(_x37, _x38, _x39, _x40) {\n        return _writeCharacteristicWithResponseForService2.apply(this, arguments);\n      }\n      return _writeCharacteristicWithResponseForService;\n    }())\n  }, {\n    key: \"_writeCharacteristicWithResponse\",\n    value: (function () {\n      var _writeCharacteristicWithResponse2 = _asyncToGenerator(function* (characteristicIdentifier, base64Value, transactionId) {\n        if (!transactionId) {\n          transactionId = this._nextUniqueID();\n        }\n        var nativeCharacteristic = yield this._callPromise(BleModule.writeCharacteristic(characteristicIdentifier, base64Value, true, transactionId));\n        return new Characteristic(nativeCharacteristic, this);\n      });\n      function _writeCharacteristicWithResponse(_x41, _x42, _x43) {\n        return _writeCharacteristicWithResponse2.apply(this, arguments);\n      }\n      return _writeCharacteristicWithResponse;\n    }())\n  }, {\n    key: \"writeCharacteristicWithoutResponseForDevice\",\n    value: (function () {\n      var _writeCharacteristicWithoutResponseForDevice = _asyncToGenerator(function* (deviceIdentifier, serviceUUID, characteristicUUID, base64Value, transactionId) {\n        if (!transactionId) {\n          transactionId = this._nextUniqueID();\n        }\n        var nativeCharacteristic = yield this._callPromise(BleModule.writeCharacteristicForDevice(deviceIdentifier, serviceUUID, characteristicUUID, base64Value, false, transactionId));\n        return new Characteristic(nativeCharacteristic, this);\n      });\n      function writeCharacteristicWithoutResponseForDevice(_x44, _x45, _x46, _x47, _x48) {\n        return _writeCharacteristicWithoutResponseForDevice.apply(this, arguments);\n      }\n      return writeCharacteristicWithoutResponseForDevice;\n    }())\n  }, {\n    key: \"_writeCharacteristicWithoutResponseForService\",\n    value: (function () {\n      var _writeCharacteristicWithoutResponseForService2 = _asyncToGenerator(function* (serviceIdentifier, characteristicUUID, base64Value, transactionId) {\n        if (!transactionId) {\n          transactionId = this._nextUniqueID();\n        }\n        var nativeCharacteristic = yield this._callPromise(BleModule.writeCharacteristicForService(serviceIdentifier, characteristicUUID, base64Value, false, transactionId));\n        return new Characteristic(nativeCharacteristic, this);\n      });\n      function _writeCharacteristicWithoutResponseForService(_x49, _x50, _x51, _x52) {\n        return _writeCharacteristicWithoutResponseForService2.apply(this, arguments);\n      }\n      return _writeCharacteristicWithoutResponseForService;\n    }())\n  }, {\n    key: \"_writeCharacteristicWithoutResponse\",\n    value: (function () {\n      var _writeCharacteristicWithoutResponse2 = _asyncToGenerator(function* (characteristicIdentifier, base64Value, transactionId) {\n        if (!transactionId) {\n          transactionId = this._nextUniqueID();\n        }\n        var nativeCharacteristic = yield this._callPromise(BleModule.writeCharacteristic(characteristicIdentifier, base64Value, false, transactionId));\n        return new Characteristic(nativeCharacteristic, this);\n      });\n      function _writeCharacteristicWithoutResponse(_x53, _x54, _x55) {\n        return _writeCharacteristicWithoutResponse2.apply(this, arguments);\n      }\n      return _writeCharacteristicWithoutResponse;\n    }())\n  }, {\n    key: \"monitorCharacteristicForDevice\",\n    value: function monitorCharacteristicForDevice(deviceIdentifier, serviceUUID, characteristicUUID, listener, transactionId, subscriptionType) {\n      var filledTransactionId = transactionId || this._nextUniqueID();\n      var commonArgs = [deviceIdentifier, serviceUUID, characteristicUUID, filledTransactionId];\n      var args = isIOS ? commonArgs : [].concat(commonArgs, [subscriptionType]);\n      return this._handleMonitorCharacteristic(BleModule.monitorCharacteristicForDevice.apply(BleModule, _toConsumableArray(args)), filledTransactionId, listener);\n    }\n  }, {\n    key: \"_monitorCharacteristicForService\",\n    value: function _monitorCharacteristicForService(serviceIdentifier, characteristicUUID, listener, transactionId, subscriptionType) {\n      var filledTransactionId = transactionId || this._nextUniqueID();\n      var commonArgs = [serviceIdentifier, characteristicUUID, filledTransactionId];\n      var args = isIOS ? commonArgs : [].concat(commonArgs, [subscriptionType]);\n      return this._handleMonitorCharacteristic(BleModule.monitorCharacteristicForService.apply(BleModule, _toConsumableArray(args)), filledTransactionId, listener);\n    }\n  }, {\n    key: \"_monitorCharacteristic\",\n    value: function _monitorCharacteristic(characteristicIdentifier, listener, transactionId, subscriptionType) {\n      var filledTransactionId = transactionId || this._nextUniqueID();\n      var commonArgs = [characteristicIdentifier, filledTransactionId];\n      var args = isIOS ? commonArgs : [].concat(commonArgs, [subscriptionType]);\n      return this._handleMonitorCharacteristic(BleModule.monitorCharacteristic.apply(BleModule, _toConsumableArray(args)), filledTransactionId, listener);\n    }\n  }, {\n    key: \"_handleMonitorCharacteristic\",\n    value: function _handleMonitorCharacteristic(monitorPromise, transactionId, listener) {\n      var _this1 = this;\n      var monitorListener = function monitorListener(_ref5) {\n        var _ref6 = _slicedToArray(_ref5, 3),\n          error = _ref6[0],\n          characteristic = _ref6[1],\n          msgTransactionId = _ref6[2];\n        if (transactionId !== msgTransactionId) {\n          return;\n        }\n        if (error) {\n          listener(parseBleError(error, _this1._errorCodesToMessagesMapping), null);\n          return;\n        }\n        listener(null, new Characteristic(characteristic, _this1));\n      };\n      var subscription = this._eventEmitter.addListener(BleModule.ReadEvent, monitorListener);\n      var id = this._nextUniqueID();\n      var wrappedSubscription = {\n        remove: function remove() {\n          if (_this1._activeSubscriptions[id] != null) {\n            delete _this1._activeSubscriptions[id];\n            subscription.remove();\n          }\n        }\n      };\n      this._activeSubscriptions[id] = wrappedSubscription;\n      this._callPromise(monitorPromise).then(function () {\n        wrappedSubscription.remove();\n      }, function (error) {\n        listener(error, null);\n        wrappedSubscription.remove();\n      });\n      return {\n        remove: function remove() {\n          BleModule.cancelTransaction(transactionId);\n        }\n      };\n    }\n  }, {\n    key: \"readDescriptorForDevice\",\n    value: function () {\n      var _readDescriptorForDevice = _asyncToGenerator(function* (deviceIdentifier, serviceUUID, characteristicUUID, descriptorUUID, transactionId) {\n        if (!transactionId) {\n          transactionId = this._nextUniqueID();\n        }\n        var nativeDescriptor = yield this._callPromise(BleModule.readDescriptorForDevice(deviceIdentifier, serviceUUID, characteristicUUID, descriptorUUID, transactionId));\n        return new Descriptor(nativeDescriptor, this);\n      });\n      function readDescriptorForDevice(_x56, _x57, _x58, _x59, _x60) {\n        return _readDescriptorForDevice.apply(this, arguments);\n      }\n      return readDescriptorForDevice;\n    }()\n  }, {\n    key: \"_readDescriptorForService\",\n    value: (function () {\n      var _readDescriptorForService2 = _asyncToGenerator(function* (serviceIdentifier, characteristicUUID, descriptorUUID, transactionId) {\n        if (!transactionId) {\n          transactionId = this._nextUniqueID();\n        }\n        var nativeDescriptor = yield this._callPromise(BleModule.readDescriptorForService(serviceIdentifier, characteristicUUID, descriptorUUID, transactionId));\n        return new Descriptor(nativeDescriptor, this);\n      });\n      function _readDescriptorForService(_x61, _x62, _x63, _x64) {\n        return _readDescriptorForService2.apply(this, arguments);\n      }\n      return _readDescriptorForService;\n    }())\n  }, {\n    key: \"_readDescriptorForCharacteristic\",\n    value: (function () {\n      var _readDescriptorForCharacteristic2 = _asyncToGenerator(function* (characteristicIdentifier, descriptorUUID, transactionId) {\n        if (!transactionId) {\n          transactionId = this._nextUniqueID();\n        }\n        var nativeDescriptor = yield this._callPromise(BleModule.readDescriptorForCharacteristic(characteristicIdentifier, descriptorUUID, transactionId));\n        return new Descriptor(nativeDescriptor, this);\n      });\n      function _readDescriptorForCharacteristic(_x65, _x66, _x67) {\n        return _readDescriptorForCharacteristic2.apply(this, arguments);\n      }\n      return _readDescriptorForCharacteristic;\n    }())\n  }, {\n    key: \"_readDescriptor\",\n    value: (function () {\n      var _readDescriptor2 = _asyncToGenerator(function* (descriptorIdentifier, transactionId) {\n        if (!transactionId) {\n          transactionId = this._nextUniqueID();\n        }\n        var nativeDescriptor = yield this._callPromise(BleModule.readDescriptor(descriptorIdentifier, transactionId));\n        return new Descriptor(nativeDescriptor, this);\n      });\n      function _readDescriptor(_x68, _x69) {\n        return _readDescriptor2.apply(this, arguments);\n      }\n      return _readDescriptor;\n    }())\n  }, {\n    key: \"writeDescriptorForDevice\",\n    value: (function () {\n      var _writeDescriptorForDevice = _asyncToGenerator(function* (deviceIdentifier, serviceUUID, characteristicUUID, descriptorUUID, valueBase64, transactionId) {\n        if (!transactionId) {\n          transactionId = this._nextUniqueID();\n        }\n        var nativeDescriptor = yield this._callPromise(BleModule.writeDescriptorForDevice(deviceIdentifier, serviceUUID, characteristicUUID, descriptorUUID, valueBase64, transactionId));\n        return new Descriptor(nativeDescriptor, this);\n      });\n      function writeDescriptorForDevice(_x70, _x71, _x72, _x73, _x74, _x75) {\n        return _writeDescriptorForDevice.apply(this, arguments);\n      }\n      return writeDescriptorForDevice;\n    }())\n  }, {\n    key: \"_writeDescriptorForService\",\n    value: (function () {\n      var _writeDescriptorForService2 = _asyncToGenerator(function* (serviceIdentifier, characteristicUUID, descriptorUUID, valueBase64, transactionId) {\n        if (!transactionId) {\n          transactionId = this._nextUniqueID();\n        }\n        var nativeDescriptor = yield this._callPromise(BleModule.writeDescriptorForService(serviceIdentifier, characteristicUUID, descriptorUUID, valueBase64, transactionId));\n        return new Descriptor(nativeDescriptor, this);\n      });\n      function _writeDescriptorForService(_x76, _x77, _x78, _x79, _x80) {\n        return _writeDescriptorForService2.apply(this, arguments);\n      }\n      return _writeDescriptorForService;\n    }())\n  }, {\n    key: \"_writeDescriptorForCharacteristic\",\n    value: (function () {\n      var _writeDescriptorForCharacteristic2 = _asyncToGenerator(function* (characteristicIdentifier, descriptorUUID, valueBase64, transactionId) {\n        if (!transactionId) {\n          transactionId = this._nextUniqueID();\n        }\n        var nativeDescriptor = yield this._callPromise(BleModule.writeDescriptorForCharacteristic(characteristicIdentifier, descriptorUUID, valueBase64, transactionId));\n        return new Descriptor(nativeDescriptor, this);\n      });\n      function _writeDescriptorForCharacteristic(_x81, _x82, _x83, _x84) {\n        return _writeDescriptorForCharacteristic2.apply(this, arguments);\n      }\n      return _writeDescriptorForCharacteristic;\n    }())\n  }, {\n    key: \"_writeDescriptor\",\n    value: (function () {\n      var _writeDescriptor2 = _asyncToGenerator(function* (descriptorIdentifier, valueBase64, transactionId) {\n        if (!transactionId) {\n          transactionId = this._nextUniqueID();\n        }\n        var nativeDescriptor = yield this._callPromise(BleModule.writeDescriptor(descriptorIdentifier, valueBase64, transactionId));\n        return new Descriptor(nativeDescriptor, this);\n      });\n      function _writeDescriptor(_x85, _x86, _x87) {\n        return _writeDescriptor2.apply(this, arguments);\n      }\n      return _writeDescriptor;\n    }())\n  }]);\n}();\nBleManager.sharedInstance = null;","map":{"version":3,"names":["_toConsumableArray","_defineProperty","_slicedToArray","_asyncToGenerator","_classCallCheck","_createClass","ownKeys","e","r","t","Object","keys","getOwnPropertySymbols","o","filter","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","arguments","length","forEach","getOwnPropertyDescriptors","defineProperties","defineProperty","Device","Service","Characteristic","Descriptor","State","LogLevel","ConnectionPriority","BleModule","EventEmitter","parseBleError","BleError","BleErrorCode","BleErrorCodeMessage","BleATTErrorCode","BleAndroidErrorCode","BleIOSErrorCode","isIOS","Platform","enableDisableDeprecatedMessage","BleManager","_this","options","undefined","sharedInstance","_eventEmitter","_uniqueId","_activePromises","_activeSubscriptions","restoreStateFunction","restoreStateIdentifier","_nextUniqueID","addListener","RestoreStateEvent","nativeRestoredState","connectedPeripherals","map","nativeDevice","_errorCodesToMessagesMapping","errorCodesToMessagesMapping","createClient","key","value","_destroyPromises","destroyedError","errorCode","BluetoothManagerDestroyed","attErrorCode","iosErrorCode","androidErrorCode","reason","id","_destroySubscriptions","remove","_destroy","response","_callPromise","destroyClient","_scanEventSubscription","destroy","toString","_callPromise2","promise","_this2","destroyPromise","Promise","resolve","reject","race","error","message","_x","setLogLevel","logLevel","cancelTransaction","transactionId","_enable","enable","_x2","_disable","console","warn","disable","_x3","state","onStateChange","listener","_this3","emitCurrentState","subscription","StateChangeEvent","wrappedSubscription","cancelled","then","currentState","_startDeviceScan","UUIDs","_this4","scanListener","_ref","_ref2","ScanEvent","startDeviceScan","_x4","_x5","_x6","stopDeviceScan","_requestConnectionPriorityForDevice","deviceIdentifier","connectionPriority","requestConnectionPriorityForDevice","_x7","_x8","_x9","_readRSSIForDevice","readRSSIForDevice","_x0","_x1","_requestMTUForDevice","mtu","requestMTUForDevice","_x10","_x11","_x12","_devices","deviceIdentifiers","_this5","nativeDevices","devices","_x13","_connectedDevices","serviceUUIDs","_this6","connectedDevices","_x14","_connectToDevice","OS","isDeviceConnected","cancelDeviceConnection","connectToDevice","_x15","_x16","_cancelDeviceConnection","_x17","onDeviceDisconnected","_this7","disconnectionListener","_ref3","_ref4","DisconnectionEvent","_discoverAllServicesAndCharacteristicsForDevice","discoverAllServicesAndCharacteristicsForDevice","services","servicesForDevice","service","uuid","device","_x18","_x19","_servicesForDevice","_this8","nativeService","_x20","characteristicsForDevice","serviceUUID","_handleCharacteristics","_characteristicsForService","serviceIdentifier","characteristicsForService","_handleCharacteristics2","characteristicsPromise","_this9","characteristics","nativeCharacteristic","_x21","descriptorsForDevice","characteristicUUID","_handleDescriptors","_descriptorsForService","descriptorsForService","_descriptorsForCharacteristic","characteristicIdentifier","descriptorsForCharacteristic","_handleDescriptors2","descriptorsPromise","_this0","descriptors","nativeDescriptor","_x22","_readCharacteristicForDevice","readCharacteristicForDevice","_x23","_x24","_x25","_x26","_readCharacteristicForService2","readCharacteristicForService","_readCharacteristicForService","_x27","_x28","_x29","_readCharacteristic2","readCharacteristic","_readCharacteristic","_x30","_x31","_writeCharacteristicWithResponseForDevice","base64Value","writeCharacteristicForDevice","writeCharacteristicWithResponseForDevice","_x32","_x33","_x34","_x35","_x36","_writeCharacteristicWithResponseForService2","writeCharacteristicForService","_writeCharacteristicWithResponseForService","_x37","_x38","_x39","_x40","_writeCharacteristicWithResponse2","writeCharacteristic","_writeCharacteristicWithResponse","_x41","_x42","_x43","_writeCharacteristicWithoutResponseForDevice","writeCharacteristicWithoutResponseForDevice","_x44","_x45","_x46","_x47","_x48","_writeCharacteristicWithoutResponseForService2","_writeCharacteristicWithoutResponseForService","_x49","_x50","_x51","_x52","_writeCharacteristicWithoutResponse2","_writeCharacteristicWithoutResponse","_x53","_x54","_x55","monitorCharacteristicForDevice","subscriptionType","filledTransactionId","commonArgs","args","concat","_handleMonitorCharacteristic","_monitorCharacteristicForService","monitorCharacteristicForService","_monitorCharacteristic","monitorCharacteristic","monitorPromise","_this1","monitorListener","_ref5","_ref6","characteristic","msgTransactionId","ReadEvent","_readDescriptorForDevice","descriptorUUID","readDescriptorForDevice","_x56","_x57","_x58","_x59","_x60","_readDescriptorForService2","readDescriptorForService","_readDescriptorForService","_x61","_x62","_x63","_x64","_readDescriptorForCharacteristic2","readDescriptorForCharacteristic","_readDescriptorForCharacteristic","_x65","_x66","_x67","_readDescriptor2","descriptorIdentifier","readDescriptor","_readDescriptor","_x68","_x69","_writeDescriptorForDevice","valueBase64","writeDescriptorForDevice","_x70","_x71","_x72","_x73","_x74","_x75","_writeDescriptorForService2","writeDescriptorForService","_writeDescriptorForService","_x76","_x77","_x78","_x79","_x80","_writeDescriptorForCharacteristic2","writeDescriptorForCharacteristic","_writeDescriptorForCharacteristic","_x81","_x82","_x83","_x84","_writeDescriptor2","writeDescriptor","_writeDescriptor","_x85","_x86","_x87"],"sources":["C:/Users/Usuário/Desktop/glucocare/node_modules/react-native-ble-plx/src/BleManager.js"],"sourcesContent":["// @flow\n'use strict'\n\nimport { Device } from './Device'\nimport { Service } from './Service'\nimport { Characteristic } from './Characteristic'\nimport { Descriptor } from './Descriptor'\nimport { State, LogLevel, ConnectionPriority } from './TypeDefinition'\nimport { BleModule, EventEmitter } from './BleModule'\nimport {\n  parseBleError,\n  BleError,\n  BleErrorCode,\n  BleErrorCodeMessage,\n  BleATTErrorCode,\n  BleAndroidErrorCode,\n  BleIOSErrorCode\n} from './BleError'\nimport type { NativeDevice, NativeCharacteristic, NativeDescriptor, NativeBleRestoredState } from './BleModule'\nimport type {\n  BleErrorCodeMessageMapping,\n  Subscription,\n  DeviceId,\n  Identifier,\n  UUID,\n  TransactionId,\n  CharacteristicSubscriptionType,\n  Base64,\n  ScanOptions,\n  ConnectionOptions,\n  BleManagerOptions\n} from './TypeDefinition'\nimport { isIOS } from './Utils'\nimport { Platform } from 'react-native'\n\nconst enableDisableDeprecatedMessage =\n  'react-native-ble-plx: The enable and disable feature is no longer supported. In Android SDK 31+ there were major changes in permissions, which may cause problems with these functions, and in SDK 33+ they were completely removed.'\n\n/**\n *\n * BleManager is an entry point for react-native-ble-plx library. It provides all means to discover and work with\n * {@link Device} instances. It should be initialized only once with `new` keyword and method\n * {@link #blemanagerdestroy|destroy()} should be called on its instance when user wants to deallocate all resources.\n *\n * In case you want to properly support Background Mode, you should provide `restoreStateIdentifier` and\n * `restoreStateFunction` in {@link BleManagerOptions}.\n *\n * @example\n * const manager = new BleManager();\n * // ... work with BLE manager ...\n * manager.destroy();\n */\nexport class BleManager {\n  // Scan subscriptions\n  // $FlowIssue[missing-type-arg]\n  _scanEventSubscription: ?EventEmitter\n  // Listening to BleModule events\n  // $FlowIssue[missing-type-arg]\n  _eventEmitter: EventEmitter\n  // Unique identifier used to create internal transactionIds\n  _uniqueId: number\n  // Map of active promises with functions to forcibly cancel them\n  _activePromises: { [id: string]: (error: BleError) => void }\n  // Map of active subscriptions\n  _activeSubscriptions: { [id: string]: Subscription }\n\n  // Map of error codes to error messages\n  _errorCodesToMessagesMapping: BleErrorCodeMessageMapping\n\n  static sharedInstance: BleManager | null = null\n\n  /**\n   * Creates an instance of {@link BleManager}.\n   * It will return already created instance if it was created before.\n   * If you want to create a new instance to for example use different options, you have to call {@link #blemanagerdestroy|destroy()} on the previous one.\n   */\n  constructor(options: BleManagerOptions = {}) {\n    if (BleManager.sharedInstance !== null) {\n      // $FlowFixMe - Constructor returns shared instance for singleton pattern\n      return BleManager.sharedInstance\n    }\n\n    this._eventEmitter = new EventEmitter(BleModule)\n    this._uniqueId = 0\n    this._activePromises = {}\n    this._activeSubscriptions = {}\n\n    const restoreStateFunction = options.restoreStateFunction\n    if (restoreStateFunction != null && options.restoreStateIdentifier != null) {\n      // $FlowIssue[prop-missing]\n      this._activeSubscriptions[this._nextUniqueID()] = this._eventEmitter.addListener(\n        BleModule.RestoreStateEvent,\n        (nativeRestoredState: NativeBleRestoredState) => {\n          if (nativeRestoredState == null) {\n            restoreStateFunction(null)\n            return\n          }\n          restoreStateFunction({\n            connectedPeripherals: nativeRestoredState.connectedPeripherals.map(\n              nativeDevice => new Device(nativeDevice, this)\n            )\n          })\n        }\n      )\n    }\n\n    this._errorCodesToMessagesMapping = options.errorCodesToMessagesMapping\n      ? options.errorCodesToMessagesMapping\n      : BleErrorCodeMessage\n\n    BleModule.createClient(options.restoreStateIdentifier || null)\n    BleManager.sharedInstance = this\n  }\n\n  /**\n   * Destroys all promises which are in progress.\n   * @private\n   */\n  _destroyPromises() {\n    const destroyedError = new BleError(\n      {\n        errorCode: BleErrorCode.BluetoothManagerDestroyed,\n        attErrorCode: (null: ?$Values<typeof BleATTErrorCode>),\n        iosErrorCode: (null: ?$Values<typeof BleIOSErrorCode>),\n        androidErrorCode: (null: ?$Values<typeof BleAndroidErrorCode>),\n        reason: (null: ?string)\n      },\n      this._errorCodesToMessagesMapping\n    )\n    for (const id in this._activePromises) {\n      this._activePromises[id](destroyedError)\n    }\n  }\n\n  /**\n   * Destroys all subscriptions.\n   * @private\n   */\n  _destroySubscriptions() {\n    for (const id in this._activeSubscriptions) {\n      this._activeSubscriptions[id].remove()\n    }\n  }\n\n  /**\n   * Destroys {@link BleManager} instance. A new instance needs to be created to continue working with\n   * this library. All operations which were in progress completes with\n   * @returns {Promise<void>} Promise may return an error when the function cannot be called.\n   * {@link #bleerrorcodebluetoothmanagerdestroyed|BluetoothManagerDestroyed} error code.\n   */\n  async destroy(): Promise<void> {\n    const response = await this._callPromise(BleModule.destroyClient())\n\n    // Unsubscribe from any subscriptions\n    if (this._scanEventSubscription != null) {\n      this._scanEventSubscription.remove()\n      this._scanEventSubscription = null\n    }\n    this._destroySubscriptions()\n\n    if (BleManager.sharedInstance) {\n      BleManager.sharedInstance = null\n    }\n\n    // Destroy all promises\n    this._destroyPromises()\n\n    return response\n  }\n\n  /**\n   * Generates new unique identifier to be used internally.\n   *\n   * @returns {string} New identifier.\n   * @private\n   */\n  _nextUniqueID(): string {\n    this._uniqueId += 1\n    return this._uniqueId.toString()\n  }\n\n  /**\n   * Calls promise and checks if it completed successfully\n   *\n   * @param {Promise<T>} promise Promise to be called\n   * @returns {Promise<T>} Value of called promise.\n   * @private\n   */\n  async _callPromise<T>(promise: Promise<T>): Promise<T> {\n    const id = this._nextUniqueID()\n    try {\n      const destroyPromise = new Promise((resolve, reject) => {\n        this._activePromises[id] = reject\n      })\n      const value = await Promise.race([destroyPromise, promise])\n      delete this._activePromises[id]\n      // $FlowIssue[incompatible-return]\n      return value\n    } catch (error) {\n      delete this._activePromises[id]\n      throw parseBleError(error.message, this._errorCodesToMessagesMapping)\n    }\n  }\n\n  // Mark: Common ------------------------------------------------------------------------------------------------------\n\n  /**\n   * Sets new log level for native module's logging mechanism.\n   * @param {LogLevel} logLevel New log level to be set.\n   * @returns {Promise<LogLevel>} Current log level.\n   */\n  setLogLevel(logLevel: $Keys<typeof LogLevel>): Promise<$Keys<typeof LogLevel> | void> {\n    return this._callPromise(BleModule.setLogLevel(logLevel))\n  }\n\n  /**\n   * Get current log level for native module's logging mechanism.\n   * @returns {Promise<LogLevel>} Current log level.\n   */\n  logLevel(): Promise<$Keys<typeof LogLevel>> {\n    return this._callPromise(BleModule.logLevel())\n  }\n\n  /**\n   * Cancels pending transaction.\n   *\n   * Few operations such as monitoring characteristic's value changes can be cancelled by a user. Basically every API\n   * entry which accepts `transactionId` allows to call `cancelTransaction` function. When cancelled operation is a\n   * promise or a callback which registers errors, {@link #bleerror|BleError} with error code\n   * {@link #bleerrorcodeoperationcancelled|OperationCancelled} will be emitted in that case. Cancelling transaction\n   * which doesn't exist is ignored.\n   *\n   * @example\n   * const transactionId = 'monitor_battery';\n   *\n   * // Monitor battery notifications\n   * manager.monitorCharacteristicForDevice(\n   *   device.id, '180F', '2A19',\n   *   (error, characteristic) => {\n   *   // Handle battery level changes...\n   * }, transactionId);\n   *\n   * // Cancel after specified amount of time\n   * setTimeout(() => manager.cancelTransaction(transactionId), 2000);\n   *\n   * @param {TransactionId} transactionId Id of pending transactions.\n   * @returns {Promise<void>}\n   */\n  cancelTransaction(transactionId: TransactionId): Promise<void> {\n    return this._callPromise(BleModule.cancelTransaction(transactionId))\n  }\n\n  // Mark: Monitoring state --------------------------------------------------------------------------------------------\n\n  /**\n   * Enable Bluetooth. This function blocks until BLE is in PoweredOn state. [Android only]\n   *\n   * @param {?TransactionId} transactionId Transaction handle used to cancel operation\n   * @returns {Promise<BleManager>} Promise completes when state transition was successful.\n   */\n  async enable(transactionId: ?TransactionId): Promise<BleManager> {\n    if (!transactionId) {\n      transactionId = this._nextUniqueID()\n    }\n    await this._callPromise(BleModule.enable(transactionId))\n    return this\n  }\n\n  /**\n   * Deprecated\n   * Disable Bluetooth. This function blocks until BLE is in PoweredOff state. [Android only]\n   *\n   * @param {?TransactionId} transactionId Transaction handle used to cancel operation\n   * @returns {Promise<BleManager>} Promise completes when state transition was successful.\n   */\n  async disable(transactionId: ?TransactionId): Promise<BleManager> {\n    console.warn(enableDisableDeprecatedMessage)\n    if (!transactionId) {\n      transactionId = this._nextUniqueID()\n    }\n    await this._callPromise(BleModule.disable(transactionId))\n    return this\n  }\n\n  /**\n   * Current, global {@link State} of a {@link BleManager}. All APIs are working only when active state\n   * is \"PoweredOn\".\n   *\n   * @returns {Promise<State>} Promise which emits current state of BleManager.\n   */\n  state(): Promise<$Keys<typeof State>> {\n    return this._callPromise(BleModule.state())\n  }\n\n  /**\n   * Notifies about {@link State} changes of a {@link BleManager}.\n   *\n   * @example\n   * const subscription = this.manager.onStateChange((state) => {\n   *      if (state === 'PoweredOn') {\n   *          this.scanAndConnect();\n   *          subscription.remove();\n   *      }\n   *  }, true);\n   *\n   * @param {function(newState: State)} listener Callback which emits state changes of BLE Manager.\n   * Look at {@link State} for possible values.\n   * @param {boolean} [emitCurrentState=false] If true, current state will be emitted as well. Defaults to false.\n   *\n   * @returns {Subscription} Subscription on which `remove()` function can be called to unsubscribe.\n   */\n  onStateChange(listener: (newState: $Keys<typeof State>) => void, emitCurrentState: boolean = false): Subscription {\n    const subscription: Subscription = this._eventEmitter.addListener(BleModule.StateChangeEvent, listener)\n    const id = this._nextUniqueID()\n    var wrappedSubscription: Subscription\n\n    if (emitCurrentState) {\n      var cancelled = false\n      this._callPromise(this.state()).then(currentState => {\n        if (!cancelled) {\n          listener(currentState)\n        }\n      })\n\n      wrappedSubscription = {\n        remove: () => {\n          if (this._activeSubscriptions[id] != null) {\n            cancelled = true\n            delete this._activeSubscriptions[id]\n            subscription.remove()\n          }\n        }\n      }\n    } else {\n      wrappedSubscription = {\n        remove: () => {\n          if (this._activeSubscriptions[id] != null) {\n            delete this._activeSubscriptions[id]\n            subscription.remove()\n          }\n        }\n      }\n    }\n\n    this._activeSubscriptions[id] = wrappedSubscription\n    return wrappedSubscription\n  }\n\n  // Mark: Scanning ----------------------------------------------------------------------------------------------------\n\n  /**\n   * Starts device scanning. When previous scan is in progress it will be stopped before executing this command.\n   *\n   * @param {?Array<UUID>} UUIDs Array of strings containing {@link UUID}s of {@link Service}s which are registered in\n   * scanned {@link Device}. If `null` is passed, all available {@link Device}s will be scanned.\n   * @param {?ScanOptions} options Optional configuration for scanning operation.\n   * @param {function(error: ?BleError, scannedDevice: ?Device)} listener Function which will be called for every scanned\n   * @returns {Promise<void>} Promise may return an error when the function cannot be called.\n   * {@link Device} (devices may be scanned multiple times). It's first argument is potential {@link Error} which is set\n   * to non `null` value when scanning failed. You have to start scanning process again if that happens. Second argument\n   * is a scanned {@link Device}.\n   * @returns {Promise<void>} the promise may be rejected if the operation is impossible to perform.\n   */\n  async startDeviceScan(\n    UUIDs: ?Array<UUID>,\n    options: ?ScanOptions,\n    listener: (error: ?BleError, scannedDevice: ?Device) => Promise<void>\n  ): Promise<void> {\n    const scanListener = ([error, nativeDevice]: [?string, ?NativeDevice]) => {\n      listener(\n        error ? parseBleError(error, this._errorCodesToMessagesMapping) : null,\n        nativeDevice ? new Device(nativeDevice, this) : null\n      )\n    }\n    // $FlowFixMe: Flow cannot deduce EmitterSubscription type.\n    this._scanEventSubscription = this._eventEmitter.addListener(BleModule.ScanEvent, scanListener)\n\n    return this._callPromise(BleModule.startDeviceScan(UUIDs, options))\n  }\n\n  /**\n   * Stops {@link Device} scan if in progress.\n   * @returns {Promise<void>} the promise may be rejected if the operation is impossible to perform.\n   */\n  stopDeviceScan(): Promise<void> {\n    if (this._scanEventSubscription != null) {\n      this._scanEventSubscription.remove()\n      this._scanEventSubscription = null\n    }\n\n    return this._callPromise(BleModule.stopDeviceScan())\n  }\n\n  /**\n   * Request a connection parameter update. This functions may update connection parameters on Android API level 21 or\n   * above.\n   *\n   * @param {DeviceId} deviceIdentifier Device identifier.\n   * @param {ConnectionPriority} connectionPriority: Connection priority.\n   * @param {?TransactionId} transactionId Transaction handle used to cancel operation.\n   * @returns {Promise<Device>} Connected device.\n   */\n  async requestConnectionPriorityForDevice(\n    deviceIdentifier: DeviceId,\n    connectionPriority: $Values<typeof ConnectionPriority>,\n    transactionId: ?TransactionId\n  ): Promise<Device> {\n    if (!transactionId) {\n      transactionId = this._nextUniqueID()\n    }\n    const nativeDevice = await this._callPromise(\n      BleModule.requestConnectionPriorityForDevice(deviceIdentifier, connectionPriority, transactionId)\n    )\n    return new Device(nativeDevice, this)\n  }\n\n  /**\n   * Reads RSSI for connected device.\n   *\n   * @param {DeviceId} deviceIdentifier Device identifier.\n   * @param {?TransactionId} transactionId Transaction handle used to cancel operation\n   * @returns {Promise<Device>} Connected device with updated RSSI value.\n   */\n  async readRSSIForDevice(deviceIdentifier: DeviceId, transactionId: ?TransactionId): Promise<Device> {\n    if (!transactionId) {\n      transactionId = this._nextUniqueID()\n    }\n    const nativeDevice = await this._callPromise(BleModule.readRSSIForDevice(deviceIdentifier, transactionId))\n    return new Device(nativeDevice, this)\n  }\n\n  /**\n   * Request new MTU value for this device. This function currently is not doing anything\n   * on iOS platform as MTU exchange is done automatically. Since Android 14,\n   * mtu management has been changed, more information can be found at the link:\n   * https://developer.android.com/about/versions/14/behavior-changes-all#mtu-set-to-517\n   * @param {DeviceId} deviceIdentifier Device identifier.\n   * @param {number} mtu New MTU to negotiate.\n   * @param {?TransactionId} transactionId Transaction handle used to cancel operation\n   * @returns {Promise<Device>} Device with updated MTU size. Default value is 23 (517 since Android 14)..\n   */\n  async requestMTUForDevice(deviceIdentifier: DeviceId, mtu: number, transactionId: ?TransactionId): Promise<Device> {\n    if (!transactionId) {\n      transactionId = this._nextUniqueID()\n    }\n    const nativeDevice = await this._callPromise(BleModule.requestMTUForDevice(deviceIdentifier, mtu, transactionId))\n    return new Device(nativeDevice, this)\n  }\n\n  // Mark: Connection management ---------------------------------------------------------------------------------------\n\n  /**\n   * Returns a list of known devices by their identifiers.\n   * @param {Array<DeviceId>} deviceIdentifiers List of device identifiers.\n   * @returns {Promise<Array<Device>>} List of known devices by their identifiers.\n   */\n  async devices(deviceIdentifiers: Array<DeviceId>): Promise<Array<Device>> {\n    const nativeDevices = await this._callPromise(BleModule.devices(deviceIdentifiers))\n    return nativeDevices.map((nativeDevice: NativeDevice) => {\n      return new Device(nativeDevice, this)\n    })\n  }\n\n  /**\n   * Returns a list of the peripherals (containing any of the specified services) currently connected to the system\n   * which have discovered services. Returned devices **may not be connected** to your application. Make sure to check\n   * if that's the case with function {@link #blemanagerisdeviceconnected|isDeviceConnected}.\n   * @param {Array<UUID>} serviceUUIDs List of service UUIDs. Device must contain at least one of them to be listed.\n   * @returns {Promise<Array<Device>>} List of known devices with discovered services as stated in the parameter.\n   */\n  async connectedDevices(serviceUUIDs: Array<UUID>): Promise<Array<Device>> {\n    const nativeDevices = await this._callPromise(BleModule.connectedDevices(serviceUUIDs))\n    return nativeDevices.map((nativeDevice: NativeDevice) => {\n      return new Device(nativeDevice, this)\n    })\n  }\n\n  // Mark: Connection management ---------------------------------------------------------------------------------------\n\n  /**\n   * Connects to {@link Device} with provided ID.\n   *\n   * @param {DeviceId} deviceIdentifier {@link Device} identifier.\n   * @param {?ConnectionOptions} options Platform specific options for connection establishment.\n   * @returns {Promise<Device>} Connected {@link Device} object if successful.\n   */\n  async connectToDevice(deviceIdentifier: DeviceId, options: ?ConnectionOptions): Promise<Device> {\n    if (Platform.OS === 'android' && (await this.isDeviceConnected(deviceIdentifier))) {\n      await this.cancelDeviceConnection(deviceIdentifier)\n    }\n    const nativeDevice = await this._callPromise(BleModule.connectToDevice(deviceIdentifier, options))\n    return new Device(nativeDevice, this)\n  }\n\n  /**\n   * Disconnects from {@link Device} if it's connected or cancels pending connection.\n   *\n   * @param {DeviceId} deviceIdentifier {@link Device} identifier to be closed.\n   * @returns {Promise<Device>} Returns closed {@link Device} when operation is successful.\n   */\n  async cancelDeviceConnection(deviceIdentifier: DeviceId): Promise<Device> {\n    const nativeDevice = await this._callPromise(BleModule.cancelDeviceConnection(deviceIdentifier))\n    return new Device(nativeDevice, this)\n  }\n\n  /**\n   * Monitors if {@link Device} was disconnected due to any errors or connection problems.\n   *\n   * @param {DeviceId} deviceIdentifier {@link Device} identifier to be monitored.\n   * @param {function(error: ?BleError, device: Device)} listener - callback returning error as a reason of disconnection\n   * if available and {@link Device} object. If an error is null, that means the connection was terminated by\n   * {@link #blemanagercanceldeviceconnection|bleManager.cancelDeviceConnection()} call.\n   * @returns {Subscription} Subscription on which `remove()` function can be called to unsubscribe.\n   */\n  onDeviceDisconnected(deviceIdentifier: DeviceId, listener: (error: ?BleError, device: Device) => void): Subscription {\n    const disconnectionListener = ([error, nativeDevice]: [?string, NativeDevice]) => {\n      if (deviceIdentifier !== nativeDevice.id) {\n        return\n      }\n      listener(error ? parseBleError(error, this._errorCodesToMessagesMapping) : null, new Device(nativeDevice, this))\n    }\n\n    const subscription: Subscription = this._eventEmitter.addListener(\n      BleModule.DisconnectionEvent,\n      disconnectionListener\n    )\n\n    const id = this._nextUniqueID()\n    const wrappedSubscription = {\n      remove: () => {\n        if (this._activeSubscriptions[id] != null) {\n          delete this._activeSubscriptions[id]\n          subscription.remove()\n        }\n      }\n    }\n    this._activeSubscriptions[id] = wrappedSubscription\n    return wrappedSubscription\n  }\n\n  /**\n   * Check connection state of a {@link Device}.\n   *\n   * @param {DeviceId} deviceIdentifier {@link Device} identifier.\n   * @returns {Promise<boolean>} Promise which emits `true` if device is connected, and `false` otherwise.\n   */\n  isDeviceConnected(deviceIdentifier: DeviceId): Promise<boolean> {\n    return this._callPromise(BleModule.isDeviceConnected(deviceIdentifier))\n  }\n\n  // Mark: Discovery ---------------------------------------------------------------------------------------------------\n\n  /**\n   * Discovers all {@link Service}s,  {@link Characteristic}s and {@link Descriptor}s for {@link Device}.\n   *\n   * @param {DeviceId} deviceIdentifier {@link Device} identifier.\n   * @param {?TransactionId} transactionId Transaction handle used to cancel operation\n   * @returns {Promise<Device>} Promise which emits {@link Device} object if all available services and\n   * characteristics have been discovered.\n   */\n  async discoverAllServicesAndCharacteristicsForDevice(\n    deviceIdentifier: DeviceId,\n    transactionId: ?TransactionId\n  ): Promise<Device> {\n    if (!transactionId) {\n      transactionId = this._nextUniqueID()\n    }\n    const nativeDevice = await this._callPromise(\n      BleModule.discoverAllServicesAndCharacteristicsForDevice(deviceIdentifier, transactionId)\n    )\n    const services = await this._callPromise(BleModule.servicesForDevice(deviceIdentifier))\n    const serviceUUIDs = (services || []).map(service => service.uuid)\n\n    // $FlowFixMe\n    const device = {\n      ...nativeDevice,\n      serviceUUIDs\n    }\n    return new Device(device, this)\n  }\n\n  // Mark: Service and characteristic getters --------------------------------------------------------------------------\n\n  /**\n   * List of discovered {@link Service}s for {@link Device}.\n   *\n   * @param {DeviceId} deviceIdentifier {@link Device} identifier.\n   * @returns {Promise<Array<Service>>} Promise which emits array of {@link Service} objects which are discovered for a\n   * {@link Device}.\n   */\n  async servicesForDevice(deviceIdentifier: DeviceId): Promise<Array<Service>> {\n    const services = await this._callPromise(BleModule.servicesForDevice(deviceIdentifier))\n    return services.map(nativeService => {\n      return new Service(nativeService, this)\n    })\n  }\n\n  /**\n   * List of discovered {@link Characteristic}s for given {@link Device} and {@link Service}.\n   *\n   * @param {DeviceId} deviceIdentifier {@link Device} identifier.\n   * @param {UUID} serviceUUID {@link Service} UUID.\n   * @returns {Promise<Array<Characteristic>>} Promise which emits array of {@link Characteristic} objects which are\n   * discovered for a {@link Device} in specified {@link Service}.\n   */\n  characteristicsForDevice(deviceIdentifier: DeviceId, serviceUUID: UUID): Promise<Array<Characteristic>> {\n    return this._handleCharacteristics(BleModule.characteristicsForDevice(deviceIdentifier, serviceUUID))\n  }\n\n  /**\n   * List of discovered {@link Characteristic}s for unique {@link Service}.\n   *\n   * @param {Identifier} serviceIdentifier {@link Service} ID.\n   * @returns {Promise<Array<Characteristic>>} Promise which emits array of {@link Characteristic} objects which are\n   * discovered in unique {@link Service}.\n   * @private\n   */\n  _characteristicsForService(serviceIdentifier: Identifier): Promise<Array<Characteristic>> {\n    return this._handleCharacteristics(BleModule.characteristicsForService(serviceIdentifier))\n  }\n\n  /**\n   * Common code for handling NativeCharacteristic fetches.\n   *\n   * @param {Promise<Array<NativeCharacteristic>>} characteristicsPromise Native characteristics.\n   * @returns {Promise<Array<Characteristic>>} Promise which emits array of {@link Characteristic} objects which are\n   * discovered in unique {@link Service}.\n   * @private\n   */\n  async _handleCharacteristics(\n    characteristicsPromise: Promise<Array<NativeCharacteristic>>\n  ): Promise<Array<Characteristic>> {\n    const characteristics = await this._callPromise(characteristicsPromise)\n    return characteristics.map(nativeCharacteristic => {\n      return new Characteristic(nativeCharacteristic, this)\n    })\n  }\n\n  /**\n   * List of discovered {@link Descriptor}s for given {@link Device}, {@link Service} and {@link Characteristic}.\n   *\n   * @param {DeviceId} deviceIdentifier {@link Device} identifier.\n   * @param {UUID} serviceUUID {@link Service} UUID.\n   * @param {UUID} characteristicUUID {@link Characteristic} UUID.\n   * @returns {Promise<Array<Descriptor>>} Promise which emits array of {@link Descriptor} objects which are\n   * discovered for a {@link Device}, {@link Service} in specified {@link Characteristic}.\n   */\n  descriptorsForDevice(\n    deviceIdentifier: DeviceId,\n    serviceUUID: UUID,\n    characteristicUUID: UUID\n  ): Promise<Array<Descriptor>> {\n    return this._handleDescriptors(BleModule.descriptorsForDevice(deviceIdentifier, serviceUUID, characteristicUUID))\n  }\n\n  /**\n   * List of discovered {@link Descriptor}s for given {@link Service} and {@link Characteristic}.\n   *\n   * @param {Identifier} serviceIdentifier {@link Service} identifier.\n   * @param {UUID} characteristicUUID {@link Characteristic} UUID.\n   * @returns {Promise<Array<Descriptor>>} Promise which emits array of {@link Descriptor} objects which are\n   * discovered for a {@link Service} in specified {@link Characteristic}.\n   * @private\n   */\n  _descriptorsForService(serviceIdentifier: Identifier, characteristicUUID: UUID): Promise<Array<Descriptor>> {\n    return this._handleDescriptors(BleModule.descriptorsForService(serviceIdentifier, characteristicUUID))\n  }\n\n  /**\n   * List of discovered {@link Descriptor}s for given {@link Characteristic}.\n   *\n   * @param {Identifier} characteristicIdentifier {@link Characteristic} identifier.\n   * @returns {Promise<Array<Descriptor>>} Promise which emits array of {@link Descriptor} objects which are\n   * discovered in specified {@link Characteristic}.\n   * @private\n   */\n  _descriptorsForCharacteristic(characteristicIdentifier: Identifier): Promise<Array<Descriptor>> {\n    return this._handleDescriptors(BleModule.descriptorsForCharacteristic(characteristicIdentifier))\n  }\n\n  /**\n   *  Common code for handling NativeDescriptor fetches.\n   * @param {Promise<Array<NativeDescriptor>>} descriptorsPromise Native descriptors.\n   * @returns {Promise<Array<Descriptor>>} Promise which emits array of {@link Descriptor} objects which are\n   * discovered in unique {@link Characteristic}.\n   * @private\n   */\n  async _handleDescriptors(descriptorsPromise: Promise<Array<NativeDescriptor>>): Promise<Array<Descriptor>> {\n    const descriptors = await this._callPromise(descriptorsPromise)\n    return descriptors.map(nativeDescriptor => {\n      return new Descriptor(nativeDescriptor, this)\n    })\n  }\n\n  // Mark: Characteristics operations ----------------------------------------------------------------------------------\n\n  /**\n   * Read {@link Characteristic} value.\n   *\n   * @param {DeviceId} deviceIdentifier {@link Device} identifier.\n   * @param {UUID} serviceUUID {@link Service} UUID.\n   * @param {UUID} characteristicUUID {@link Characteristic} UUID.\n   * @param {?TransactionId} transactionId optional `transactionId` which can be used in\n   * {@link #blemanagercanceltransaction|cancelTransaction()} function.\n   * @returns {Promise<Characteristic>} Promise which emits first {@link Characteristic} object matching specified\n   * UUID paths. Latest value of {@link Characteristic} will be stored inside returned object.\n   */\n  async readCharacteristicForDevice(\n    deviceIdentifier: DeviceId,\n    serviceUUID: UUID,\n    characteristicUUID: UUID,\n    transactionId: ?TransactionId\n  ): Promise<Characteristic> {\n    if (!transactionId) {\n      transactionId = this._nextUniqueID()\n    }\n    const nativeCharacteristic = await this._callPromise(\n      BleModule.readCharacteristicForDevice(deviceIdentifier, serviceUUID, characteristicUUID, transactionId)\n    )\n    return new Characteristic(nativeCharacteristic, this)\n  }\n\n  /**\n   * Read {@link Characteristic} value.\n   *\n   * @param {Identifier} serviceIdentifier {@link Service} ID.\n   * @param {UUID} characteristicUUID {@link Characteristic} UUID.\n   * @param {?TransactionId} transactionId optional `transactionId` which can be used in\n   * {@link #blemanagercanceltransaction|cancelTransaction()} function.\n   * @returns {Promise<Characteristic>} Promise which emits first {@link Characteristic} object matching specified\n   * UUID paths. Latest value of {@link Characteristic} will be stored inside returned object.\n   * @private\n   */\n  async _readCharacteristicForService(\n    serviceIdentifier: Identifier,\n    characteristicUUID: UUID,\n    transactionId: ?TransactionId\n  ): Promise<Characteristic> {\n    if (!transactionId) {\n      transactionId = this._nextUniqueID()\n    }\n    const nativeCharacteristic = await this._callPromise(\n      BleModule.readCharacteristicForService(serviceIdentifier, characteristicUUID, transactionId)\n    )\n    return new Characteristic(nativeCharacteristic, this)\n  }\n\n  /**\n   * Read {@link Characteristic} value.\n   *\n   * @param {Identifier} characteristicIdentifier {@link Characteristic} ID.\n   * @param {?TransactionId} transactionId optional `transactionId` which can be used in\n   * {@link #blemanagercanceltransaction|cancelTransaction()} function.\n   * @returns {Promise<Characteristic>} Promise which emits first {@link Characteristic} object matching specified ID.\n   * Latest value of {@link Characteristic} will be stored inside returned object.\n   * @private\n   */\n  async _readCharacteristic(\n    characteristicIdentifier: Identifier,\n    transactionId: ?TransactionId\n  ): Promise<Characteristic> {\n    if (!transactionId) {\n      transactionId = this._nextUniqueID()\n    }\n    const nativeCharacteristic = await this._callPromise(\n      BleModule.readCharacteristic(characteristicIdentifier, transactionId)\n    )\n    return new Characteristic(nativeCharacteristic, this)\n  }\n\n  /**\n   * Write {@link Characteristic} value with response.\n   *\n   * @param {DeviceId} deviceIdentifier {@link Device} identifier.\n   * @param {UUID} serviceUUID {@link Service} UUID.\n   * @param {UUID} characteristicUUID {@link Characteristic} UUID.\n   * @param {Base64} base64Value Value in Base64 format.\n   * @param {?TransactionId} transactionId optional `transactionId` which can be used in\n   * {@link #blemanagercanceltransaction|cancelTransaction()} function.\n   * @returns {Promise<Characteristic>} Promise which emits first {@link Characteristic} object matching specified\n   * UUID paths. Latest value of characteristic may not be stored inside returned object.\n   */\n  async writeCharacteristicWithResponseForDevice(\n    deviceIdentifier: DeviceId,\n    serviceUUID: UUID,\n    characteristicUUID: UUID,\n    base64Value: Base64,\n    transactionId: ?TransactionId\n  ): Promise<Characteristic> {\n    if (!transactionId) {\n      transactionId = this._nextUniqueID()\n    }\n    const nativeCharacteristic = await this._callPromise(\n      BleModule.writeCharacteristicForDevice(\n        deviceIdentifier,\n        serviceUUID,\n        characteristicUUID,\n        base64Value,\n        true,\n        transactionId\n      )\n    )\n    return new Characteristic(nativeCharacteristic, this)\n  }\n\n  /**\n   * Write {@link Characteristic} value with response.\n   *\n   * @param {Identifier} serviceIdentifier {@link Service} ID.\n   * @param {UUID} characteristicUUID {@link Characteristic} UUID.\n   * @param {Base64} base64Value Value in Base64 format.\n   * @param {?TransactionId} transactionId optional `transactionId` which can be used in\n   * {@link #blemanagercanceltransaction|cancelTransaction()} function.\n   * @returns {Promise<Characteristic>} Promise which emits first {@link Characteristic} object matching specified\n   * UUID paths. Latest value of characteristic may not be stored inside returned object.\n   * @private\n   */\n  async _writeCharacteristicWithResponseForService(\n    serviceIdentifier: Identifier,\n    characteristicUUID: UUID,\n    base64Value: Base64,\n    transactionId: ?TransactionId\n  ): Promise<Characteristic> {\n    if (!transactionId) {\n      transactionId = this._nextUniqueID()\n    }\n    const nativeCharacteristic = await this._callPromise(\n      BleModule.writeCharacteristicForService(serviceIdentifier, characteristicUUID, base64Value, true, transactionId)\n    )\n    return new Characteristic(nativeCharacteristic, this)\n  }\n\n  /**\n   * Write {@link Characteristic} value with response.\n   *\n   * @param {Identifier} characteristicIdentifier {@link Characteristic} ID.\n   * @param {Base64} base64Value Value in Base64 format.\n   * @param {?TransactionId} transactionId optional `transactionId` which can be used in\n   * {@link #blemanagercanceltransaction|cancelTransaction()} function.\n   * @returns {Promise<Characteristic>} Promise which emits first {@link Characteristic} object matching specified ID.\n   * Latest value of characteristic may not be stored inside returned object.\n   * @private\n   */\n  async _writeCharacteristicWithResponse(\n    characteristicIdentifier: Identifier,\n    base64Value: Base64,\n    transactionId: ?TransactionId\n  ): Promise<Characteristic> {\n    if (!transactionId) {\n      transactionId = this._nextUniqueID()\n    }\n    const nativeCharacteristic = await this._callPromise(\n      BleModule.writeCharacteristic(characteristicIdentifier, base64Value, true, transactionId)\n    )\n    return new Characteristic(nativeCharacteristic, this)\n  }\n\n  /**\n   * Write {@link Characteristic} value without response.\n   *\n   * @param {DeviceId} deviceIdentifier {@link Device} identifier.\n   * @param {UUID} serviceUUID {@link Service} UUID.\n   * @param {UUID} characteristicUUID {@link Characteristic} UUID.\n   * @param {Base64} base64Value Value in Base64 format.\n   * @param {?TransactionId} transactionId optional `transactionId` which can be used in\n   * {@link #blemanagercanceltransaction|cancelTransaction()} function.\n   * @returns {Promise<Characteristic>} Promise which emits first {@link Characteristic} object matching specified\n   * UUID paths. Latest value of characteristic may not be stored inside returned object.\n   */\n  async writeCharacteristicWithoutResponseForDevice(\n    deviceIdentifier: DeviceId,\n    serviceUUID: UUID,\n    characteristicUUID: UUID,\n    base64Value: Base64,\n    transactionId: ?TransactionId\n  ): Promise<Characteristic> {\n    if (!transactionId) {\n      transactionId = this._nextUniqueID()\n    }\n    const nativeCharacteristic = await this._callPromise(\n      BleModule.writeCharacteristicForDevice(\n        deviceIdentifier,\n        serviceUUID,\n        characteristicUUID,\n        base64Value,\n        false,\n        transactionId\n      )\n    )\n    return new Characteristic(nativeCharacteristic, this)\n  }\n\n  /**\n   * Write {@link Characteristic} value without response.\n   *\n   * @param {Identifier} serviceIdentifier {@link Service} ID.\n   * @param {UUID} characteristicUUID {@link Characteristic} UUID.\n   * @param {Base64} base64Value Value in Base64 format.\n   * @param {?TransactionId} transactionId optional `transactionId` which can be used in\n   * {@link #blemanagercanceltransaction|cancelTransaction()} function.\n   * @returns {Promise<Characteristic>} Promise which emits first {@link Characteristic} object matching specified\n   * UUID paths. Latest value of characteristic may not be stored inside returned object.\n   * @private\n   */\n  async _writeCharacteristicWithoutResponseForService(\n    serviceIdentifier: Identifier,\n    characteristicUUID: UUID,\n    base64Value: Base64,\n    transactionId: ?TransactionId\n  ): Promise<Characteristic> {\n    if (!transactionId) {\n      transactionId = this._nextUniqueID()\n    }\n    const nativeCharacteristic = await this._callPromise(\n      BleModule.writeCharacteristicForService(serviceIdentifier, characteristicUUID, base64Value, false, transactionId)\n    )\n    return new Characteristic(nativeCharacteristic, this)\n  }\n\n  /**\n   * Write {@link Characteristic} value without response.\n   *\n   * @param {Identifier} characteristicIdentifier {@link Characteristic} UUID.\n   * @param {Base64} base64Value Value in Base64 format.\n   * @param {?TransactionId} transactionId optional `transactionId` which can be used in\n   * {@link #blemanagercanceltransaction|cancelTransaction()} function.\n   * @returns {Promise<Characteristic>} Promise which emits first {@link Characteristic} object matching specified ID.\n   * Latest value of characteristic may not be stored inside returned object.\n   * @private\n   */\n  async _writeCharacteristicWithoutResponse(\n    characteristicIdentifier: Identifier,\n    base64Value: Base64,\n    transactionId: ?TransactionId\n  ): Promise<Characteristic> {\n    if (!transactionId) {\n      transactionId = this._nextUniqueID()\n    }\n    const nativeCharacteristic = await this._callPromise(\n      BleModule.writeCharacteristic(characteristicIdentifier, base64Value, false, transactionId)\n    )\n    return new Characteristic(nativeCharacteristic, this)\n  }\n\n  /**\n   * Monitor value changes of a {@link Characteristic}. If notifications are enabled they will be used\n   * in favour of indications.\n   *\n   * @param {DeviceId} deviceIdentifier {@link Device} identifier.\n   * @param {UUID} serviceUUID {@link Service} UUID.\n   * @param {UUID} characteristicUUID {@link Characteristic} UUID.\n   * @param {function(error: ?BleError, characteristic: ?Characteristic)} listener - callback which emits\n   * {@link Characteristic} objects with modified value for each notification.\n   * @param {?TransactionId} transactionId optional `transactionId` which can be used in\n   * {@link #blemanagercanceltransaction|cancelTransaction()} function.\n   * @returns {Subscription} Subscription on which `remove()` function can be called to unsubscribe.\n   */\n  monitorCharacteristicForDevice(\n    deviceIdentifier: DeviceId,\n    serviceUUID: UUID,\n    characteristicUUID: UUID,\n    listener: (error: ?BleError, characteristic: ?Characteristic) => void,\n    transactionId: ?TransactionId,\n    subscriptionType: ?CharacteristicSubscriptionType\n  ): Subscription {\n    const filledTransactionId = transactionId || this._nextUniqueID()\n    const commonArgs = [deviceIdentifier, serviceUUID, characteristicUUID, filledTransactionId]\n    const args = isIOS ? commonArgs : [...commonArgs, subscriptionType]\n\n    return this._handleMonitorCharacteristic(\n      BleModule.monitorCharacteristicForDevice(...args),\n      filledTransactionId,\n      listener\n    )\n  }\n\n  /**\n   * Monitor value changes of a {@link Characteristic}. If notifications are enabled they will be used\n   * in favour of indications.\n   *\n   * @param {Identifier} serviceIdentifier {@link Service} ID.\n   * @param {UUID} characteristicUUID {@link Characteristic} UUID.\n   * @param {function(error: ?BleError, characteristic: ?Characteristic)} listener - callback which emits\n   * {@link Characteristic} objects with modified value for each notification.\n   * @param {?TransactionId} transactionId optional `transactionId` which can be used in\n   * {@link #blemanagercanceltransaction|cancelTransaction()} function.\n   * @returns {Subscription} Subscription on which `remove()` function can be called to unsubscribe.\n   * @private\n   */\n  _monitorCharacteristicForService(\n    serviceIdentifier: Identifier,\n    characteristicUUID: UUID,\n    listener: (error: ?BleError, characteristic: ?Characteristic) => void,\n    transactionId: ?TransactionId,\n    subscriptionType: ?CharacteristicSubscriptionType\n  ): Subscription {\n    const filledTransactionId = transactionId || this._nextUniqueID()\n    const commonArgs = [serviceIdentifier, characteristicUUID, filledTransactionId]\n    const args = isIOS ? commonArgs : [...commonArgs, subscriptionType]\n\n    return this._handleMonitorCharacteristic(\n      BleModule.monitorCharacteristicForService(...args),\n      filledTransactionId,\n      listener\n    )\n  }\n\n  /**\n   * Monitor value changes of a {@link Characteristic}. If notifications are enabled they will be used\n   * in favour of indications.\n   *\n   * @param {Identifier} characteristicIdentifier - {@link Characteristic} ID.\n   * @param {function(error: ?BleError, characteristic: ?Characteristic)} listener - callback which emits\n   * {@link Characteristic} objects with modified value for each notification.\n   * @param {?TransactionId} transactionId optional `transactionId` which can be used in\n   * @param {?CharacteristicSubscriptionType} subscriptionType [android only] subscription type of the characteristic\n   * {@link #blemanagercanceltransaction|cancelTransaction()} function.\n   * @returns {Subscription} Subscription on which `remove()` function can be called to unsubscribe.\n   * @private\n   */\n  _monitorCharacteristic(\n    characteristicIdentifier: Identifier,\n    listener: (error: ?BleError, characteristic: ?Characteristic) => void,\n    transactionId: ?TransactionId,\n    subscriptionType: ?CharacteristicSubscriptionType\n  ): Subscription {\n    const filledTransactionId = transactionId || this._nextUniqueID()\n    const commonArgs = [characteristicIdentifier, filledTransactionId]\n    const args = isIOS ? commonArgs : [...commonArgs, subscriptionType]\n\n    return this._handleMonitorCharacteristic(BleModule.monitorCharacteristic(...args), filledTransactionId, listener)\n  }\n\n  /**\n   * Common code to handle characteristic monitoring.\n   *\n   * @param {Promise<void>} monitorPromise Characteristic monitoring promise\n   * @param {TransactionId} transactionId TransactionId of passed promise\n   * @param {function(error: ?BleError, characteristic: ?Characteristic)} listener - callback which emits\n   * {@link Characteristic} objects with modified value for each notification.\n   * @returns {Subscription} Subscription on which `remove()` function can be called to unsubscribe.\n   * @private\n   */\n  _handleMonitorCharacteristic(\n    monitorPromise: Promise<void>,\n    transactionId: TransactionId,\n    listener: (error: ?BleError, characteristic: ?Characteristic) => void\n  ): Subscription {\n    const monitorListener = ([error, characteristic, msgTransactionId]: [\n      ?string,\n      NativeCharacteristic,\n      TransactionId\n    ]) => {\n      if (transactionId !== msgTransactionId) {\n        return\n      }\n      if (error) {\n        listener(parseBleError(error, this._errorCodesToMessagesMapping), null)\n        return\n      }\n      listener(null, new Characteristic(characteristic, this))\n    }\n\n    const subscription: Subscription = this._eventEmitter.addListener(BleModule.ReadEvent, monitorListener)\n\n    const id = this._nextUniqueID()\n    const wrappedSubscription: Subscription = {\n      remove: () => {\n        if (this._activeSubscriptions[id] != null) {\n          delete this._activeSubscriptions[id]\n          subscription.remove()\n        }\n      }\n    }\n    this._activeSubscriptions[id] = wrappedSubscription\n\n    this._callPromise(monitorPromise).then(\n      () => {\n        wrappedSubscription.remove()\n      },\n      (error: BleError) => {\n        listener(error, null)\n        wrappedSubscription.remove()\n      }\n    )\n\n    return {\n      remove: () => {\n        BleModule.cancelTransaction(transactionId)\n      }\n    }\n  }\n\n  // Mark: Descriptors operations ----------------------------------------------------------------------------------\n\n  /**\n   * Read {@link Descriptor} value.\n   *\n   * @param {DeviceId} deviceIdentifier {@link Device} identifier.\n   * @param {UUID} serviceUUID {@link Service} UUID.\n   * @param {UUID} characteristicUUID {@link Characteristic} UUID.\n   * @param {UUID} descriptorUUID {@link Descriptor} UUID.\n   * @param {?TransactionId} transactionId optional `transactionId` which can be used in\n   * {@link #blemanagercanceltransaction|cancelTransaction()} function.\n   * @returns {Promise<Descriptor>} Promise which emits first {@link Descriptor} object matching specified\n   * UUID paths. Latest value of {@link Descriptor} will be stored inside returned object.\n   */\n  async readDescriptorForDevice(\n    deviceIdentifier: DeviceId,\n    serviceUUID: UUID,\n    characteristicUUID: UUID,\n    descriptorUUID: UUID,\n    transactionId: ?TransactionId\n  ): Promise<Descriptor> {\n    if (!transactionId) {\n      transactionId = this._nextUniqueID()\n    }\n    const nativeDescriptor = await this._callPromise(\n      BleModule.readDescriptorForDevice(\n        deviceIdentifier,\n        serviceUUID,\n        characteristicUUID,\n        descriptorUUID,\n        transactionId\n      )\n    )\n    return new Descriptor(nativeDescriptor, this)\n  }\n\n  /**\n   * Read {@link Descriptor} value.\n   *\n   * @param {Identifier} serviceIdentifier {@link Service} identifier.\n   * @param {UUID} characteristicUUID {@link Characteristic} UUID.\n   * @param {UUID} descriptorUUID {@link Descriptor} UUID.\n   * @param {?TransactionId} transactionId optional `transactionId` which can be used in\n   * {@link #blemanagercanceltransaction|cancelTransaction()} function.\n   * @returns {Promise<Descriptor>} Promise which emits first {@link Descriptor} object matching specified\n   * UUID paths. Latest value of {@link Descriptor} will be stored inside returned object.\n   * @private\n   */\n  async _readDescriptorForService(\n    serviceIdentifier: Identifier,\n    characteristicUUID: UUID,\n    descriptorUUID: UUID,\n    transactionId: ?TransactionId\n  ): Promise<Descriptor> {\n    if (!transactionId) {\n      transactionId = this._nextUniqueID()\n    }\n    const nativeDescriptor = await this._callPromise(\n      BleModule.readDescriptorForService(serviceIdentifier, characteristicUUID, descriptorUUID, transactionId)\n    )\n    return new Descriptor(nativeDescriptor, this)\n  }\n\n  /**\n   * Read {@link Descriptor} value.\n   *\n   * @param {Identifier} characteristicIdentifier {@link Characteristic} identifier.\n   * @param {UUID} descriptorUUID {@link Descriptor} UUID.\n   * @param {?TransactionId} transactionId optional `transactionId` which can be used in\n   * {@link #blemanagercanceltransaction|cancelTransaction()} function.\n   * @returns {Promise<Descriptor>} Promise which emits first {@link Descriptor} object matching specified\n   * UUID paths. Latest value of {@link Descriptor} will be stored inside returned object.\n   * @private\n   */\n  async _readDescriptorForCharacteristic(\n    characteristicIdentifier: Identifier,\n    descriptorUUID: UUID,\n    transactionId: ?TransactionId\n  ): Promise<Descriptor> {\n    if (!transactionId) {\n      transactionId = this._nextUniqueID()\n    }\n    const nativeDescriptor = await this._callPromise(\n      BleModule.readDescriptorForCharacteristic(characteristicIdentifier, descriptorUUID, transactionId)\n    )\n    return new Descriptor(nativeDescriptor, this)\n  }\n\n  /**\n   * Read {@link Descriptor} value.\n   *\n   * @param {Identifier} descriptorIdentifier {@link Descriptor} identifier.\n   * @param {?TransactionId} transactionId optional `transactionId` which can be used in\n   * {@link #blemanagercanceltransaction|cancelTransaction()} function.\n   * @returns {Promise<Descriptor>} Promise which emits first {@link Descriptor} object matching specified\n   * UUID paths. Latest value of {@link Descriptor} will be stored inside returned object.\n   * @private\n   */\n  async _readDescriptor(descriptorIdentifier: Identifier, transactionId: ?TransactionId): Promise<Descriptor> {\n    if (!transactionId) {\n      transactionId = this._nextUniqueID()\n    }\n    const nativeDescriptor = await this._callPromise(BleModule.readDescriptor(descriptorIdentifier, transactionId))\n    return new Descriptor(nativeDescriptor, this)\n  }\n\n  /**\n   * Write {@link Descriptor} value.\n   *\n   * @param {DeviceId} deviceIdentifier Connected device identifier\n   * @param {UUID} serviceUUID Service UUID\n   * @param {UUID} characteristicUUID Characteristic UUID\n   * @param {UUID} descriptorUUID Descriptor UUID\n   * @param {Base64} valueBase64 Value to be set coded in Base64\n   * @param {?TransactionId} transactionId Transaction handle used to cancel operation\n   * @returns {Promise<Descriptor>} Descriptor which saved passed value\n   */\n  async writeDescriptorForDevice(\n    deviceIdentifier: DeviceId,\n    serviceUUID: UUID,\n    characteristicUUID: UUID,\n    descriptorUUID: UUID,\n    valueBase64: Base64,\n    transactionId: ?TransactionId\n  ): Promise<Descriptor> {\n    if (!transactionId) {\n      transactionId = this._nextUniqueID()\n    }\n    const nativeDescriptor = await this._callPromise(\n      BleModule.writeDescriptorForDevice(\n        deviceIdentifier,\n        serviceUUID,\n        characteristicUUID,\n        descriptorUUID,\n        valueBase64,\n        transactionId\n      )\n    )\n    return new Descriptor(nativeDescriptor, this)\n  }\n\n  /**\n   * Write {@link Descriptor} value.\n   *\n   * @param {Identifier} serviceIdentifier Service identifier\n   * @param {UUID} characteristicUUID Characteristic UUID\n   * @param {UUID} descriptorUUID Descriptor UUID\n   * @param {Base64} valueBase64 Value to be set coded in Base64\n   * @param {?TransactionId} transactionId Transaction handle used to cancel operation\n   * @returns {Promise<Descriptor>} Descriptor which saved passed value\n   * @private\n   */\n  async _writeDescriptorForService(\n    serviceIdentifier: Identifier,\n    characteristicUUID: UUID,\n    descriptorUUID: UUID,\n    valueBase64: Base64,\n    transactionId: ?TransactionId\n  ): Promise<Descriptor> {\n    if (!transactionId) {\n      transactionId = this._nextUniqueID()\n    }\n    const nativeDescriptor = await this._callPromise(\n      BleModule.writeDescriptorForService(\n        serviceIdentifier,\n        characteristicUUID,\n        descriptorUUID,\n        valueBase64,\n        transactionId\n      )\n    )\n    return new Descriptor(nativeDescriptor, this)\n  }\n\n  /**\n   * Write {@link Descriptor} value.\n   *\n   * @param {Identifier} characteristicIdentifier Characteristic identifier\n   * @param {UUID} descriptorUUID Descriptor UUID\n   * @param {Base64} valueBase64 Value to be set coded in Base64\n   * @param {?TransactionId} transactionId Transaction handle used to cancel operation\n   * @returns {Promise<Descriptor>} Descriptor which saved passed value\n   * @private\n   */\n  async _writeDescriptorForCharacteristic(\n    characteristicIdentifier: Identifier,\n    descriptorUUID: UUID,\n    valueBase64: Base64,\n    transactionId: ?TransactionId\n  ): Promise<Descriptor> {\n    if (!transactionId) {\n      transactionId = this._nextUniqueID()\n    }\n    const nativeDescriptor = await this._callPromise(\n      BleModule.writeDescriptorForCharacteristic(characteristicIdentifier, descriptorUUID, valueBase64, transactionId)\n    )\n    return new Descriptor(nativeDescriptor, this)\n  }\n\n  /**\n   * Write {@link Descriptor} value.\n   *\n   * @param {Identifier} descriptorIdentifier Descriptor identifier\n   * @param {Base64} valueBase64 Value to be set coded in Base64\n   * @param {?TransactionId} transactionId Transaction handle used to cancel operation\n   * @returns {Promise<Descriptor>} Descriptor which saved passed value\n   * @private\n   */\n  async _writeDescriptor(\n    descriptorIdentifier: Identifier,\n    valueBase64: Base64,\n    transactionId: ?TransactionId\n  ): Promise<Descriptor> {\n    if (!transactionId) {\n      transactionId = this._nextUniqueID()\n    }\n    const nativeDescriptor = await this._callPromise(\n      BleModule.writeDescriptor(descriptorIdentifier, valueBase64, transactionId)\n    )\n    return new Descriptor(nativeDescriptor, this)\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}