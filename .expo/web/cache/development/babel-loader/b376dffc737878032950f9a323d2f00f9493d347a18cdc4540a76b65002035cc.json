{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport { createNativeStackNavigator } from \"@react-navigation/native-stack\";\nimport { createDrawerNavigator } from \"@react-navigation/drawer\";\nimport { MaterialIcons } from \"@expo/vector-icons\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { useSafeAreaInsets } from \"react-native-safe-area-context\";\nimport { NavigationContainer } from '@react-navigation/native';\nimport React from \"react\";\nimport { useAuth } from \"../context/AuthContext\";\nimport LoginScreen from \"../screens/LoginScreen\";\nimport RegisterScreen from \"../screens/RegisterScreen\";\nimport DashboardScreen from \"../screens/DashboardScreen\";\nimport AddReadingScreen from \"../screens/AddReadingScreen\";\nimport ChartsScreen from \"../screens/ChartsScreen\";\nimport ProfileSetupScreen from \"../screens/ProfileSetupScreen\";\nimport BiometricSetupScreen from \"../screens/BiometricSetupScreen\";\nimport DeviceConnectionScreen from \"../screens/DeviceConnectionScreen\";\nimport NutritionScreen from \"../screens/NutritionScreen\";\nimport SettingsScreen from \"../screens/SettingsScreen\";\nimport ForgotPasswordScreen from \"../screens/ForgotPasswordScreen\";\nimport ResetPasswordScreen from \"../screens/ResetPasswordScreen\";\nimport LoadingScreen from \"../screens/LoadingScreen\";\nimport CustomDrawer from \"./CustomDrawer\";\nimport { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"react/jsx-runtime\";\nvar Stack = createNativeStackNavigator();\nvar Drawer = createDrawerNavigator();\nvar linking = {\n  prefixes: ['glucocare://'],\n  config: {\n    screens: {\n      ResetPassword: 'ResetPassword',\n      Login: 'Login',\n      Register: 'Register',\n      ForgotPassword: 'ForgotPassword',\n      DrawerRoutes: 'DrawerRoutes'\n    }\n  },\n  getStateFromPath: function getStateFromPath(path, config) {\n    if (path.includes('ResetPassword')) {\n      var urlParams = new URLSearchParams(path.split('?')[1]);\n      var oobCode = urlParams.get('oobCode');\n      if (oobCode) {\n        return {\n          routes: [{\n            name: 'ResetPassword',\n            params: {\n              oobCode: oobCode\n            }\n          }]\n        };\n      }\n    }\n    return undefined;\n  }\n};\nfunction MenuButton(_ref) {\n  var navigation = _ref.navigation;\n  return _jsx(TouchableOpacity, {\n    onPress: function onPress() {\n      return navigation.openDrawer();\n    },\n    children: _jsx(MaterialIcons, {\n      name: \"menu\",\n      size: 26,\n      color: \"#fff\",\n      style: styles.menuIcon\n    })\n  });\n}\nvar drawerIcon = function drawerIcon(name) {\n  return function (_ref2) {\n    var color = _ref2.color,\n      size = _ref2.size;\n    return _jsx(MaterialIcons, {\n      name: name,\n      color: color,\n      size: size\n    });\n  };\n};\nfunction DrawerRoutes() {\n  var insets = useSafeAreaInsets();\n  return _jsxs(Drawer.Navigator, {\n    drawerContent: function drawerContent(props) {\n      return _jsx(CustomDrawer, _objectSpread(_objectSpread({}, props), {}, {\n        navigation: props.navigation\n      }));\n    },\n    screenOptions: function screenOptions(_ref3) {\n      var _StatusBar$currentHei;\n      var navigation = _ref3.navigation;\n      return {\n        headerStyle: {\n          backgroundColor: \"#2563eb\",\n          elevation: 4,\n          shadowOpacity: 0.2,\n          height: 56 + (Platform.OS === \"android\" ? (_StatusBar$currentHei = StatusBar.currentHeight) != null ? _StatusBar$currentHei : 0 : insets.top)\n        },\n        headerTintColor: \"#fff\",\n        headerTitleStyle: {\n          fontWeight: \"700\",\n          fontSize: 18\n        },\n        headerLeft: function headerLeft() {\n          return _jsx(MenuButton, {\n            navigation: navigation\n          });\n        },\n        drawerActiveBackgroundColor: \"#2563eb\",\n        drawerActiveTintColor: \"#fff\",\n        drawerInactiveTintColor: \"#333\",\n        drawerStyle: {\n          width: 280\n        },\n        sceneContainerStyle: {\n          backgroundColor: \"#f0f6ff\"\n        }\n      };\n    },\n    children: [_jsx(Drawer.Screen, {\n      name: \"Dashboard\",\n      component: DashboardScreen,\n      options: {\n        title: \"Dashboard\",\n        drawerIcon: drawerIcon(\"dashboard\")\n      }\n    }), _jsx(Drawer.Screen, {\n      name: \"AddReading\",\n      component: AddReadingScreen,\n      options: {\n        title: \"Nova Medição\",\n        drawerIcon: drawerIcon(\"add-circle-outline\")\n      }\n    }), _jsx(Drawer.Screen, {\n      name: \"DeviceConnection\",\n      component: DeviceConnectionScreen,\n      options: {\n        title: \"Conectar Dispositivo\",\n        drawerIcon: drawerIcon(\"bluetooth\")\n      }\n    }), _jsx(Drawer.Screen, {\n      name: \"Charts\",\n      component: ChartsScreen,\n      options: {\n        title: \"Gráficos\",\n        drawerIcon: drawerIcon(\"show-chart\")\n      }\n    }), _jsx(Drawer.Screen, {\n      name: \"Nutrition\",\n      component: NutritionScreen,\n      options: {\n        title: \"Alimentação\",\n        drawerIcon: drawerIcon(\"restaurant-menu\")\n      }\n    }), _jsx(Drawer.Screen, {\n      name: \"Settings\",\n      component: SettingsScreen,\n      options: {\n        title: \"Configurações\",\n        drawerIcon: drawerIcon(\"settings\")\n      }\n    }), _jsx(Drawer.Screen, {\n      name: \"ProfileSetup\",\n      component: ProfileSetupScreen,\n      options: {\n        title: \"Perfil\",\n        drawerIcon: drawerIcon(\"person\")\n      }\n    })]\n  });\n}\nexport default function RootNavigator() {\n  var _useAuth = useAuth(),\n    isAuthenticated = _useAuth.isAuthenticated,\n    isLoading = _useAuth.isLoading;\n  if (isLoading) {\n    return _jsx(LoadingScreen, {});\n  }\n  return (_jsx(NavigationContainer, {\n      linking: linking,\n      fallback: _jsx(View, {\n        style: styles.fallbackContainer,\n        children: _jsx(ActivityIndicator, {\n          size: \"large\",\n          color: \"#2563eb\"\n        })\n      }),\n      children: _jsx(Stack.Navigator, {\n        screenOptions: {\n          headerShown: false\n        },\n        children: isAuthenticated ? _jsx(Stack.Screen, {\n          name: \"DrawerRoutes\",\n          component: DrawerRoutes\n        }) : _jsxs(_Fragment, {\n          children: [_jsx(Stack.Screen, {\n            name: \"Login\",\n            component: LoginScreen\n          }), _jsx(Stack.Screen, {\n            name: \"Register\",\n            component: RegisterScreen\n          }), _jsx(Stack.Screen, {\n            name: \"ForgotPassword\",\n            component: ForgotPasswordScreen\n          }), _jsx(Stack.Screen, {\n            name: \"ResetPassword\",\n            component: ResetPasswordScreen,\n            options: {\n              headerShown: true,\n              title: \"Definir Nova Senha\"\n            }\n          }), _jsx(Stack.Screen, {\n            name: \"BiometricSetup\",\n            component: BiometricSetupScreen\n          }), _jsx(Stack.Screen, {\n            name: \"ProfileSetup\",\n            component: ProfileSetupScreen\n          })]\n        })\n      })\n    })\n  );\n}\nvar styles = StyleSheet.create({\n  fallbackContainer: {\n    flex: 1,\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    backgroundColor: \"#f0f6ff\"\n  },\n  menuIcon: {\n    marginLeft: 12\n  }\n});","map":{"version":3,"names":["createNativeStackNavigator","createDrawerNavigator","MaterialIcons","TouchableOpacity","ActivityIndicator","View","Platform","StatusBar","StyleSheet","useSafeAreaInsets","NavigationContainer","React","useAuth","LoginScreen","RegisterScreen","DashboardScreen","AddReadingScreen","ChartsScreen","ProfileSetupScreen","BiometricSetupScreen","DeviceConnectionScreen","NutritionScreen","SettingsScreen","ForgotPasswordScreen","ResetPasswordScreen","LoadingScreen","CustomDrawer","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","Stack","Drawer","linking","prefixes","config","screens","ResetPassword","Login","Register","ForgotPassword","DrawerRoutes","getStateFromPath","path","includes","urlParams","URLSearchParams","split","oobCode","get","routes","name","params","undefined","MenuButton","_ref","navigation","onPress","openDrawer","children","size","color","style","styles","menuIcon","drawerIcon","_ref2","insets","Navigator","drawerContent","props","_objectSpread","screenOptions","_ref3","_StatusBar$currentHei","headerStyle","backgroundColor","elevation","shadowOpacity","height","OS","currentHeight","top","headerTintColor","headerTitleStyle","fontWeight","fontSize","headerLeft","drawerActiveBackgroundColor","drawerActiveTintColor","drawerInactiveTintColor","drawerStyle","width","sceneContainerStyle","Screen","component","options","title","RootNavigator","_useAuth","isAuthenticated","isLoading","fallback","fallbackContainer","headerShown","create","flex","justifyContent","alignItems","marginLeft"],"sources":["C:/Users/Usuário/Desktop/glucocare/src/navigation/RootNavigator.tsx"],"sourcesContent":["import { createNativeStackNavigator } from \"@react-navigation/native-stack\";\nimport { createDrawerNavigator, DrawerNavigationProp } from \"@react-navigation/drawer\";\nimport { MaterialIcons } from \"@expo/vector-icons\";\nimport { TouchableOpacity, ActivityIndicator, View, Platform, StatusBar, StyleSheet } from \"react-native\";\nimport { useSafeAreaInsets } from \"react-native-safe-area-context\";\nimport { NavigationContainer, LinkingOptions } from '@react-navigation/native';\nimport React from \"react\"; \n\n// 🚀 ESSENCIAL: Importa o hook de AuthContext\nimport { useAuth } from \"../context/AuthContext\";\n\n// Telas\nimport LoginScreen from \"../screens/LoginScreen\";\nimport RegisterScreen from \"../screens/RegisterScreen\";\nimport DashboardScreen from \"../screens/DashboardScreen\";\nimport AddReadingScreen from \"../screens/AddReadingScreen\";\nimport ChartsScreen from \"../screens/ChartsScreen\";\nimport ProfileSetupScreen from \"../screens/ProfileSetupScreen\";\nimport BiometricSetupScreen from \"../screens/BiometricSetupScreen\";\nimport DeviceConnectionScreen from \"../screens/DeviceConnectionScreen\";\nimport NutritionScreen from \"../screens/NutritionScreen\";\nimport SettingsScreen from \"../screens/SettingsScreen\"; \nimport ForgotPasswordScreen from \"../screens/ForgotPasswordScreen\";\nimport ResetPasswordScreen from \"../screens/ResetPasswordScreen\"; \nimport LoadingScreen from \"../screens/LoadingScreen\"; // Usado para fallback ou tela inicial de loading\n\n// Drawer customizado\nimport CustomDrawer from \"./CustomDrawer\";\n\n// --- TIPAGENS GLOBAIS ---\n\ntype DrawerParamList = {\n    Dashboard: undefined;\n    AddReading: undefined;\n    DeviceConnection: undefined;\n    Charts: undefined;\n    Nutrition: undefined;\n    Settings: undefined;\n    ProfileSetup: undefined;\n};\n\nexport type RootStackParamList = {\n    Login: undefined;\n    Register: undefined;\n    BiometricSetup: undefined;\n    ProfileSetup: undefined;\n    DrawerRoutes: undefined;\n    ForgotPassword: undefined;\n    // Rota para Deep Link de redefinição de senha\n    ResetPassword: { oobCode?: string }; \n};\n\nconst Stack = createNativeStackNavigator<RootStackParamList>();\nconst Drawer = createDrawerNavigator<DrawerParamList>();\n\n// --- CONFIGURAÇÃO DO DEEP LINK (para produção) ---\n\nconst linking: LinkingOptions<RootStackParamList> = {\n    // O prefixo DEVE ser o 'scheme' do app.json + '://'\n    prefixes: ['glucocare://'], \n    \n    config: {\n        screens: {\n            // Mapeia o caminho do URL para o nome da tela\n            // Ex: glucocare://ResetPassword abre a tela ResetPassword\n            ResetPassword: 'ResetPassword',\n            Login: 'Login', \n            Register: 'Register',\n            ForgotPassword: 'ForgotPassword',\n            DrawerRoutes: 'DrawerRoutes',\n        },\n    },\n    \n    // Extração de parâmetros: Garante que o oobCode seja lido e passado como parâmetro\n    getStateFromPath: (path, config) => {\n        // Verifica se o caminho é para redefinição de senha\n        if (path.includes('ResetPassword')) {\n            // Assume que os parâmetros são separados por '?'\n            const urlParams = new URLSearchParams(path.split('?')[1]);\n            const oobCode = urlParams.get('oobCode');\n\n            if (oobCode) {\n                // Retorna o estado com a rota ResetPassword e o parâmetro oobCode\n                return {\n                    routes: [{ name: 'ResetPassword' as const, params: { oobCode } }],\n                };\n            }\n        }\n        // Caso contrário, deixa o React Navigation lidar com a navegação normal\n        return undefined; \n    },\n};\n\n\n// --- COMPONENTES AUXILIARES ---\n\ntype MenuButtonProps = {\n    navigation: DrawerNavigationProp<DrawerParamList>;\n};\n\nfunction MenuButton({ navigation }: MenuButtonProps) {\n    return (\n        <TouchableOpacity onPress={() => navigation.openDrawer()}>\n            <MaterialIcons name=\"menu\" size={26} color=\"#fff\" style={styles.menuIcon} />\n        </TouchableOpacity>\n    );\n}\n\ntype IconName =\n    | \"dashboard\"\n    | \"add-circle-outline\"\n    | \"bluetooth\"\n    | \"show-chart\"\n    | \"restaurant-menu\"\n    | \"settings\"\n    | \"person\";\n\nconst drawerIcon = (name: IconName) => ({ color, size }: { color: string; size: number }) => (\n    <MaterialIcons name={name} color={color} size={size} />\n);\n\n// --- ROTAS DO DRAWER ---\n\nfunction DrawerRoutes() { \n    const insets = useSafeAreaInsets();\n\n    return (\n        <Drawer.Navigator\n            drawerContent={(props) => (\n                <CustomDrawer\n                    {...props}\n                    navigation={props.navigation} \n                />\n            )}\n            screenOptions={({ navigation }) => ({\n                headerStyle: {\n                    backgroundColor: \"#2563eb\",\n                    elevation: 4,\n                    shadowOpacity: 0.2,\n                    height: 56 + (Platform.OS === \"android\" ? StatusBar.currentHeight ?? 0 : insets.top),\n                },\n                headerTintColor: \"#fff\",\n                headerTitleStyle: { fontWeight: \"700\", fontSize: 18 },\n                \n                headerLeft: () => <MenuButton navigation={navigation} />,\n                \n                drawerActiveBackgroundColor: \"#2563eb\",\n                drawerActiveTintColor: \"#fff\",\n                drawerInactiveTintColor: \"#333\",\n                drawerStyle: { width: 280 },\n                sceneContainerStyle: { backgroundColor: \"#f0f6ff\" },\n            })}\n        >\n            <Drawer.Screen name=\"Dashboard\" component={DashboardScreen} options={{ title: \"Dashboard\", drawerIcon: drawerIcon(\"dashboard\") }} />\n            <Drawer.Screen name=\"AddReading\" component={AddReadingScreen} options={{ title: \"Nova Medição\", drawerIcon: drawerIcon(\"add-circle-outline\") }} />\n            <Drawer.Screen name=\"DeviceConnection\" component={DeviceConnectionScreen} options={{ title: \"Conectar Dispositivo\", drawerIcon: drawerIcon(\"bluetooth\") }} />\n            <Drawer.Screen name=\"Charts\" component={ChartsScreen} options={{ title: \"Gráficos\", drawerIcon: drawerIcon(\"show-chart\") }} />\n            <Drawer.Screen name=\"Nutrition\" component={NutritionScreen} options={{ title: \"Alimentação\", drawerIcon: drawerIcon(\"restaurant-menu\") }} />\n            <Drawer.Screen name=\"Settings\" component={SettingsScreen} options={{ title: \"Configurações\", drawerIcon: drawerIcon(\"settings\") }} />\n            <Drawer.Screen name=\"ProfileSetup\" component={ProfileSetupScreen} options={{ title: \"Perfil\", drawerIcon: drawerIcon(\"person\") }} />\n        </Drawer.Navigator>\n    );\n}\n\n// --- NAVEGADOR PRINCIPAL (Auth & App Flow) ---\n\nexport default function RootNavigator() {\n    // 🚀 Extrai o estado de autenticação e carregamento do Contexto\n    const { isAuthenticated, isLoading } = useAuth();\n    \n    if (isLoading) {\n        // Exibe a tela de Loading enquanto a verificação de auth está em andamento\n        return <LoadingScreen />; \n    }\n\n    return (\n        // Envolve o Stack Navigator no NavigationContainer e configura o deep linking\n        <NavigationContainer \n            linking={linking}\n            fallback={\n                <View style={styles.fallbackContainer}>\n                    <ActivityIndicator size=\"large\" color=\"#2563eb\" />\n                </View>\n            }\n        >\n            <Stack.Navigator screenOptions={{ headerShown: false }}>\n                {isAuthenticated ? (\n                    // Usuário Autenticado: Apenas rotas do aplicativo (DrawerRoutes)\n                    <Stack.Screen name=\"DrawerRoutes\" component={DrawerRoutes} />\n                ) : (\n                    // Usuário Não Autenticado: Rotas de Autenticação, Setup e Redefinição\n                    <>\n                        <Stack.Screen name=\"Login\" component={LoginScreen} />\n                        <Stack.Screen name=\"Register\" component={RegisterScreen} />\n                        <Stack.Screen name=\"ForgotPassword\" component={ForgotPasswordScreen} />\n                        <Stack.Screen \n                            name=\"ResetPassword\" \n                            component={ResetPasswordScreen} \n                            options={{ headerShown: true, title: \"Definir Nova Senha\" }} \n                        /> \n                        {/* BiometricSetup e ProfileSetup podem ser acessadas após o registro/login inicial */}\n                        <Stack.Screen name=\"BiometricSetup\" component={BiometricSetupScreen} />\n                        <Stack.Screen name=\"ProfileSetup\" component={ProfileSetupScreen} />\n                    </>\n                )}\n            </Stack.Navigator>\n        </NavigationContainer>\n    );\n}\n\n// Estilos adicionais\nconst styles = StyleSheet.create({\n    fallbackContainer: {\n        flex: 1, \n        justifyContent: \"center\", \n        alignItems: \"center\", \n        backgroundColor: \"#f0f6ff\"\n    },\n    menuIcon: {\n        marginLeft: 12\n    }\n});\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}